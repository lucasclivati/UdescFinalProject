%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1605.m00.i125.n026.S.c12.weapons.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 5/26/2016
%%BoundingBox: 0 0 525 350
%%HiResBoundingBox: 0 0 525 350
%%CropBox: 0 0 525 350
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1605.m00.i125.n024.P.c25.312641732 Gun icons. Machine gun and handgun, rifle and pistol icons</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-05-25T21:46:22+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-25T21:46:22+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-25T21:46:22+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqtlljijeWVxH&#xA;FGCzuxAVVAqSSegGKrgQQCDUHcEdKYq7FXYq6orSu57Yq7FXYq7FXYq7FXEgCp2AxVCSaxpEUohl&#xA;vrdJWpxjaVAxr0oCa74otF4paV0cVVgwqRUGoqDQ4q3irsVdirsVdirsVdirsVUzc2wJBlQEdRyG&#xA;K22txA7BVkVmPQBgTiq/FXYq7FXYq7FXYq7FXYq8e/5yM882ekaJa+XW5+tq4aWV4zskMLL8LqN2&#xA;EhJH+xycA15DtTxfR/zZ87RfVtL0zV7kW6UitbeNZGYL+yqgqenhk6DUJFMLX8yfPN7cLBaa/fXE&#xA;8jKqRRTOzM0jhEUKvdncKB4kDGgvEU+tT+dt4ROkutNHGzoAVnBDqeLdadCCDt1zC1OplA1GBl9z&#xA;mafTiYuU+H70wtIPzz/TNvqFtb3lxqcKmOA3yFYChqWWQtwWlK9+tMpwarLKQjKHDHvbs2lxxiZR&#xA;nxSeqeWrv845NXtl8x2GiwaQQ/1uSzluGuB+7YpwV/g/vONfauZ2ziC2b4GTFH/NTyAjsjaxGGUk&#xA;MOEvUf7DMT89h/nOT+Ty9zX/ACtb8vv+rzH/AMi5v+aMfz+H+cv5PL3POvzY8z+XNZm03UdJ80y2&#xA;r2Qlia2tI5w0hm4nkWrEFChCO/XL8Gpx5DUTZcfUaecBchTzqw8xahHfTSaj5v1SDTpI2Vo4JriU&#xA;8uSrGCrNEvEpWvh7jMqnE4kuk1HyDcatZTL5jvpIoEmMjm2JmUgK0fpAyBTUhuVWFNqVxXZOWv8A&#xA;RpA8y+dNWmSTi4Sa2ccNidv9Lf7Vd8aW/ezj8t/zW8j+S/KNnoF7c3NxPDJKfWjgAVjK7SAAF67D&#xA;IyiSzjkADKV/5yH/AC8LAFrxV7u0ICgeJ+PBwFl4oRGmfn9+Wt8XVr+S3aMAnnDJIpr/ACtCsgOD&#xA;gLIZAj/+V0/ln/1ef+na6/6pY8JXxAmXl/8AMXyb5hvzYaPqH1q7CGUx+jPH8CkAmsiIv7Q74DEh&#xA;IkCn91cJbWs1y4LJCjSMF3YhASaVpvtgZJJo/m6TV9Mt9SsdFv3tLpecLsbNSVrSvE3II6YSGIla&#xA;WeYfzKXR2uoDoWoT3Vnai9nRfqxjjiYsoaSSOaXjuh/ZOERQZ0+fPNv5kat5k1RNTmEVjMYhB6cV&#xA;WUqjsy7SFt/jNaZYBTRI2i/Kv5uSaFYzWlxoMGqytMz/AFq4iHKlAoQUB+Ecaj54kWmJA6Jte/nd&#xA;Y3ULQyeWtOjr+3G/oyo3ijqtVYYOFJkO5MdK/wCckNStLNLe7soL2RNlna44uV7c6KQx96DEwSMh&#xA;CM/6Gbl/6s8H/SUf+aMHAnxWdaB+cnlnU9KtruVLiK5lHGeGG3nmSOQGhX1VTgRShrX8a5ExZiYZ&#xA;xZXcN5aQ3cNfSnQPHyBU0YVFQdxkWatirsVdirsVeYee/IjeafzO0RZ7iW20y20+Wa8EJeNp0WQx&#xA;Pb+otKLKLij77rUd8kDswIsvRV062h0z9HWSLZW6xGG3SBQixLx4rwVaAce1MizfI/5EaGbv8yV0&#xA;y+Ets6QTGVCiiRJISrqCsqPxZXUHpUEZbLk48Bu+u7GyhsrVLeIsUXkSznkzM7FnZiepZmJOVOQr&#xA;4q7FXYq+R00bVtS1O4g0+zmuphK4ZIY2cj4j1oNvpzkBjlKRAFvTmcYiyaZjov5Hecr7i96IdMiO&#xA;59Zw8lPZI+Q+9hmbj7Myy5+lxMnaGMct2Q65+TPkny/5YvtV17V7oR2URlkuYxHGtRsqrEwckuxC&#xA;heW5zbaPRDDKwbPJ1mr1Ryxoig8b8keXtR826ZqV8trd28FpG31J7ezuL0XN0g5C3DRIEj7VZjtU&#xA;bZsjJ1ohaa/lz5W0/XPOemabqFuJLKd3M8VSnNY4nkKkpQ0PDfMX87iMuGJuRckaPII8UhUXvf8A&#xA;ypD8rwCBotAaCgursCg6dJsu4iw8MLZfyM/KyX+80Tl3B+tXlQR3H77bHiK+GHm2s/8AOLuqT629&#xA;zpWvxWOmvMzx2rRSyNDF6zGNAXkb1CsfHdiKnDxsfDZnp/5Nanp11FNa6tphT4FuoX0O0pKgfkTy&#xA;DclcKeK0PH2rvg4mXAz7/Cnlf/qz2P8A0jQ/804LLKgr2eh6LZTetZafbWs1CvqQwxxtxPUVUA0w&#xA;WtK96rNZzqoJYxuABuSSpxS8m/KjyZrt/pDHzY9/FYWbfV9P0WdprVKABjI8Y9MuPj4rXbrk5Hua&#xA;oRPVn/8Ayr7yR1bQ7N2pxLSQq7U6dWBOR4iz4Q+fNZ8n2nn78473y95asY9H0by3A9vezInpB5Yp&#xA;HLH7LbtNJxQ0PwrXcbZO6DWY2Uo/Nb8o20fzMbiV0trG/HOzs7d5JhGsaorL6s3xGrknpmu1uvlh&#xA;oAXbn6TQjLZJqn0J5S/Ln8uR5X0n0fL+n3MZtIWW4ubWCaZ+UYPKSRkqzGu+ZePJxRB7w488YiSO&#xA;5Nv+Vd/l/wD9SxpP/SDbf80ZOyx4Qtb8ufy+ZSp8s6VQihpZW4O/gQlRjZXhCI8p+UtL8r6fPp+l&#xA;qUs5bmW6jh7R+sa8F/yV6D2xJUCk6wJdirsVdirsVdQVrTfxxV2KsMsfy9ktvzEuvNxu0ZLhWUWv&#xA;pkMKxqn2+X+T4Zhx0pGY5L27nKlqAcQhXxZnmY4rsVdirsVaVEWvFQtSSaClSepxVvFWC/m3+WVx&#xA;+YGjW+mx6zLpUdvIZmjWMSxTNSi+ovKNvh3pRqb9DthBpjKNsl8reWtL8taDZ6LpkSx2tnGqAgAF&#xA;2A+KR6dWc7k4CkCmO+Uvyk8t+W9Ri1OGW4ur+EMI5JWUKvNSjURAv7LEbk5g6fQQxy4hZLmZtbPI&#xA;K5Bm+ZziOxV2KuxV2KuxV2KuxV2KqMdlZxXU13HBGl1cKi3FwqKJJFir6YdwOTBOR416VOKsd88+&#xA;QdO83x2KXk8lv9SkZg8QUsUkADIC1QKlVNaHpmLqtJHNVmqcjT6k4rrqneiaRa6PpVtploXNtapw&#xA;iMjcnpUnc7eOX48YhERHINWSZlIk9Ubk2DsVdirsVdirsVdirsVdirsVSzRfM2ha290ml3a3TWTi&#xA;O6Chhwc12PIL/KemEhAIKZ4ErJ7iC3iMs8ixRLTlI7BVFTQVJ2xVY99ZRxJK9xEsUg5RyM6hWHiC&#xA;TQjfFVbFXYq7FXYq7FXYq1HIkiLJGwdGFVZTUEHoQRireKuxVoMpJAIJHUeHfFW8VdirsVdirsVU&#xA;Lu/sbNFkvLiK2R2CI8zrGCzGiqCxG5JoBitqNtrmjXV2bO2vYJ7oKXMUciuwAoDXiT44aQJBG4Eu&#xA;xV2KuxV2KuxV2KuxV2Ksb/MTTtb1DyneQaLqi6Nerwl/SMkrQpFHEweQtIgJUcAanCGMuTxA675m&#xA;Oo2iW/5jqTJIsMs37/04hIrN6rLOscbqnp0P+sMsryarPexu78j3tnb3NxN5z0q5e61KKZrezm5t&#xA;K1zKqSXEhpH6fENyYCuwOIPkgjzZfeWPmS308WFl+aOmw+mqpCi6g8aqo6APGGI2wbdyaPewfXbD&#xA;W7W2SXUvNVnrYqyyJBqDXbs7NyVyr0NKV+LJBifexs6JfSahBfiW1Ns0kbgm7tVcKpAPKMyCRaU7&#xA;rhY0+0dN8zeX9TWdtP1CC5S2ZUnkjcMimRQ6fF9k8lNRQ5TTlAhF/pHT/wDlqi/5GL/XAm1dHR1D&#xA;owZDuGU1B+kYq3iryo/n3poNDYRgjqPri/8AVPJ8DT43kkfmb8/9PvNG1DS00qUPe289qs8c6uEM&#xA;iFA9OK1pyr1wiCDlsMf0bz35JsrC34+WITJsZJpdQZJS/wBl2bnuCx+LbthosRMdzKNL/PywstPE&#xA;D6cJRAJGWl7E5EfIvHGNmZuCEIK9aYDBkMvkh2/5yaty3waMVU/ZWSSQMK7fFxiI6++PAnxfJryV&#xA;+cvldfMuv6xqrvZjWBaskSrJKENrGYgKBQ3xg13GJjsscm5t6Na/mt5AuY43i1ZKyD4UMcob5FeH&#xA;bIcJbOMMk0/ULPULOO8s5RNbS1McgqAaEqetD1GBINojFKQf8rA8kf8AV8sv+Ryf1zH/ADeL+cG/&#xA;8tk/mlQuvzM/L+1TnP5gskWhIrMprTfYDqfbLMeWE/pNteTHKH1Cnzh+Z/5o6V5s1a2v9NtpbJ7K&#xA;U+nLO5lWVBshMIVfTam5o5/jmVEU4czaD8q/m9rXl+7luIXt5GlQIW9Fg4ANaKWLih77YSLYxNcm&#xA;aJ/zlDrixKBplrOwB5OTIp29qgb+2R4A2eKVqf8AOTPmGe+hH1C3iiLBXjQ15b+L+PTqMeAI8Qs2&#xA;0z/nIPSrm+ggvNJlsLWVqS3j3NvIsa/zFI2Zz9AyPA2eIy4/mp5B9IS/pUGIkAOIZyDU8R0j8cHC&#xA;U+JFlFvPFcQR3ELc4ZlWSNx3VhUHf2yLNfiqWeaJGj8s6vIrFWSyuGVgSpBETEEEbjKsx9EvcWzF&#xA;9Y94fK1hfeYr+4jtrW5vJriZgkMUc0zMxPYCucsJzJoEkvRGMALID0fy3+UfnrUJZ49evrrSrX0/&#xA;3bidbhnZtqcVlbiAOtc2en0WUyuZMQPNwM+rx8NRAJKtr/8AzjlezaDd2+meZry51GZeCJqEjC1Z&#xA;SwqG4B3G3eh+Wb7jdGcfm+eZfKXm9/NV15Oto477VraU2rw27RcWZWCHjI/DYE7k0puTShyVtfDv&#xA;SDePXbHUn0SSFfrFrMbSZFRX4yI/puvNQ6mjAioqD74DkiOZSMcjyD3Sf/nEPlQx+ZhUr8Qa0Ioe&#xA;poRN0qfDI8TYIkOtP+cRSt1G9z5jBgU/vBHbkOV7gFpCAfow8SeEpjH/AM4k6ICfU8w3LDtxgjXt&#xA;7s2PGx8JP4v+cZfJC2JtZdS1Z+Xpl2FygTlGoX4YzGyAGncGnY4OJPhhS/6Fa/L/AP6uGrf8jrb/&#xA;ALJ8PGV8IPS/KPlfT/K3l600HTnlks7IOInnZWkPqSNK3IqqL9pz0GRJtmBQTfAl4Lof/OM129gj&#xA;655gkivm3eGzRXjQeHN6Fv8AgRlhm0jExX81PylXygNLbT9VuLhLwTCdpwuzRcKcQgXrzPU5h6rX&#xA;DDVi7crT6Hxbo1TOPLP5U/l0nkC28w64885+q/WLu4E8kQ5CtVRFYDly+EDucshqgcfGdhVsZaWp&#xA;8HMsI/Lz8p7nzO097G3KyspY1K3UsqxzNUO8ZMQ5H4BRgGWnIGvbMXQ6rJlJMvp6ORrNLjxgAfU9&#xA;js/yN/LkWsQvdISe7Cj1pBPcgFvb94Nh06ZsOIuF4YV1/JD8rlNV0QKfEXF0P+ZuPEV8MMt0rRtL&#xA;0rTIdL0+3WCwt1KxQCrAAksaliSSWJJJ75G2QCLVVUBVACjoBsMUt4q+f9J8k/pK81rRrTQXa8+u&#xA;zRDWbp3S2tYEchfTROPOT237dq5z2PTcRlER3vmeQDu55+ERkZbVy6lmi/kR+XNvprPrcUuo/V0a&#xA;SWeSWWELxFWZVgZOw6EnNtptLHACQfe63UZ5ZiAQ8q8g/lXofmzXNSe3t/S0q0b1IoZnlIpJITFG&#xA;zI6t9hSGNelehoRRodZkyzlZ9I/AbNXo8eOAoeooDzv+XOleUvNK2s9ul1aScLpI0M0cZidzyiHK&#xA;SRwF4lKl+VN65Trdbmx5aB9Ox6Nuk0eLJjsj1fF7lpP5PflLJZw3dlocMtvcossTvJPKCkgBB/eS&#xA;N2pm4jk4hY5F1ksQBoh4X+S/kXS/MH5narDNfTi28t3f1qzWONYxOsFyVQSN8XCvFfhG5332ywnZ&#xA;qjEW+ssrblCTT7CVzJJbRO7fadkUk/MkYooK+KXYqo3tpFeWc9nNX0bmN4ZOJoeLqVND8jkZR4gQ&#xA;eqYyo2x/yp+XflnyxLJPp0LvdSDibmdg8ir/ACqQFCg96DMfBo4Yt482/Nqp5NjyZNmU46R+dz5p&#xA;HlbUF8qxxy688RSyEriMKzbFwWHHko3UNtXrhCD5MB/JT8pINF8oyN5v0m3udevrqWe5W8jhupI1&#xA;B4IvqfvAeXDnsx+1hJYxjtux78wvy38xXPne4bQNLdrKWOF4GiCxQx8YxHxDEoi0KdK7Zz+s0mSW&#xA;YmI5u80uphHEBI8nu1o1w1rC1wgjuGRTNGCCFcgchUbGhzexut+bpzV7KuFDsVdirsVdirsVdirC&#xA;fzX8m3/mjQraHTlVr62uFkQOwQGNgVfc/QfozB1+mOWAEeYLl6POMcjfJV8s+RHg8hjyt5hdLuJi&#xA;3IQM6hVMnqqA54tVZN+mSwaasXhz3Rm1F5OOOye+WfLeneXNHh0rT+RgiLN6knEyOzsWLOVVATvT&#xA;p0AzIw4hjiIjk05chnLiKaZY1uxV2KuxV2KuxVxAIIIqDsQcVQOmaFo2lyXEmnWcVo10Va4EKhFY&#xA;rWh4j4e56DK4YoxvhFWznklLmbpiH5v+SZvMWhx3VhGZNU04l4Y16yxPT1EHidgy/d3zD7Q0xyQs&#xA;fUHK0Wo4JUeRR35XaL5k0byvHYa4yc0YtawqeTxRt8XB2HwkhiaU6eOWaHHOGOpsNXkhOdxQPkP8&#xA;n9F8meYtT1ywvrq4m1VXWeCcx+mvOX1aqEVTUHYVzNJcMRpnuBk7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWndERndgq&#xA;KCWYmgAHUk4qgU8waDIodNStXU9GWeMj7w2GkWFC883+VbKNnutYs4VUVIaePl9C1qfoxorxB5ve&#xA;/wDOR3lyDVJoYbf17GOqpPzdHdh34GP4RkuBqOVUi/5yK8syEf6OEBFavPSn/JPHgXxfJt/+chfL&#xA;5ikMMMXqqDwV7igNPlHjwL4vkn+nfnZ+XF6LZDqnoXNzwUQSQz/C7mnEuI+HXvWmDhLMZAzrIs3Y&#xA;q7FXYq8q1/8AOxtP1ee1s7OO9sl4ta3cReRZEZAa1QU+1XbJiDTLLR2T7y552vdX0WHVJr7TNOE3&#xA;Mi3uOayIqMUq4eVCteNenTAQmMyR0Vr/AM7fULdroapo1/HF8UtvFcLDKV7+mWkkUt7HrjSTP3Jr&#xA;aeePKNzbRz/pa1g9QcvSnmjikXtRkdgRg4SyEwWx538nGcwfpqy5hBIT68fCjEgfHXhXbpWv340V&#xA;4h3pzHJHLGskbB43AZHUgqykVBBHUHAyXYq7FUHeazo9lKIry+t7aUjkI5pUjYqSRWjEGm2QlkjH&#xA;YkBnHHI8gVD/ABR5a/6u1l/0kRf81ZHx4fzh80+DPuPyWy+bPLEcbyNq1nxQFm4zxsaAV2VSSfkM&#xA;IzQOwI+aDikBZBYlH+dXlp72e0EE4kho1SBxZGJCsD706ZfwFx/FCPsfzb8lXOofUZrs2Enpeqst&#xA;5whibenBXLULnsvXAYlkMgKZ/wDKwvIv/V/sO3/HxH36d8FFPGO9Uj89eS5D8Gu2HjvcxAb9OrDG&#xA;ivGO9R1Hz75at7R5LK+t9UvNhb2FnPFLNK7GgACsaL3ZjsoqT0xpeIJ3YXa3ljb3aqUW4iSVVPUB&#xA;1DUP34GSvirsVdirsVS7zJPHB5d1SeQ0jis53c/5KxMThCDyeb/lRqvnXWfK9pZ6elrpWlaept/0&#xA;jMj3Eszg8j6UXKJRSu7MTv475KVW1wJIZBqv5YDWJ7q51fWJLm4uoFtXcW1oAkSEsBHzjkZDV2+J&#xA;Wr92DiZGFvBz5LF75kurDSblrrTILhYDqZhcooduIZhHz2rUjxAr0rTHwa4ZJmIGw6tubRHHEEnn&#xA;0YMYfMk196MUDQo8jJE0yemtFcxk1cdmUg07g5bm1WPHtI7tOLS5Mn0jZ9HR/wDOOXl76uok1W7N&#xA;xwAdwIuHOm5C8a0r2rlnGjwgw3yV+R+neYtI1G9XVSLu3v3toGWIrFSJlZnYFnLF0eoAIofHKNPq&#xA;xlBIHI025tIcZAJ5i3vflzy3ovlvSYtJ0W2+q6fCWaOHnJJQuxZvikZ23J8csJQBTvM8jxeWtWlj&#xA;cpIllcMjqaFSImIII6UwhTyeb/l55nk1fQLSz07RbnV9RtYwupahd3BgtxISTT1mMruadgmSkGuJ&#xA;sInzD+XPm7Xpbt5TZ2kFxCsUFml7evHCw5VkICRI7MGoQVptiJBJiS8n8w6Z5l0DzLb6BGbS8WBY&#xA;Eumhc1HMANVpfSVSAa77eOUjWQOTw/4ky0cxDj6JBc209nqE1kv1kyQyujKbp2HPmagGF/SIrsOO&#xA;2XTzQh9RAaoYJy5C0/8AOFn5q8pXdva6nFbNPdW63SpDzegZmX0yx4LzXjvSo6b5YDbCUKYu+sah&#xA;dyGQ6V60lACQGNB26PthRS6O4v3bi2jlB15FJKfg+BafQX5e+U9X1Pynpuo3+uavp80sZEdlbziO&#xA;FIVYrFRJY5GFUAP2srkd3IhHZlWneS5bLUor5vMOsXYiJJtLm4jeB6rxoyLEtfHr1yNsuFkmBk8D&#xA;/P6ykj81WV3Q+lcWaqD/AJUUj8h9zLnP9qxrID3h3XZsvQR5sN0byN5t1ni2naXPLE3Sdl9OI/8A&#xA;PSTin45h49Lkn9ILlZNRCHMspuvyYvtK0C+1nzFq1vptrZwPM/phpWHFfhUn4BUtsOPL23zY6fsu&#xA;QkDIjYuBn7QiYkRDxXQfJupa3omoavCGht7NGeMtBO/rMlKojRpItd+pIA70zoDIB0IiSzn8kvyn&#xA;tvN15fzanLPZx6YIZIRGqhXlkL8eYcGqjh0HXxGVxzwl9JBptOnkPqBD2Af84+eX6gm6FNq/6Ovb&#xA;YftZLjY+D5qo/wCcf/K4NROwO3+6k7dMeNfB81kn/OOvku4Qx3M05j2p6Ajibbp8XF9vbHjSMQTS&#xA;P8jfIqRqgbUiFAAP6RvB026LIB9wyNs+AJx5f/LrQdBu4rmwlvC0JYpHPcPMvxKymvOrHZz3679c&#xA;SVEaZRgZOxV2KqV1a213bS2t1Gs1vMpSaJxVWVhQqQeoOKrNP06w020js7C3jtbSKvpwRKEReRLG&#xA;gHiSTioCvJGkkbRuoZHBVlPQg7EHEhQlPlrypovlu2nt9KhMUVxKZnDMXIJAAUMd+IpsDlOHBHGC&#xA;I9W3LmlkNyea/nL5G1zV/MGnXejWL3RmgaGb0wAqNHIXDOxoq8vV7ntms7R005zBiL2c/Q6iMIkS&#xA;NPV9J+vfouz+vqFvhDGLpQQwEvEc6EdfizbY74RfN1s6s1yQPlfyrpvlqzuLTT3leK5uHun9ZlYh&#xA;5AqkLxVfhAQUyGDBHECB1Ns82Y5DZ7k4y5qQmrabb6ppd3ptwzrb3kTwTGM8X4SKVahoexxCCLQv&#xA;ljy1pflvSItK0xWW2iZn5OQzszmpZ2AFT2+WEm1ApNcCWKeU/IFr5f1vVtXN097c6k9UklH7yNGY&#xA;u6lgfi5NTfboMxMGkGOcpXZk5ObUmcRGqpgX52+UNVvvMGm3elWMl01zA0MiW8ZajxSF+T8Rty9X&#xA;qfDMDtPBKUwYi9nM7PzRjEgmt0w/Mry95o8023lLTG06Ucikms3I4H6uzhEf4wW6VdjT2zdYSeEG&#xA;XOnUZ4gyocrZv5U8j6N5ZjVLBS7LCtuJ5FjEzIrFv3jxqnM1PU4SbURpkOBk7FXYq7FVKeztLho3&#xA;ngjmaE8omkVWKE7VUkbH5YDEHmEiRHJVwoYZ+an5dSeffL8ejDV5dKiSYTSenGsqSlR8IkTlGxCn&#xA;cfGN/kKEGmMo2nejeVNH0fyxD5bsIVi06K3NtxUAFgy8XdvFnJLMe5yMhxAg9WcTw1TBPyf8kea/&#xA;LepahLqkEcFlcxBFHqKzs8b/AAMFQtReLN1Nc1fZ+myY5HiGxdhrdRDIBw83qebV1zsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirFL3zhrtveTwReWby4jikZEnQni6qSA4+A7N1yXD5tZme5AWX5k6lfJI9n&#xA;5burhYZGhmMb8uEifaRqJswruDh4fNHiHuZVoOtQaxpyXcY9OQM0dxbk1eGVCVeN+hDKR0IyJDZE&#xA;2EwwJdirsVdirsVeT+bvz8ttB1a706HRZLs2lwbZpTOsfIoR6hCBXam+x/2smINZyUUvX/nJzQIZ&#xA;IzqOj3Nvbu3AvG6zOGIJAC8UB6fzY8CBlTmy/wCcg/J91LIgsdSAUVUpbiYkVp8Sws5X6cHCkZAj&#xA;U/O7yzLLHFb6dq0skjqtDZSRgAmhar8Rt4Y8KeMPQsizdirsVdirsVQesaxp2jaZc6pqU3oWNonq&#xA;XE3Fn4qNq8UDMfoGKCaYfJ+eH5axM4l1R0RK8pDbXBXb5RlvwyXAWPiBA33/ADkJ+W8EPq2l3Nfr&#xA;UKTHDJEKk0pWcRb/AEY8BQcgV1/Pz8sgP9J1GW1J+wJLadi3jT0lk6e9MeAp8QM50nU7XVNNttRt&#xA;CTbXcazQlhxPFxUVHbIlkDaKxS7FXYq7FXYq7FXYqxv8yLi/tvIeu3NhI8N1b2ckqyxEB1WMcpCp&#xA;PQ8AcMebGXJ8eRedNc9JfUvrsyUHI+vLufofLqce1aPzdr8v93c3r/6s0x/U+QnOMd5EBlGMpcgS&#xA;zq98kfmZYeUv8T6jeNZ2lI2+qS3c4uuMzBVrH9kH4hVS3IeGEEFTEgWs0nRfzQi8uXGu6fqdxp9k&#xA;8kXCMzXMUt7LM3pr6Cxkeqw9zWnSuEkKAatN9Q8kfmboMdjrWqeYZbS71e5is7hoJZ3uV5glfVf1&#xA;U50VTsG+nMbUamOMCxdmnIwaaWQmjW1vVdP/ACt1OGGI3vnfzBcXSGsjRXKxQsQagem6zOBTY/vD&#xA;88t4mHB5sv0TSX0uzNu97cX5Ll/Wu39RxUAcQf5dsBLKIpH4EuxV2Kvnn8/rLyqfMtqmnII9cKvN&#xA;q8sJ2o4URK4NVEjULbUNN26jMTW6w4YivqLkaXSDLLfkGMeTfyk8weZ0j1aCKG50a1uoxJDdyGJr&#xA;gRODMsJWJh9msfPkvE1pUjLdJmnPHxT5n7mnU4IRnUOQ+99CeRPIWh+Vre5kstOgsry+kZ7n0WeW&#xA;ic2McfqSfE3FW3PdqnLyWAFMpwJdirsVdirHfPPnSy8o6RFqV3byXKTXC2yRxcQeTqz1JYjakZyj&#xA;UZxijxEW3YMJySoPOLz/AJyHnLUs9FRVH7U05Yn/AGKotPvzVy7XPSP2uwj2YOsnWn/OQ1x6sYu9&#xA;GT0uX714pjyC16qrL1A98Y9rnrFZdmDpJd5p/O7QbQSS+W9GS8uvTLNdyr6JBpUhQg9Qn35D6cyo&#xA;9pRlOMIjmXGloTGBlLo+fLnXPOd9MZ727vr6ZojCJLppLlhGSTRTLz40JqCOh6ZuHUWURofmPz5p&#xA;onk0i8kiW7IE3JIpQShYCglDcftHpTKZ58cTUpAH3tsMOQi4gke5lemeTfzXnElzfWGr/WzJyVgJ&#xA;4QBQEFVj4gb+GYetzZYEeGL+FuZo8OOQPiGvjTL4k/Ph1+H9KADb42ZT/wANQ5hDU6o/w/Y5h0+n&#xA;/nfauEP58+rHGTqdZWKqeewIUt8TfZUUXqxArt1IwjPqv5v2ftQcOm/nfa9Mt9V/OMQRiTQNJeQK&#xA;ObvqEkbE03JRIJVX5Bzm0xXwji+rq67JXEeH6VDV7786LjSry3ttC0qC4nhkihnj1KUvG7qVWRQ1&#xA;sgJQnlucs2Ybpt+XFl5n07y9BpeuadaacljFHDZR2dw9wCigghuaqV47AfE3zxKYsrwJdiqE1jTo&#xA;9T0i+02Q8Y723lt3PWglQof+JYoIeH/l9/zjXPpnmBL7zbJZ6lp8CFoLOB5WV56jj6yyRoGjAqeN&#xA;dzStRUZYZtcce+6efnZ5MeS20e50TT6iFntGtbSLtJ+8j4pGOlQ/bvmk7UwmXDICzydv2dlEbB26&#xA;pn5i8meafN/kDQdNkZNOvLbg9/DdFqsYkMSk+mH+19qnvmz0siIDiG9Ov1UQZnhO1sq0jyzcJc2t&#xA;1qhgI06MQ6Tp9sG+r2yheBer7ySFfhDcRxXYDcnLSWsBDfmN5PvvNOkWtlZ3SWstvdJc85AStFR1&#xA;24itavtmHrNOcsQAao25elzjHIki9mV5luM7FXYq7FXYq+VNK8rea/M3nKTTby2ngu7m5kfVr2nq&#xA;CAGVxM7MKqp+BhGGpX4aDjmsyaAzy8czcb+zo5uPWiOPhiKNfb1fUOl6ZY6Xp1tp1jEIbO0jWKCI&#xA;dlUUHzPie+bNwkVirsVdirsVdirCPzl0W81XyLcx2UD3V3bzQTw28Sl3ciQIQqrUn4XJzD12Myxm&#xA;t3K0cxHJu8e0P8o/PGquvKxNhCacprz91T/YbyH/AIHNJi7Pyy6V73bZNbjj1v3PR9M/ILy7DYyJ&#xA;qN5PdXsiUWaOkSRsR1VPiLUP8x38M2UOyoAeoklwJ9ozJ2FBOvIX5Y6f5b0++gvfS1C4vy0U0xSg&#xA;Nsy8fS4sW2bct4/RmRo9GMIPUtGq1Jy10DItE8saLogYadDIhYEcpZ5rhgGYuwUzvIVDOxZuPU7n&#xA;M1xAHm35g/k5PqOtWlx5Ztre0t51cXwqIo0k5cvUKgFiX5mvEHpmq12ilkmJR+LstHq444ES+D0/&#xA;QLC80/RbKxvbgXdzbQrFJcBePPgKA0JPbv3zY4omMQCbIcHJISkSNkfljB2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuAArQddzirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVU7i6traF5riVIYY1Z3kkYKqqoqxJPYAVOKsbj/ADQ/L+SBZ0121MDllSXkeLFGKtxN&#xA;KHcdRh4Sx4wuh/Mz8vprlLaLzDYPcyV4widOewJPw1qNhXGivEEd/jLyp/1drX/kav8AXHhK8Y70&#xA;TpWvaPq3r/o66S5+rsFm4V+EmtOoFQaGhG2JFJEgeSPwJdirsVdirsVdiqQ2fnbQ7q8v7Us9udN5&#xA;fW5ZwqRrxf0z8XI/tdK4eFgJhM4NX0qe1F3DdwvaklRMHXhUdRyrTGmQIV4Lq2nBMEqShftcGDUr&#xA;40wJtUxV2KuxV2KuxV2KuxV2KuxV1RWld+tO9MVdirsVdirsVdirsVdirsVeG/8AOR/n7Rv0JeeS&#xA;4LaWfWbkwBb392lvbFpFkZGldgQ7xClKUo3XtgjkjxcN+ruRkgeG6273jFlcWlvodnYT3dxZtbM4&#xA;aS0urQAiSQleZ9Rux8MyHEZL+TP5Z2/nbzJqGsXF3qdrptoimzveMYlndw0bj1ZEkiPChBop+jIS&#xA;lTZCF830JD+VnliO0S3PrSMkYjNw/peoxC05sRGF5Hr065HjLZ4QZDpehaRpXq/o61S29bj6vCvx&#xA;ca8a18ORwEsxEDkj8CXYqxy4/MHyymoX2lwXDXOraejST2KRyB6IQCFd1WNj8Q6Nh4WJmEph/NvR&#xA;ZHWP9H35kcgRokcbFixoABzHU9MlwMPGCf6hZR+afLL20qXGnpeBSUnjCTJ6coYckJNK8PHpkRsW&#xA;ZHEHgP5iaL5F8rXlroya/fT6hHdQ/pK0ib054YmiLqY5PTMaV5qd67dssBJaZRAUtQ8seVNKs7jU&#xA;Li81tIoxymeLWrGRzU0+zHAztufDFG34LGptY8rzXMdyqah9Yj9CSVz6LRAy0ZQASjgfF798kxrZ&#xA;m3k7859A8qpeQtbS3bXBRj8SRcOAIp+315ZGUbZQlwsiP/OTugiv+4mXbr++X/mjBwM/F8nf9DPa&#xA;DSv6JlA95l/5ox4F8XyZRp356/l/cWUU13dT2Vw4Je1a1upim5p+8hidGqN9jkeEsxkDeo/nv+XN&#xA;np895Hd3N4YApNvDZ3CSMGcJsbhII9uXdx9+PCV4wx7/AKGl/L//AKt+rf8AIm2/7KMPAUeKHf8A&#xA;Q0v5f/8AVv1b/kTbf9lGPAV8UPTvK3mOw8y6BZ65YLIlpeoXiSYBZAFYoQwUuK1XsciRTMG00wJd&#xA;ir5T8+a/5oTz3r6xapdQQ2VzLBAzTS1EdefAcXFEFRQZjanXDFIRriJbcGjOUGV0AgfL2rfm/wCY&#xA;LO2i0i6u7i1vLuS1h/0xlrPDEJ3B5SAgCM8qnb6czzTgjiLKE/LP/nIG5R0a7W3FKH6zqMrKwOxA&#xA;ETSfjkeIMuCT3nybpup6Z5V0vT9UkEuo21ukd3IrF1MgHxcWahKjtXtkC3AbJzgS7FXYq7FUj87e&#xA;Z4vLPlq81dlEksKhLaE9HnkISNTTenI1an7NTkMuQQiZHozhAykIjq8M/LLyZY+evMOozeZUOo2V&#xA;uguLxWd4zLczuTGWMZQ8fgdiBt07ZqezQZzlllzdjryIQGMcnqVl+W72drLpsC20VncadDpNzdJs&#xA;0kNty9GY2/p8RcIrsPU9WlaNx2C5urdTws9wMnYq7FXYq7FXyz+YtpfzedvNr2iTkRCd5JIFmPEI&#xA;gf4jCrkD4f2qL/MQN8uHJx5cykvkDyvd+ZPNOkWWn6lMrC3+t3zXSzPCJ4ZWJgIUwkq0YStG7nfw&#xA;SaRGNllf5oeVtS0PWhJLrAM2pqGXSbFJoreKNBw5UkmlPxt0A9812r14w0ALJdhptCctkmggm/Jj&#xA;WZdBe8/Rl3JrIaos2iCp6S1qS7lau1QFVa9CSd9svDllKIMhwnucXNhEZERPEFHyD+UPmO8832Fv&#xA;5n8syW2guZfrcpBTiFhdo6urd5Ao6ZaZNUYG93tVn+RP5W2svqroqyOCrKZJp2AKmoovOn4ZDiLb&#xA;4YTGT8pfy4kbk+g2xNKftjb6Gx4ingCz/lUH5a/9WC38P2/+aseIrwBg/nP/AJx/Go6oJfL62Gn6&#xA;aEhQWriVWDVf1pOaBi23DipP0r3Imwlj7k70byN+a2h6Vb6XpfmjTo7K0BFvC+nkniTXizmQk9Sa&#xA;0rXASGQiQz63097nRYLLXFgv5jDGt+GjVoZZVALNwYUpzFRtgZIb/Bnk7/qxad/0iQf80Y2VoO/w&#xA;Z5O/6sWnf9IkH/NGNlaCZ2tpa2lultaQpb28YpHDEoRFFa0VVAAwJVcVQOvatHo+h6hq0iNJHp9t&#xA;LcvGvVhChcgfPjipfJtnaX/mbX7WzuXL32vXqrdyDt9Yk5zsPZE5U9hmhwHx9VxdBv8ALk7fMPB0&#xA;/D1O3z5vqXQvI/lDQHWXR9ItbKZU9MTxxr6vGgBBkNXNaDlvv3zfkunEQE7wJdirsVdirsVdiqR+&#xA;c/Klp5p0KXSrmV7cM6SxTxgEo6GoNDsQRUEeGV5cQyRMTyLPHkMJCQ5hC+QvIll5P0ya1gne7uLm&#xA;QS3Ny6hORChVVUBPFR4VO5O+RwYI4o8MU5csskuIsmy5rdirsVdirsVdiq0RxgMAoAapYUG5PWuK&#xA;ujijjXjGiovWigAfhirBtY/LFtV8+weZrnUA1rA0LpYGI1HoAUUOHGxccunemYGTRceYZCdu5zIa&#xA;vhxcAG/ezvM9w3Yq7FXYq7FXYq7FXYq7FXYq7FXYqtlijljeKVBJHICrowBVlIoQQeoOKpFZeQfJ&#xA;tjq8er2Wk29rqEPP0poVMYX1AVYhFISpBpXjkREDkEkk80/ySHYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:27e665ce-1387-cc43-aa57-9eabd7436d69</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:27e665ce-1387-cc43-aa57-9eabd7436d69</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a5a2bd97-13e7-41bb-9eee-c916907313a8</stRef:instanceID>
            <stRef:documentID>xmp.did:cfc936b4-ef08-3047-bf7d-b3f49ae45f34</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a613b13b-ad44-5047-9dbf-0017b945326e</stEvt:instanceID>
                  <stEvt:when>2016-03-03T19:26:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:baa8e3d8-32e8-264e-85e2-479b96a27290</stEvt:instanceID>
                  <stEvt:when>2016-03-06T20:07:54+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ce46f36d-f392-8f4f-b963-3b49e15db26a</stEvt:instanceID>
                  <stEvt:when>2016-05-05T19:09:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e8f4e6ec-c085-cd44-8c60-aa4a5070d376</stEvt:instanceID>
                  <stEvt:when>2016-05-05T19:17:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e833b2f7-6e68-d940-9cfc-7b7fb2f29f6a</stEvt:instanceID>
                  <stEvt:when>2016-05-25T15:14:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fe8c5873-d99f-b24f-8711-1324b234b20c</stEvt:instanceID>
                  <stEvt:when>2016-05-25T16:15:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:27e665ce-1387-cc43-aa57-9eabd7436d69</stEvt:instanceID>
                  <stEvt:when>2016-05-25T21:46:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>525.000000</stDim:w>
            <stDim:h>350.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -350 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 350 li
525 350 li
525 0 li
cp
clp
525 350 mo
0 350 li
0 0 li
525 0 li
525 350 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
480.734 32.1467 mo
442.953 33.6754 li
442.953 25.1261 li
480.948 31.558 li
480.734 32.1467 li
cp
.816129 .572106 .530816 .573571 cmyk
f
402.881 36.8416 mo
416.008 36.8416 li
429.77 34.6667 li
451.797 33.3216 li
444.782 24.3602 li
402.881 24.3602 li
397.064 30.9634 li
402.881 36.8416 li
cp
f
415.478 28.31 mo
401.253 26.8359 li
401.29 17.252 li
415.478 17.252 li
415.478 28.31 li
cp
f
397.082 24.6945 mo
395.757 24.6945 li
395.757 34.9273 li
397.082 34.9273 li
397.082 24.6945 li
cp
.804746 .568353 .507561 .522942 cmyk
f
415.456 19.264 mo
415.456 18.4003 416.511 17.7002 417.811 17.7002 cv
436.153 17.7002 li
437.453 17.7002 439.231 18.467 440.124 19.4129 cv
445.537 24.7682 li
450.537 25.1432 li
441.676 17.497 li
440.668 16.6744 438.797 16.0076 437.497 16.0076 cv
413.764 16.0076 li
410.562 16.7803 li
401.29 16.7803 li
401.29 20.8278 li
415.456 20.8278 li
415.456 20.8278 415.456 20.1277 415.456 19.264 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
417.115 40.2496 mo
417.306 43.3964 418.176 50.474 420.629 56.8162 cv
425.629 55.3295 430.225 53.5275 430.225 53.5275 cv
430.225 53.5275 426.908 44.4513 426.882 37.9206 cv
417.115 40.2496 li
cp
.284794 .620722 .992004 .253178 cmyk
f
427.562 38.4897 mo
429.181 35.9876 li
429.181 33.044 li
416.965 33.044 li
416.315 33.044 415.787 33.5711 415.787 34.2215 cv
415.787 34.4399 li
415.195 34.4399 li
414.545 34.4399 414.018 34.967 414.018 35.6173 cv
414.018 40.9892 li
413.823 41.3421 li
408.407 41.3421 li
406.394 40.0485 li
408.406 36.0752 li
403.35 34.9698 li
400.517 35.2517 li
400.796 36.8865 li
400.905 37.5275 400.716 38.4954 400.373 39.0483 cv
395.838 46.3722 li
395.496 46.9251 395.666 47.6518 396.218 47.9954 cv
400.061 50.3871 li
402.431 51.7362 401.653 49.7927 401.937 49.208 cv
406.135 40.5816 li
408.234 41.9307 li
413.997 41.9307 li
414.435 41.1879 li
414.891 41.1879 li
414.891 43.1515 li
415.597 43.1515 li
416.066 41.1879 li
416.247 41.1879 li
427.562 38.4897 li
cp
.849027 .6177 .563592 .674403 cmyk
f
409.676 40.2597 mo
410.593 40.2597 li
409.975 39.8162 409.562 39.107 409.562 38.2884 cv
409.562 37.6854 409.787 37.1404 410.15 36.7169 cv
408.83 36.7169 li
408.551 37.1139 408.385 37.595 408.385 38.1167 cv
408.385 39.0474 408.911 39.8469 409.676 40.2597 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
480.157 30.9589 mo
482.811 30.9589 li
482.811 28.9474 li
479.284 28.9474 li
480.157 30.9589 li
cp
.804746 .568353 .507561 .522942 cmyk
f
392.376 31.1768 mo
392.376 32.1562 391.582 32.9501 390.602 32.9501 cv
386.75 32.9501 li
385.771 32.9501 384.977 32.1562 384.977 31.1768 cv
384.977 30.1974 385.771 29.4035 386.75 29.4035 cv
390.602 29.4035 li
391.582 29.4035 392.376 30.1974 392.376 31.1768 cv
cp
381.861 33.4377 mo
371.526 33.4377 368.838 36.4695 365.197 36.4695 cv
364.153 36.4695 363.946 36.5384 363.946 32.7486 cv
363.946 28.9588 363.602 27.7185 365.944 27.7185 cv
368.287 27.7185 382.757 27.6797 382.757 27.6797 cv
384.273 27.6797 383.984 33.4377 381.861 33.4377 cv
cp
360.087 26.9606 mo
360.087 26.9606 360.66 34.8158 360.66 37.572 cv
360.66 40.3282 360.188 47.1499 361.29 47.1499 cv
362.392 47.1499 366.458 47.1499 366.458 47.1499 cv
366.458 47.1499 366.564 37.0897 376.28 35.7805 cv
385.996 34.4713 391.868 34.9273 395.934 34.9273 cv
395.934 30.5173 395.934 23.4471 395.934 23.4471 cv
395.934 23.4471 391.508 26.8227 387.581 26.8227 cv
383.653 26.8227 360.087 26.9606 360.087 26.9606 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
397.082 23.4471 mo
395.757 23.4471 li
395.757 27.7286 li
397.082 27.7286 li
397.082 23.4471 li
cp
.816129 .572106 .530816 .573571 cmyk
f
397.082 30.6457 mo
395.757 30.6457 li
395.757 34.9273 li
397.082 34.9273 li
397.082 30.6457 li
cp
f
397.082 28.2462 mo
395.757 28.2462 li
395.757 30.1752 li
397.082 30.1752 li
397.082 28.2462 li
cp
f
409.224 36.8453 mo
409.224 32.7535 li
409.224 32.1096 408.702 31.5875 408.058 31.5875 cv
402.724 31.5875 li
402.08 31.5875 401.131 32.1096 400.605 32.7535 cv
399.364 34.2723 li
401.937 36.8453 li
409.224 36.8453 li
cp
.804746 .568353 .507561 .522942 cmyk
f
412.881 23.146 mo
412.474 23.146 412.145 22.8165 412.145 22.4101 cv
412.145 22.0036 412.474 21.6741 412.881 21.6741 cv
413.287 21.6741 413.616 22.0036 413.616 22.4101 cv
413.616 22.8165 413.287 23.146 412.881 23.146 cv
cp
403.35 23.146 mo
402.944 23.146 402.615 22.8165 402.615 22.4101 cv
402.615 22.0036 402.944 21.6741 403.35 21.6741 cv
403.757 21.6741 404.086 22.0036 404.086 22.4101 cv
404.086 22.8165 403.757 23.146 403.35 23.146 cv
cp
415.272 21.0854 mo
401.253 21.0854 li
401.253 23.6979 li
415.272 23.6979 li
415.272 21.0854 li
cp
.684352 .464546 .433845 .323278 cmyk
f
444.782 24.3602 mo
444.782 25.9056 li
434.406 25.9056 li
430.483 31.558 li
480.948 31.558 li
477.825 24.3602 li
444.782 24.3602 li
cp
f
400.667 32.2121 mo
401.261 31.4865 402.281 30.9397 403.042 30.9397 cv
407.874 30.9397 li
408.781 30.9397 409.518 31.6774 409.518 32.5846 cv
409.518 36.8416 li
413.429 36.8416 li
413.429 35.6174 li
413.429 34.6435 414.221 33.8512 415.195 33.8512 cv
415.238 33.8512 li
415.408 33.0543 416.118 32.4553 416.965 32.4553 cv
429.163 32.4553 li
429.756 31.5722 li
434.098 25.3169 li
440.44 25.3169 li
440.44 24.2376 li
415.861 24.2376 li
415.861 24.2866 li
400.664 24.2866 li
400.664 23.4035 li
397.032 23.4035 li
397.082 34.9273 li
399.206 33.9995 li
400.667 32.2121 li
cp
f
412.525 26.9359 mo
415.076 26.9359 li
415.076 28.1134 li
427.096 28.1134 li
427.096 30.1739 li
415.076 30.1739 li
415.076 31.2532 li
412.525 31.2532 li
412.525 26.9359 li
cp
.816129 .572106 .530816 .573571 cmyk
f
429.77 32.6074 mo
429.77 34.6667 li
480.734 34.6667 li
480.734 32.1467 li
430.079 32.1467 li
429.77 32.6074 li
cp
.804746 .568353 .507561 .522942 cmyk
f
489.791 29.5482 mo
494.246 29.5482 li
494.246 28.4315 li
482.671 28.4315 li
482.671 31.4748 li
494.246 31.4748 li
494.246 30.4059 li
489.791 30.4059 li
489.554 30.4059 489.362 30.2139 489.362 29.9771 cv
489.362 29.7402 489.554 29.5482 489.791 29.5482 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
475.115 35.5809 mo
477.836 35.5809 li
477.836 35.9741 li
479.76 39.8435 li
480.645 39.8435 li
480.645 35.5809 li
480.645 34.1983 li
475.115 34.1983 li
475.115 35.5809 li
cp
.816129 .572106 .530816 .573571 cmyk
f
401.062 21.8399 mo
401.49 21.8399 li
401.49 17.2231 li
401.062 17.2231 li
400.412 17.2231 399.885 17.7502 399.885 18.4006 cv
399.885 20.6625 li
399.885 21.3127 400.412 21.8399 401.062 21.8399 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
456.862 297.43 mo
456.862 300.846 li
446.529 300.846 li
446.529 297.43 li
433.029 297.43 li
430.089 303.586 li
467.777 303.586 li
477.605 301.667 li
477.874 301.077 li
477.874 297.43 li
456.862 297.43 li
cp
.804746 .568353 .507561 .522942 cmyk
f
450.453 313.189 mo
448.909 312.742 447.775 311.337 447.775 309.648 cv
447.775 307.959 448.909 306.553 450.453 306.106 cv
450.453 305.933 li
446.519 305.933 li
444.467 305.933 442.804 307.596 442.804 309.648 cv
442.804 311.699 444.467 313.363 446.519 313.363 cv
450.453 313.363 li
450.453 313.189 li
cp
.849027 .6177 .563592 .674403 cmyk
f
446.947 298.379 mo
446.947 299.775 448.083 300.911 449.48 300.911 cv
453.193 300.911 li
454.589 300.911 455.725 299.775 455.725 298.379 cv
455.725 297.434 li
446.947 297.434 li
446.947 298.379 li
cp
.564294 .313085 .345434 .116823 cmyk
f
470.892 301.077 mo
470.532 301.077 469.426 301.441 468.442 302.034 cv
467.612 302.997 li
467.619 303.412 li
467.619 305.842 li
477.874 305.76 li
477.874 301.077 li
470.892 301.077 li
cp
.849027 .6177 .563592 .674403 cmyk
f
436.278 329.932 mo
435.435 329.913 li
435.58 329.091 li
427.966 328.277 li
427.722 329.001 427.639 329.773 428.288 329.966 cv
429.586 330.353 435.965 331.43 437.374 331.513 cv
438.736 331.593 440.166 330.561 438.762 328.845 cv
438.042 329.79 437.047 329.932 436.278 329.932 cv
cp
f
429.24 299.798 mo
428.942 299.798 428.701 299.556 428.701 299.258 cv
428.701 298.96 428.942 298.719 429.24 298.719 cv
429.538 298.719 429.78 298.96 429.78 299.258 cv
429.78 299.556 429.538 299.798 429.24 299.798 cv
cp
476.871 296.875 mo
476.984 296.551 476.918 296.178 476.66 295.919 cv
476.299 295.559 475.714 295.559 475.353 295.919 cv
474.398 296.875 li
470.208 296.875 462.766 296.875 455.046 296.875 cv
455.046 297.858 li
455.046 299.177 453.976 300.247 452.656 300.247 cv
450.016 300.247 li
448.697 300.247 447.627 299.177 447.627 297.858 cv
447.627 296.875 li
443.347 296.875 439.302 296.875 436.025 296.875 cv
435.936 296.474 435.659 296.164 435.299 296.058 cv
435.299 295.143 li
434.747 295.143 li
434.747 296.065 li
434.405 296.181 434.144 296.488 434.059 296.875 cv
433.637 296.875 433.223 296.875 432.84 296.875 cv
432.294 296.875 431.816 297.58 431.421 298.506 cv
430.461 298.833 430.127 297.934 429.412 297.934 cv
428.653 297.934 428.038 298.549 428.038 299.307 cv
428.038 300.066 428.653 300.681 429.412 300.681 cv
429.608 300.681 430.565 300.534 430.325 302.306 cv
430.325 302.307 430.325 302.307 430.325 302.309 cv
430.241 302.725 430.194 302.997 430.194 302.997 cv
434.656 302.997 li
434.656 297.99 li
434.656 297.89 434.737 297.809 434.838 297.809 cv
434.938 297.809 435.019 297.89 435.019 297.99 cv
435.019 302.997 li
435.331 302.997 li
435.331 297.99 li
435.331 297.89 435.412 297.809 435.512 297.809 cv
435.612 297.809 435.694 297.89 435.694 297.99 cv
435.694 302.997 li
436.005 302.997 li
436.005 297.99 li
436.005 297.89 436.086 297.809 436.187 297.809 cv
436.287 297.809 436.368 297.89 436.368 297.99 cv
436.368 302.997 li
436.68 302.997 li
436.68 297.99 li
436.68 297.89 436.761 297.809 436.861 297.809 cv
436.961 297.809 437.043 297.89 437.043 297.99 cv
437.043 302.997 li
437.354 302.997 li
437.354 297.99 li
437.354 297.89 437.435 297.809 437.535 297.809 cv
437.636 297.809 437.717 297.89 437.717 297.99 cv
437.717 302.997 li
438.028 302.997 li
438.028 297.99 li
438.028 297.89 438.11 297.809 438.21 297.809 cv
438.31 297.809 438.392 297.89 438.392 297.99 cv
438.392 302.997 li
438.703 302.997 li
438.703 297.99 li
438.703 297.89 438.784 297.809 438.884 297.809 cv
438.985 297.809 439.066 297.89 439.066 297.99 cv
439.066 302.997 li
439.377 302.997 li
439.377 297.99 li
439.377 297.89 439.459 297.809 439.559 297.809 cv
439.659 297.809 439.741 297.89 439.741 297.99 cv
439.741 302.997 li
440.052 302.997 li
440.052 297.99 li
440.052 297.89 440.133 297.809 440.233 297.809 cv
440.334 297.809 440.415 297.89 440.415 297.99 cv
440.415 302.997 li
440.726 302.997 li
440.726 297.99 li
440.726 297.89 440.808 297.809 440.908 297.809 cv
441.008 297.809 441.089 297.89 441.089 297.99 cv
441.089 302.997 li
441.401 302.997 li
441.401 297.99 li
441.401 297.89 441.482 297.809 441.582 297.809 cv
441.683 297.809 441.764 297.89 441.764 297.99 cv
441.764 302.997 li
442.075 302.997 li
442.075 297.99 li
442.075 297.89 442.157 297.809 442.257 297.809 cv
442.357 297.809 442.438 297.89 442.438 297.99 cv
442.438 302.997 li
442.75 302.997 li
442.75 297.99 li
442.75 297.89 442.831 297.809 442.931 297.809 cv
443.032 297.809 443.113 297.89 443.113 297.99 cv
443.113 302.997 li
467.612 302.997 li
469.308 301.973 li
470.128 301.479 471.194 301.077 471.688 301.077 cv
477.874 301.077 li
477.874 296.875 li
477.874 296.875 477.51 296.875 476.871 296.875 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
450.664 313.032 mo
448.723 313.032 li
446.854 313.032 445.339 311.517 445.339 309.648 cv
445.339 307.779 446.854 306.264 448.723 306.264 cv
450.664 306.264 li
452.533 306.264 454.048 307.779 454.048 309.648 cv
454.048 311.517 452.533 313.032 450.664 313.032 cv
cp
448.039 302.997 mo
440.733 302.997 li
430.194 302.997 li
429.391 307.418 li
429.391 307.418 429.743 307.993 430.177 308.703 cv
430.612 309.413 430.528 310.949 429.991 312.133 cv
424.459 324.311 li
424.774 328.718 li
424.774 328.718 424.901 328.737 425.103 328.768 cv
436.133 330.283 li
437.371 330.313 438.347 329.981 438.834 328.298 cv
439.256 326.84 441.391 319.766 442.507 316.073 cv
442.883 314.828 444.243 313.819 445.543 313.819 cv
450.166 313.819 li
453.314 313.819 454.416 312.035 454.416 310.409 cv
454.416 309.039 li
454.416 307.738 455.47 306.684 456.77 306.684 cv
467.643 306.684 li
467.643 302.987 li
448.039 302.997 li
cp
.804746 .568353 .507561 .522942 cmyk
f
434.952 304.952 mo
434.952 304.952 438.677 302.382 442.874 305.215 cv
440.513 313.556 435.686 329.453 435.686 329.453 cv
425.875 328.404 li
434.952 304.952 li
cp
.284794 .620722 .992004 .253178 cmyk
f
416.041 237.928 mo
393.982 237.928 li
393.982 233.547 li
416.041 233.547 li
416.041 237.928 li
cp
.849027 .6177 .563592 .674403 cmyk
f
470.054 243.777 mo
471.553 243.777 li
471.553 241.929 li
470.054 241.965 li
470.054 243.777 li
cp
.804746 .568353 .507561 .522942 cmyk
f
510.329 236.412 mo
507.75 236.412 li
507.75 235.759 li
508.872 232.94 li
510.329 232.94 li
510.329 236.412 li
cp
511.146 237.557 mo
511.146 229.943 li
509.184 229.943 li
506.933 235.602 li
506.933 237.557 li
477.467 237.557 li
477.902 238.058 478.172 238.67 478.201 239.299 cv
478.213 239.545 478.178 239.781 478.122 240.009 cv
505.359 240.009 li
505.359 240.856 li
506.374 240.856 li
506.374 240.009 li
506.933 240.009 li
506.933 240.78 li
511.146 240.78 li
511.146 240.009 li
515.845 240.009 li
515.845 237.557 li
511.146 237.557 li
cp
.849027 .6177 .563592 .674403 cmyk
f
414.155 243.278 mo
414.155 245.839 li
419.529 258.314 li
430.018 253.796 li
425.487 243.278 li
414.155 243.278 li
cp
.284794 .620722 .992004 .253178 cmyk
f
396.839 248.372 mo
397.24 247.971 li
396.532 247.241 396.093 246.261 396.049 245.174 cv
394.134 245.174 li
394.413 246.654 395.456 247.852 396.839 248.372 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
401.867 247.383 mo
401.867 248.335 401.092 249.11 400.14 249.11 cv
394.996 249.11 li
394.043 249.11 393.268 248.335 393.268 247.383 cv
393.268 245.163 li
392.451 245.163 li
392.451 247.383 li
392.451 248.788 393.59 249.928 394.996 249.928 cv
400.139 249.928 li
401.544 249.928 402.684 248.788 402.684 247.383 cv
402.684 245.163 li
401.867 245.163 li
401.867 247.383 li
cp
f
378.521 241.539 mo
374.746 239.921 376.633 238.033 372.05 237.764 cv
367.466 237.494 357.85 236.865 353.895 237.584 cv
349.941 238.303 342.122 239.471 342.122 239.471 cv
342.122 239.471 342.212 247.29 345.088 259.963 cv
352.727 259.963 371.151 249.897 373.218 250.256 cv
375.285 250.616 378.611 256.458 382.385 255.02 cv
383.789 249.316 386.911 245.422 391.323 245.241 cv
391.323 237.249 li
384.195 237.509 382.208 243.119 378.521 241.539 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
342.38 239.426 mo
340.18 239.768 338.488 240.021 338.488 240.021 cv
338.488 240.021 338.578 247.84 341.454 260.512 cv
342.556 260.512 343.888 260.297 345.357 259.94 cv
345.355 259.929 li
342.628 247.911 342.396 240.154 342.38 239.426 cv
cp
.313878 .658839 1 .346471 cmyk
f
441.628 231.2 mo
429.569 231.2 li
429.569 232.008 li
441.628 232.008 li
441.628 231.2 li
cp
.849027 .6177 .563592 .674403 cmyk
f
478.269 236.985 mo
479.303 237.98 479.465 239.573 478.63 240.542 cv
477.795 241.512 475.998 242.327 474.616 242.363 cv
433.634 243.43 li
433.634 234.371 li
475.554 234.371 li
478.269 236.985 li
cp
.284794 .620722 .992004 .253178 cmyk
f
473.665 238.408 mo
473.665 237.919 473.268 237.523 472.779 237.523 cv
438.174 237.523 li
437.685 237.523 437.289 237.919 437.289 238.408 cv
437.289 238.897 437.685 239.294 438.174 239.294 cv
472.779 239.294 li
473.268 239.294 473.665 238.897 473.665 238.408 cv
cp
.313878 .658839 1 .346471 cmyk
f
475.606 234.449 mo
433.712 234.449 li
433.712 243.505 li
414.4 243.505 li
414.4 248.512 li
411.437 248.512 li
411.437 245.344 li
391.206 245.344 li
391.206 237.068 li
391.206 237.068 392.202 237.068 392.534 237.068 cv
393.097 237.068 393.445 236.804 393.657 236.421 cv
414.673 236.421 li
414.823 236.421 414.945 236.299 414.945 236.148 cv
414.945 235.998 414.823 235.876 414.673 235.876 cv
393.859 235.876 li
393.971 235.394 393.969 234.848 393.927 234.377 cv
414.673 234.377 li
414.823 234.377 414.945 234.255 414.945 234.105 cv
414.945 233.954 414.823 233.832 414.673 233.832 cv
393.249 233.832 li
393.249 231.857 li
400.559 231.857 li
400.913 230.835 li
405.102 230.835 li
403.935 233.287 li
408.845 233.287 li
407.759 230.835 li
410.288 230.835 li
411.374 233.287 li
412.911 233.287 li
411.744 230.835 li
417.262 230.835 li
418.429 233.287 li
426.098 233.287 li
430.08 232.878 li
430.08 231.949 li
442.196 231.949 li
443.849 232.84 li
475.606 232.84 li
475.606 234.449 li
cp
.804746 .568353 .507561 .522942 cmyk
f
431.226 236.932 mo
431.226 236.612 430.967 236.353 430.647 236.353 cv
420.361 236.353 li
420.041 236.353 419.782 236.612 419.782 236.932 cv
419.782 237.251 420.041 237.511 420.361 237.511 cv
430.647 237.511 li
430.967 237.511 431.226 237.251 431.226 236.932 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
432.362 234.593 mo
417.195 234.593 li
416.743 234.593 416.377 234.959 416.377 235.41 cv
416.377 236.853 li
417.063 236.853 li
417.063 236.135 li
417.063 235.683 417.43 235.317 417.881 235.317 cv
432.362 235.317 li
432.362 234.593 li
cp
f
401.073 226.064 mo
389.376 226.064 li
389.376 229.572 li
401.073 229.572 li
401.073 226.064 li
cp
.804746 .568353 .507561 .522942 cmyk
f
378.291 229.572 mo
374.34 229.572 li
374.34 226.064 li
378.291 226.064 li
378.291 229.572 li
cp
f
390.354 229.677 mo
390.354 225.959 li
387.655 224.98 380.623 225.011 378.229 226.06 cv
378.229 229.577 li
380.623 230.625 387.655 230.656 390.354 229.677 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
426.818 225.587 mo
417.718 225.587 li
417.718 230.049 li
426.818 230.049 li
426.818 225.587 li
cp
.804746 .568353 .507561 .522942 cmyk
f
428.706 225.042 mo
426.458 225.042 li
426.458 230.594 li
428.706 230.594 li
428.706 225.042 li
cp
.684352 .464546 .433845 .323278 cmyk
f
410.265 224.4 mo
410.265 223.676 409.679 223.09 408.956 223.09 cv
406.446 223.09 li
405.723 223.09 405.136 223.676 405.136 224.4 cv
405.136 224.837 li
410.265 224.837 li
410.265 224.4 li
cp
f
418.079 231.037 mo
400.3 231.037 li
400.3 224.6 li
418.079 224.6 li
418.079 231.037 li
cp
f
409.391 228.676 mo
409.391 227.598 408.517 226.724 407.439 226.724 cv
406.361 226.724 405.487 227.598 405.487 228.676 cv
405.487 229.754 406.361 230.628 407.439 230.628 cv
408.517 230.628 409.391 229.754 409.391 228.676 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
407.439 229.58 mo
407.938 229.58 408.342 229.175 408.342 228.676 cv
408.342 228.177 407.938 227.772 407.439 227.772 cv
406.94 227.772 406.535 228.177 406.535 228.676 cv
406.535 229.175 406.94 229.58 407.439 229.58 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
255.771 170.185 mo
271.282 170.185 li
271.282 179.954 li
255.771 179.954 li
255.771 170.185 li
cp
.804746 .568353 .507561 .522942 cmyk
f
296.074 173.852 mo
243.97 173.852 li
243.97 162.69 li
296.074 162.69 li
296.074 173.852 li
cp
.816129 .572106 .530816 .573571 cmyk
f
247.441 174.134 mo
247.441 169.543 li
247.441 168.675 246.737 167.971 245.868 167.971 cv
221.16 167.971 li
220.292 167.971 219.012 168.675 218.302 169.543 cv
216.629 171.591 li
220.92 175.883 li
246.021 175.883 li
246.48 175.288 246.951 174.703 247.441 174.134 cv
cp
f
233.741 163.323 mo
218.575 163.323 li
218.575 157.615 li
233.741 157.615 li
233.741 163.323 li
cp
f
214.035 173.337 mo
216.275 173.337 li
216.275 161.856 li
214.035 161.856 li
214.035 173.337 li
cp
f
245.29 176.644 mo
235.523 178.973 li
235.714 182.12 236.584 189.197 239.037 195.54 cv
244.037 194.053 248.633 192.251 248.633 192.251 cv
248.633 192.251 245.316 183.175 245.29 176.644 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
296.826 173.557 mo
296.826 178.978 li
297.267 178.978 li
297.954 178.978 298.512 178.421 298.512 177.733 cv
298.512 173.557 li
296.826 173.557 li
cp
.804746 .568353 .507561 .522942 cmyk
f
287.279 163.282 mo
285.35 163.073 li
285.35 161.681 li
287.279 160.22 li
287.279 163.282 li
cp
f
300.327 167.4 mo
297.618 167.4 li
298.491 169.412 li
300.327 169.412 li
300.327 167.4 li
cp
f
233.817 181.416 mo
233.112 181.416 li
233.112 178.715 li
234.462 178.715 li
233.817 181.416 li
cp
.816129 .572106 .530816 .573571 cmyk
f
209.935 171.729 mo
206.083 171.729 li
205.104 171.729 204.31 170.935 204.31 169.956 cv
204.31 168.976 205.104 168.182 206.083 168.182 cv
209.935 168.182 li
210.914 168.182 211.708 168.976 211.708 169.956 cv
211.708 170.935 210.914 171.729 209.935 171.729 cv
cp
201.194 172.216 mo
190.858 172.216 188.171 175.248 184.53 175.248 cv
183.485 175.248 183.279 175.317 183.279 171.527 cv
183.279 167.738 182.934 166.497 185.277 166.497 cv
187.62 166.497 202.09 166.458 202.09 166.458 cv
203.606 166.458 203.317 172.216 201.194 172.216 cv
cp
206.913 165.602 mo
202.986 165.602 179.42 165.739 179.42 165.739 cv
179.42 165.739 179.42 173.594 179.42 176.351 cv
179.42 179.107 177.422 185.929 178.524 185.929 cv
179.627 185.929 183.692 185.929 183.692 185.929 cv
183.692 185.929 185.897 175.868 195.613 174.559 cv
205.328 173.25 210.221 173.319 214.286 173.319 cv
214.286 168.909 214.286 163.259 214.286 163.259 cv
214.286 163.259 210.841 165.602 206.913 165.602 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
215.844 166.138 mo
214.52 166.138 li
214.52 161.856 li
215.844 161.856 li
215.844 166.138 li
cp
f
215.844 173.337 mo
214.52 173.337 li
214.52 169.055 li
215.844 169.055 li
215.844 173.337 li
cp
f
215.844 168.584 mo
214.52 168.584 li
214.52 166.655 li
215.844 166.655 li
215.844 168.584 li
cp
f
226.157 169.981 mo
221.325 169.981 li
220.742 169.981 219.883 170.454 219.406 171.037 cv
218.282 172.413 li
221.164 175.294 li
227.213 175.294 li
227.213 171.037 li
227.213 170.454 226.74 169.981 226.157 169.981 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
219.536 159.538 mo
219.536 162.151 li
233.555 162.151 li
233.555 159.538 li
219.536 159.538 li
cp
.684352 .464546 .433845 .323278 cmyk
f
221.633 161.599 mo
221.227 161.599 220.898 161.269 220.898 160.863 cv
220.898 160.456 221.227 160.127 221.633 160.127 cv
222.04 160.127 222.369 160.456 222.369 160.863 cv
222.369 161.269 222.04 161.599 221.633 161.599 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
231.164 161.599 mo
230.757 161.599 230.428 161.269 230.428 160.863 cv
230.428 160.456 230.757 160.127 231.164 160.127 cv
231.57 160.127 231.899 160.456 231.899 160.863 cv
231.899 161.269 231.57 161.599 231.164 161.599 cv
cp
f
299.231 170.011 mo
296.108 162.813 li
263.065 162.813 li
263.065 164.358 li
252.689 164.358 li
248.766 170.011 li
299.231 170.011 li
cp
.564294 .313085 .345434 .116823 cmyk
f
274.349 167.057 mo
272.24 167.057 li
271.901 167.057 271.626 166.782 271.626 166.443 cv
271.626 166.105 271.901 165.83 272.24 165.83 cv
274.349 165.83 li
274.688 165.83 274.963 166.105 274.963 166.443 cv
274.963 166.782 274.688 167.057 274.349 167.057 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
278.716 167.057 mo
276.606 167.057 li
276.267 167.057 275.993 166.782 275.993 166.443 cv
275.993 166.105 276.267 165.83 276.606 165.83 cv
278.716 165.83 li
279.054 165.83 279.329 166.105 279.329 166.443 cv
279.329 166.782 279.054 167.057 278.716 167.057 cv
cp
f
283.082 167.057 mo
280.973 167.057 li
280.634 167.057 280.359 166.782 280.359 166.443 cv
280.359 166.105 280.634 165.83 280.973 165.83 cv
283.082 165.83 li
283.421 165.83 283.695 166.105 283.695 166.443 cv
283.695 166.782 283.421 167.057 283.082 167.057 cv
cp
f
287.449 167.057 mo
285.339 167.057 li
285 167.057 284.726 166.782 284.726 166.443 cv
284.726 166.105 285 165.83 285.339 165.83 cv
287.449 165.83 li
287.787 165.83 288.062 166.105 288.062 166.443 cv
288.062 166.782 287.787 167.057 287.449 167.057 cv
cp
f
291.815 167.057 mo
289.705 167.057 li
289.367 167.057 289.092 166.782 289.092 166.443 cv
289.092 166.105 289.367 165.83 289.705 165.83 cv
291.815 165.83 li
292.154 165.83 292.428 166.105 292.428 166.443 cv
292.428 166.782 292.154 167.057 291.815 167.057 cv
cp
f
296.132 165.83 mo
296.471 165.83 296.746 166.105 296.746 166.443 cv
296.746 166.782 296.471 167.057 296.132 167.057 cv
294.023 167.057 li
293.684 167.057 293.409 166.782 293.409 166.443 cv
293.409 166.105 293.684 165.83 294.023 165.83 cv
296.132 165.83 li
cp
f
291.57 163.819 mo
293.679 163.819 li
294.018 163.819 294.293 164.093 294.293 164.432 cv
294.293 164.771 294.018 165.045 293.679 165.045 cv
291.57 165.045 li
291.231 165.045 290.956 164.771 290.956 164.432 cv
290.956 164.093 291.231 163.819 291.57 163.819 cv
cp
f
287.203 163.819 mo
289.313 163.819 li
289.652 163.819 289.926 164.093 289.926 164.432 cv
289.926 164.771 289.652 165.045 289.313 165.045 cv
287.203 165.045 li
286.865 165.045 286.59 164.771 286.59 164.432 cv
286.59 164.093 286.865 163.819 287.203 163.819 cv
cp
f
282.837 163.819 mo
284.946 163.819 li
285.285 163.819 285.56 164.093 285.56 164.432 cv
285.56 164.771 285.285 165.045 284.946 165.045 cv
282.837 165.045 li
282.498 165.045 282.224 164.771 282.224 164.432 cv
282.224 164.093 282.498 163.819 282.837 163.819 cv
cp
f
278.47 163.819 mo
280.58 163.819 li
280.919 163.819 281.193 164.093 281.193 164.432 cv
281.193 164.771 280.919 165.045 280.58 165.045 cv
278.47 165.045 li
278.132 165.045 277.857 164.771 277.857 164.432 cv
277.857 164.093 278.132 163.819 278.47 163.819 cv
cp
f
274.104 163.819 mo
276.214 163.819 li
276.552 163.819 276.827 164.093 276.827 164.432 cv
276.827 164.771 276.552 165.045 276.214 165.045 cv
274.104 165.045 li
273.765 165.045 273.491 164.771 273.491 164.432 cv
273.491 164.093 273.765 163.819 274.104 163.819 cv
cp
f
269.738 163.819 mo
271.847 163.819 li
272.186 163.819 272.461 164.093 272.461 164.432 cv
272.461 164.771 272.186 165.045 271.847 165.045 cv
269.738 165.045 li
269.399 165.045 269.124 164.771 269.124 164.432 cv
269.124 164.093 269.399 163.819 269.738 163.819 cv
cp
f
267.873 165.83 mo
269.983 165.83 li
270.322 165.83 270.596 166.105 270.596 166.443 cv
270.596 166.782 270.322 167.057 269.983 167.057 cv
267.873 167.057 li
267.535 167.057 267.26 166.782 267.26 166.443 cv
267.26 166.105 267.535 165.83 267.873 165.83 cv
cp
f
235.248 171.497 mo
234.598 171.497 234.07 172.024 234.07 172.674 cv
234.07 172.893 li
233.478 172.893 li
232.828 172.893 232.301 173.42 232.301 174.07 cv
232.301 179.641 li
234.53 179.641 li
245.845 176.943 li
247.464 174.44 li
247.464 171.497 li
235.248 171.497 li
cp
.684352 .464546 .433845 .323278 cmyk
f
261.507 185.957 mo
265.521 186.313 li
265.522 181.192 li
261.804 181.376 li
261.507 185.957 li
cp
.816129 .572106 .530816 .573571 cmyk
f
248.347 170.614 mo
248.347 173.852 li
252.013 173.852 li
252.013 172.81 li
252.013 171.837 252.805 171.044 253.779 171.044 cv
259.077 171.044 li
259.055 171.73 li
259.047 171.757 li
259.047 178.34 li
259.047 178.664 259.311 178.928 259.636 178.928 cv
271.455 178.928 li
271.594 179.011 li
271.925 179.209 272.15 179.492 272.27 179.813 cv
296.917 179.813 li
296.917 173.852 li
299.493 173.852 li
299.493 170.614 li
248.347 170.614 li
cp
.690669 .470649 .437385 .334691 cmyk
f
290.073 175.691 mo
290.073 176.342 289.468 176.869 288.722 176.869 cv
261.694 176.869 li
260.948 176.869 260.342 176.342 260.342 175.691 cv
260.342 175.029 li
260.342 174.379 260.948 173.852 261.694 173.852 cv
288.722 173.852 li
289.468 173.852 290.073 174.379 290.073 175.029 cv
290.073 175.691 li
cp
.804746 .568353 .507561 .522942 cmyk
f
259.959 155.95 mo
258.951 155.127 257.08 154.46 255.78 154.46 cv
232.047 154.46 li
228.845 155.233 li
218.366 155.233 li
218.241 159.281 li
233.739 159.281 li
233.739 159.281 233.739 158.58 233.739 157.717 cv
233.739 156.853 234.794 156.153 236.094 156.153 cv
254.436 156.153 li
255.736 156.153 257.514 156.92 258.407 157.866 cv
263.512 163.328 li
268.637 163.328 li
259.959 155.95 li
cp
.564294 .313085 .345434 .116823 cmyk
f
305.783 169.755 mo
300.241 169.755 li
300.241 167.057 li
305.783 167.057 li
305.783 169.755 li
cp
.690669 .470649 .437385 .334691 cmyk
f
305.675 167.4 mo
305.675 169.412 li
316.241 169.412 li
316.241 167.4 li
305.675 167.4 li
cp
.804746 .568353 .507561 .522942 cmyk
f
324.29 169.755 mo
316.103 169.755 li
316.103 167.057 li
324.29 167.057 li
324.29 169.755 li
cp
.690669 .470649 .437385 .334691 cmyk
f
234.144 162.69 mo
234.144 162.739 li
218.947 162.739 li
218.947 161.856 li
216.275 161.856 li
216.275 173.337 li
217.489 172.452 li
218.95 170.665 li
219.544 169.939 220.564 169.393 221.325 169.393 cv
226.156 169.393 li
227.064 169.393 227.801 170.13 227.801 171.037 cv
227.801 175.294 li
231.712 175.294 li
231.712 174.07 li
231.712 173.096 232.504 172.304 233.478 172.304 cv
233.521 172.304 li
233.692 171.507 234.401 170.908 235.248 170.908 cv
247.446 170.908 li
248.039 170.025 li
252.381 163.77 li
258.723 163.77 li
258.723 162.69 li
234.144 162.69 li
cp
.564294 .313085 .345434 .116823 cmyk
f
245.379 168.627 mo
233.359 168.627 li
233.359 169.706 li
230.808 169.706 li
230.808 165.389 li
233.359 165.389 li
233.359 166.566 li
245.379 166.566 li
245.379 168.627 li
cp
.816129 .572106 .530816 .573571 cmyk
f
232.106 179.795 mo
226.69 179.795 li
224.304 178.261 li
224.157 178.406 223.989 178.527 223.828 178.655 cv
226.517 180.383 li
232.28 180.383 li
233.933 177.584 li
233.821 177.406 233.72 177.219 233.628 177.028 cv
232.106 179.795 li
cp
.684352 .464546 .433845 .323278 cmyk
f
226.196 176.944 mo
226.196 176.422 226.362 175.941 226.641 175.544 cv
227.961 175.544 li
227.598 175.967 227.374 176.512 227.374 177.115 cv
227.374 177.934 227.787 178.643 228.405 179.087 cv
227.488 179.087 li
226.722 178.674 226.196 177.874 226.196 176.944 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
218.615 155.233 mo
218.186 155.233 li
217.536 155.233 217.009 155.76 217.009 156.411 cv
217.009 158.673 li
217.009 159.323 217.536 159.85 218.186 159.85 cv
218.615 159.85 li
218.615 155.233 li
cp
.684352 .464546 .433845 .323278 cmyk
f
218.884 173.454 mo
219.162 175.089 li
219.271 175.73 219.082 176.698 218.74 177.251 cv
214.204 184.575 li
213.862 185.128 214.032 185.855 214.584 186.198 cv
218.428 188.59 li
220.797 189.939 220.019 187.995 220.304 187.411 cv
226.035 175.633 li
221.003 175.633 li
218.884 173.454 li
cp
.284794 .620722 .992004 .253178 cmyk
f
270.559 183.311 mo
270.139 185.816 li
270.05 186.193 269.593 186.488 269.1 186.488 cv
268.989 186.483 li
261.744 185.838 li
265.522 181.192 li
269.885 182.492 li
270.138 182.568 270.353 182.711 270.474 182.887 cv
270.57 183.025 270.599 183.172 270.559 183.311 cv
cp
271.292 179.517 mo
263.416 179.517 li
259.636 179.517 li
258.986 179.517 258.458 178.99 258.458 178.34 cv
258.458 171.684 li
258.458 171.666 258.468 171.651 258.469 171.633 cv
253.779 171.633 li
253.129 171.633 252.602 172.16 252.602 172.81 cv
252.602 178.34 li
256.476 182.445 li
253.279 193.438 li
259.675 193.438 li
261.533 186.161 li
268.957 186.835 li
269.657 186.898 270.344 186.483 270.483 185.898 cv
271.756 180.558 li
271.863 180.112 271.657 179.734 271.292 179.517 cv
cp
.690669 .470649 .437385 .334691 cmyk
f
238.268 107.06 mo
237.938 112.824 239.602 120.264 242.054 126.606 cv
247.054 125.12 251.65 123.318 251.65 123.318 cv
251.65 123.318 248.207 112.305 248.182 105.775 cv
238.268 107.06 li
cp
.284794 .620722 .992004 .253178 cmyk
f
325.686 97.8034 mo
313.186 97.8034 li
313.186 95.8613 li
325.686 95.8613 li
325.686 97.8034 li
cp
.816129 .572106 .530816 .573571 cmyk
f
330.916 98.5655 mo
324.962 98.5655 li
324.312 98.5655 324.326 98.0383 324.326 97.388 cv
324.326 96.3013 li
324.326 95.651 324.312 95.1238 324.962 95.1238 cv
330.916 95.1238 li
331.567 95.1238 332.094 95.651 332.094 96.3013 cv
332.094 97.388 li
332.094 98.0383 331.567 98.5655 330.916 98.5655 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
265.13 89.4939 mo
265.13 90.1064 264.633 90.6031 264.021 90.6031 cv
259.67 90.6031 li
258.796 89.7294 li
258.618 89.5514 258.329 89.5514 258.151 89.7294 cv
257.278 90.6031 li
253.215 90.6031 li
252.341 89.7294 li
252.163 89.5514 251.874 89.5514 251.696 89.7294 cv
250.823 90.6031 li
247.917 90.6031 li
247.305 90.6031 246.808 90.1064 246.808 89.4939 cv
246.808 86.6442 li
252.495 84.8493 li
264.021 84.8493 li
264.633 84.8493 265.13 85.3459 265.13 85.9586 cv
265.13 89.4939 li
cp
245.325 83.4801 mo
245.325 82.7508 245.916 82.1597 246.645 82.1597 cv
247.374 82.1597 247.965 82.7508 247.965 83.4801 cv
247.965 84.2092 247.374 84.8004 246.645 84.8004 cv
245.916 84.8004 245.325 84.2092 245.325 83.4801 cv
cp
263.554 83.4045 mo
248.762 82.3463 li
248.355 81.5887 247.565 81.0675 246.645 81.0675 cv
245.312 81.0675 244.232 82.1477 244.232 83.4801 cv
244.232 83.8051 244.299 84.1143 244.415 84.3973 cv
244.214 84.8436 244.102 85.3401 244.102 85.867 cv
244.102 91.6393 li
265.588 91.6393 li
266.3 87.0686 li
266.592 85.1947 265.379 83.535 263.554 83.4045 cv
cp
.690669 .470649 .437385 .334691 cmyk
f
213.361 91.3483 mo
302.93 91.3483 li
307.56 101.048 li
214.664 101.048 li
213.361 91.3483 li
cp
.816129 .572106 .530816 .573571 cmyk
f
275.868 104.756 mo
275.445 102.621 li
273.894 102.033 li
273.631 102.855 li
274.803 105.457 li
277.471 106.468 li
278.285 106.05 li
275.868 104.756 li
cp
f
213.361 97.7041 mo
277.343 97.7041 li
277.343 101.048 li
213.361 101.048 li
213.361 97.7041 li
cp
.684352 .464546 .433845 .323278 cmyk
f
277.343 91.3483 mo
277.343 96.8944 li
272.723 96.8944 li
272.084 96.1163 li
256.492 96.1163 li
255.852 96.8944 li
213.361 96.8944 li
213.361 91.3483 li
277.343 91.3483 li
cp
.564294 .313085 .345434 .116823 cmyk
f
237.677 93.2874 mo
249.528 93.2874 li
249.528 92.5513 li
237.677 92.5513 li
237.677 93.2874 li
cp
.804746 .568353 .507561 .522942 cmyk
f
235.027 94.3916 mo
235.027 93.7411 234.5 93.2138 233.849 93.2138 cv
233.199 93.2138 232.671 93.7411 232.671 94.3916 cv
232.671 95.0421 233.199 95.5694 233.849 95.5694 cv
234.5 95.5694 235.027 95.0421 235.027 94.3916 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
249.896 93.7291 mo
237.309 93.7291 li
237.309 95.4958 li
249.896 95.4958 li
249.896 93.7291 li
cp
.804746 .568353 .507561 .522942 cmyk
f
256.871 93.3188 mo
256.871 92.9801 256.596 92.7055 256.258 92.7055 cv
254.148 92.7055 li
253.809 92.7055 253.535 92.9801 253.535 93.3188 cv
253.535 93.6575 253.809 93.932 254.148 93.932 cv
256.258 93.932 li
256.596 93.932 256.871 93.6575 256.871 93.3188 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
261.214 93.3188 mo
261.214 92.9801 260.939 92.7055 260.601 92.7055 cv
258.491 92.7055 li
258.153 92.7055 257.878 92.9801 257.878 93.3188 cv
257.878 93.6575 258.153 93.932 258.491 93.932 cv
260.601 93.932 li
260.939 93.932 261.214 93.6575 261.214 93.3188 cv
cp
.690669 .470649 .437385 .334691 cmyk
f
265.557 93.3188 mo
265.557 92.9801 265.283 92.7055 264.944 92.7055 cv
262.834 92.7055 li
262.496 92.7055 262.221 92.9801 262.221 93.3188 cv
262.221 93.6575 262.496 93.932 262.834 93.932 cv
264.944 93.932 li
265.283 93.932 265.557 93.6575 265.557 93.3188 cv
cp
f
269.9 93.3188 mo
269.9 92.9801 269.626 92.7055 269.287 92.7055 cv
267.177 92.7055 li
266.839 92.7055 266.564 92.9801 266.564 93.3188 cv
266.564 93.6575 266.839 93.932 267.177 93.932 cv
269.287 93.932 li
269.626 93.932 269.9 93.6575 269.9 93.3188 cv
cp
f
274.243 93.3188 mo
274.243 92.9801 273.969 92.7055 273.63 92.7055 cv
271.521 92.7055 li
271.182 92.7055 270.907 92.9801 270.907 93.3188 cv
270.907 93.6575 271.182 93.932 271.521 93.932 cv
273.63 93.932 li
273.969 93.932 274.243 93.6575 274.243 93.3188 cv
cp
f
213.488 101.048 mo
213.488 109.096 li
215.059 109.096 li
219.357 105.676 li
237.611 104.844 li
237.611 107.571 li
249.025 106.184 li
249.025 103.319 li
262.23 102.555 li
277.327 101.795 li
277.343 101.048 li
213.488 101.048 li
cp
.804746 .568353 .507561 .522942 cmyk
f
303.083 89.057 mo
303.083 90.0593 302.271 90.8718 301.268 90.8718 cv
301.268 90.8718 li
300.266 90.8718 299.453 90.0593 299.453 89.057 cv
299.453 83.3154 li
299.453 82.3131 300.266 81.5005 301.268 81.5005 cv
301.268 81.5005 li
302.271 81.5005 303.083 82.3131 303.083 83.3154 cv
303.083 89.057 li
cp
.690669 .470649 .437385 .334691 cmyk
f
303.583 90.1853 mo
281.993 90.1853 li
281.65 90.1853 281.371 90.464 281.371 90.8078 cv
281.371 92.6912 li
281.371 93.0349 281.65 93.3136 281.993 93.3136 cv
303.583 93.3136 li
303.926 93.3136 304.205 93.0349 304.205 92.6912 cv
304.205 90.8078 li
304.205 90.464 303.926 90.1853 303.583 90.1853 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
286.119 92.2332 mo
284.009 92.2332 li
283.67 92.2332 283.396 91.9587 283.396 91.62 cv
283.396 91.2813 283.67 91.0068 284.009 91.0068 cv
286.119 91.0068 li
286.457 91.0068 286.732 91.2813 286.732 91.62 cv
286.732 91.9587 286.457 92.2332 286.119 92.2332 cv
cp
.690669 .470649 .437385 .334691 cmyk
f
290.738 92.2332 mo
288.629 92.2332 li
288.29 92.2332 288.015 91.9587 288.015 91.62 cv
288.015 91.2813 288.29 91.0068 288.629 91.0068 cv
290.738 91.0068 li
291.077 91.0068 291.351 91.2813 291.351 91.62 cv
291.351 91.9587 291.077 92.2332 290.738 92.2332 cv
cp
f
295.358 92.2332 mo
293.248 92.2332 li
292.91 92.2332 292.635 91.9587 292.635 91.62 cv
292.635 91.2813 292.91 91.0068 293.248 91.0068 cv
295.358 91.0068 li
295.696 91.0068 295.971 91.2813 295.971 91.62 cv
295.971 91.9587 295.696 92.2332 295.358 92.2332 cv
cp
f
299.978 92.2332 mo
297.868 92.2332 li
297.529 92.2332 297.255 91.9587 297.255 91.62 cv
297.255 91.2813 297.529 91.0068 297.868 91.0068 cv
299.978 91.0068 li
300.316 91.0068 300.591 91.2813 300.591 91.62 cv
300.591 91.9587 300.316 92.2332 299.978 92.2332 cv
cp
f
313.201 93.8415 mo
278.005 93.8415 li
278.005 101.048 li
280.478 101.048 li
281.581 101.048 282.553 101.564 283.201 102.355 cv
313.201 102.355 li
314.502 102.355 315.556 101.301 315.556 100 cv
315.556 96.1965 li
315.556 94.8958 314.502 93.8415 313.201 93.8415 cv
cp
f
282.585 96.0194 mo
280.475 96.0194 li
280.137 96.0194 279.862 95.7448 279.862 95.4061 cv
279.862 95.0674 280.137 94.7929 280.475 94.7929 cv
282.585 94.7929 li
282.924 94.7929 283.198 95.0674 283.198 95.4061 cv
283.198 95.7448 282.924 96.0194 282.585 96.0194 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
295.72 94.7929 mo
297.83 94.7929 li
298.168 94.7929 298.443 95.0674 298.443 95.4061 cv
298.443 95.7448 298.168 96.0194 297.83 96.0194 cv
295.72 96.0194 li
295.382 96.0194 295.107 95.7448 295.107 95.4061 cv
295.107 95.0674 295.382 94.7929 295.72 94.7929 cv
cp
f
290.639 94.7929 mo
292.748 94.7929 li
293.087 94.7929 293.361 95.0674 293.361 95.4061 cv
293.361 95.7448 293.087 96.0194 292.748 96.0194 cv
290.639 96.0194 li
290.3 96.0194 290.025 95.7448 290.025 95.4061 cv
290.025 95.0674 290.3 94.7929 290.639 94.7929 cv
cp
f
285.557 94.7929 mo
287.667 94.7929 li
288.005 94.7929 288.28 95.0674 288.28 95.4061 cv
288.28 95.7448 288.005 96.0194 287.667 96.0194 cv
285.557 96.0194 li
285.218 96.0194 284.944 95.7448 284.944 95.4061 cv
284.944 95.0674 285.218 94.7929 285.557 94.7929 cv
cp
f
304.931 99.3191 mo
303.011 99.3191 li
302.769 99.5967 302.424 99.7811 302.027 99.7811 cv
301.63 99.7811 301.285 99.5967 301.043 99.3191 cv
284.605 99.3191 li
284.24 99.3191 283.945 99.0237 283.945 98.6592 cv
283.945 98.2947 284.24 97.9992 284.605 97.9992 cv
300.801 97.9992 li
300.989 97.5 301.462 97.1413 302.027 97.1413 cv
302.592 97.1413 303.066 97.5 303.254 97.9992 cv
304.931 97.9992 li
305.295 97.9992 305.591 98.2947 305.591 98.6592 cv
305.591 99.0237 305.295 99.3191 304.931 99.3191 cv
cp
f
279.599 101.206 mo
276.939 101.206 li
276.939 101.795 li
279.599 101.795 li
280.503 101.795 281.266 103.037 281.266 104.506 cv
281.266 105.976 280.503 107.217 279.599 107.217 cv
279.099 107.217 li
274.403 107.217 li
272.171 105.719 li
272.705 104.623 li
272.693 101.637 li
262.23 101.637 li
262.23 102.555 li
263.701 103.922 265.295 105.725 264.1 106.92 cv
258.71 115.832 li
258.33 116.445 258.519 117.25 259.131 117.631 cv
263.392 120.282 li
266.018 121.778 265.156 119.623 265.471 118.975 cv
271.884 106.31 li
274.211 107.806 li
279.038 107.806 li
279.599 107.806 li
280.845 107.806 281.856 106.329 281.856 104.506 cv
281.856 102.684 280.845 101.206 279.599 101.206 cv
cp
f
276.468 102.953 mo
273.096 102.953 li
273.096 101.501 li
276.468 101.501 li
276.468 102.953 li
cp
.720851 .673426 .586358 .790768 cmyk
f
276.468 102.953 mo
273.096 102.953 li
273.096 101.21 li
276.468 101.414 li
276.468 102.953 li
cp
.804746 .568353 .507561 .522942 cmyk
f
272.705 104.623 mo
272.702 103.971 li
263.586 103.971 li
264.436 105.016 264.912 106.108 264.1 106.92 cv
258.71 115.832 li
258.33 116.445 258.519 117.25 259.131 117.631 cv
263.392 120.282 li
266.018 121.778 265.156 119.623 265.471 118.975 cv
272.705 104.623 li
cp
.284794 .620722 .992004 .253178 cmyk
f
491.119 95.3079 mo
491.119 98.3295 li
493.175 98.3295 li
493.175 95.3079 li
491.119 95.3079 li
cp
.816129 .572106 .530816 .573571 cmyk
f
461.469 97.825 mo
467.786 97.825 li
467.786 95.6172 li
461.469 95.6172 li
461.469 97.825 li
cp
.849027 .6177 .563592 .674403 cmyk
f
405.3 102.33 mo
405.424 104.177 406.914 105.642 408.776 105.716 cv
408.795 105.527 408.796 105.333 408.835 105.149 cv
407.635 104.681 406.745 103.601 406.553 102.29 cv
405.3 102.33 li
cp
f
414.27 102.034 mo
412.888 102.077 li
412.888 104.51 li
412.671 105.556 411.744 106.341 410.634 106.341 cv
405.952 106.341 li
404.897 106.341 404.017 105.627 403.745 104.659 cv
403.495 105.543 li
404.004 106.371 404.91 106.93 405.952 106.93 cv
410.634 106.93 li
411.646 106.93 412.535 106.406 413.052 105.617 cv
414.536 105.617 li
414.629 105.617 414.714 105.591 414.797 105.564 cv
414.579 104.421 414.396 103.26 414.274 102.075 cv
414.27 102.034 li
cp
f
421.902 90.1305 mo
397.944 90.3994 li
394.149 94.1944 li
399.238 101.409 li
432.485 101.648 li
457.967 90.1305 li
421.902 90.1305 li
cp
.816129 .572106 .530816 .573571 cmyk
f
424.398 101.814 mo
426.705 113.879 433.871 122.985 433.871 122.985 cv
433.871 122.985 429.757 125.866 425.167 128.531 cv
421.622 123.415 415.34 113.667 414.161 102.177 cv
424.398 101.814 li
cp
.284794 .620722 .992004 .253178 cmyk
f
401.017 115.648 mo
404.906 101.899 li
394.664 102.221 li
395.922 102.977 li
396.215 103.789 396.194 105.098 395.876 105.9 cv
392.383 113.37 li
392.065 114.172 392.457 115.082 393.259 115.402 cv
398.841 117.628 li
402.253 118.836 400.782 116.479 401.017 115.648 cv
cp
f
393.646 96.0588 mo
385.63 96.0588 li
385.63 102.388 li
393.646 102.388 li
393.646 96.0588 li
cp
.816129 .572106 .530816 .573571 cmyk
f
375.235 104.332 mo
368.938 108.605 li
367.324 109.7 366.015 109.007 366.015 107.056 cv
366.015 105.184 li
366.015 103.233 367.597 101.652 369.548 101.652 cv
374.625 101.652 li
376.576 101.652 376.849 103.237 375.235 104.332 cv
cp
361.158 96.0588 mo
361.158 96.0588 361.158 97.3108 361.158 98.8553 cv
361.158 100.4 361.504 101.652 361.931 101.652 cv
362.358 101.652 362.704 103.233 362.704 105.184 cv
362.704 110.777 li
362.704 112.728 363.492 114.388 364.465 114.485 cv
365.438 114.583 367.502 113.726 369.075 112.572 cv
378.158 105.906 li
382.883 103.585 li
386.547 103.197 li
386.547 96.0588 li
361.158 96.0588 li
cp
.284794 .620722 .992004 .253178 cmyk
f
443.546 105.195 mo
443.546 106.058 445.31 105.691 445.344 108.14 cv
443.943 110.577 444.178 113.434 444.178 115.844 cv
444.178 119.034 444.249 121.47 444.249 121.47 cv
452.607 121.47 li
452.607 118.039 li
451.375 115.84 452.343 112.43 452.343 111.265 cv
452.343 109.507 451.796 107.957 450.958 106.924 cv
451.024 106.261 452.295 105.195 452.871 105.195 cv
455.635 105.195 456.173 104.742 456.173 104.742 cv
457.757 100.635 li
443.546 100.445 li
443.546 100.445 443.546 104.315 443.546 105.195 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
472.428 91.3489 mo
456.657 91.3489 li
456.657 94.1454 li
472.428 94.1454 li
472.428 91.3489 li
cp
.816129 .572106 .530816 .573571 cmyk
f
462.786 95.3229 mo
457.565 95.3229 li
457.565 98.1193 li
462.786 98.1193 li
462.786 95.3229 li
cp
.684352 .464546 .433845 .323278 cmyk
f
467.277 98.1193 mo
480.635 98.1193 li
480.635 95.3229 li
467.277 95.3229 li
467.277 98.1193 li
cp
f
479.861 94.4398 mo
491.783 94.4398 li
491.783 99.0024 li
479.861 99.0024 li
479.861 94.4398 li
cp
.564294 .313085 .345434 .116823 cmyk
f
488.766 97.825 mo
490.605 97.825 li
490.605 95.4701 li
488.766 95.4701 li
488.766 97.825 li
cp
.816129 .572106 .530816 .573571 cmyk
f
422.658 88.9506 mo
423.804 88.9506 li
424.041 88.9506 424.599 88.8675 425.17 88.7332 cv
425.17 89.4328 li
421.902 89.4328 li
421.902 90.1305 li
457.967 90.1305 li
457.967 89.4328 li
457.942 89.4328 li
457.942 88.4822 li
456.785 87.3253 li
454.599 87.3253 li
454.285 87.6391 li
453.868 87.2229 li
450.096 87.2229 li
448.939 88.3799 li
448.939 88.8761 li
453.442 88.8761 li
453.442 89.4328 li
452.714 89.4328 li
452.714 88.9971 li
451.671 88.9971 li
451.671 89.4328 li
451.075 89.4328 li
451.075 88.9971 li
450.032 88.9971 li
450.032 89.4328 li
449.436 89.4328 li
449.436 88.9971 li
448.393 88.9971 li
448.393 89.4328 li
447.797 89.4328 li
447.797 88.9971 li
446.754 88.9971 li
446.754 89.4328 li
446.158 89.4328 li
446.158 88.9971 li
445.115 88.9971 li
445.115 89.4328 li
444.519 89.4328 li
444.519 88.9971 li
443.476 88.9971 li
443.476 89.4328 li
442.88 89.4328 li
442.88 88.9971 li
441.837 88.9971 li
441.837 89.4328 li
441.241 89.4328 li
441.241 88.9971 li
440.198 88.9971 li
440.198 89.4328 li
439.602 89.4328 li
439.602 88.9971 li
438.559 88.9971 li
438.559 89.4328 li
437.963 89.4328 li
437.963 88.9971 li
436.92 88.9971 li
436.92 89.4328 li
436.324 89.4328 li
436.324 88.9971 li
435.281 88.9971 li
435.281 89.4328 li
434.685 89.4328 li
434.685 88.9971 li
433.642 88.9971 li
433.642 89.4328 li
433.046 89.4328 li
433.046 88.9971 li
432.003 88.9971 li
432.003 89.4328 li
431.407 89.4328 li
431.407 88.9971 li
430.364 88.9971 li
430.364 89.4328 li
429.67 89.4328 li
429.67 88.4822 li
428.513 87.3253 li
426.327 87.3253 li
426.214 87.4378 li
425.462 87.1142 424.197 86.8917 423.804 86.8917 cv
422.658 86.8917 li
422.089 86.8917 421.628 87.3526 421.628 87.9211 cv
421.628 88.4897 422.089 88.9506 422.658 88.9506 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
433.743 101.608 mo
433.743 93.5296 li
423.986 90.439 li
457.811 90.4905 li
457.811 100.85 li
433.743 101.608 li
cp
.684352 .464546 .433845 .323278 cmyk
f
437.831 95.1021 mo
436.712 95.1021 li
436.712 100.691 li
437.831 100.647 li
437.831 95.1021 li
cp
.816129 .572106 .530816 .573571 cmyk
f
441.621 95.1021 mo
440.561 95.1021 li
440.561 100.541 li
441.621 100.499 li
441.621 95.1021 li
cp
f
443.441 95.1021 mo
442.409 95.1021 li
442.409 100.469 li
443.441 100.429 li
443.441 95.1021 li
cp
f
446.942 95.1021 mo
445.962 95.1021 li
445.962 100.33 li
446.942 100.292 li
446.942 95.1021 li
cp
f
448.626 95.1021 mo
447.671 95.1021 li
447.671 100.264 li
448.626 100.227 li
448.626 95.1021 li
cp
f
453.432 95.1021 mo
452.546 95.1021 li
452.546 100.074 li
453.432 100.04 li
453.432 95.1021 li
cp
f
455.601 99.9552 mo
456.446 99.9223 li
456.446 95.1021 li
455.601 95.1021 li
455.601 99.9552 li
cp
f
454.957 95.1021 mo
454.092 95.1021 li
454.092 100.014 li
454.957 99.9803 li
454.957 95.1021 li
cp
f
450.977 93.1641 mo
450.977 93.3749 451.148 93.5456 451.359 93.5456 cv
454.491 93.5456 li
454.701 93.5456 454.872 93.3749 454.872 93.1641 cv
454.872 91.8866 li
454.872 91.6759 454.701 91.5051 454.491 91.5051 cv
451.359 91.5051 li
451.148 91.5051 450.977 91.6759 450.977 91.8866 cv
450.977 93.1641 li
cp
f
450.961 100.136 mo
451.87 100.101 li
451.87 95.1021 li
450.961 95.1021 li
450.961 100.136 li
cp
f
450.268 95.1021 mo
449.337 95.1021 li
449.337 100.199 li
450.268 100.163 li
450.268 95.1021 li
cp
f
445.679 93.1641 mo
445.679 93.3749 445.85 93.5456 446.061 93.5456 cv
449.193 93.5456 li
449.403 93.5456 449.574 93.3749 449.574 93.1641 cv
449.574 91.8866 li
449.574 91.6759 449.403 91.5051 449.193 91.5051 cv
446.061 91.5051 li
445.85 91.5051 445.679 91.6759 445.679 91.8866 cv
445.679 93.1641 li
cp
f
445.214 95.1021 mo
444.209 95.1021 li
444.209 100.399 li
445.214 100.36 li
445.214 95.1021 li
cp
f
440.381 93.1641 mo
440.381 93.3749 440.552 93.5456 440.763 93.5456 cv
443.895 93.5456 li
444.105 93.5456 444.276 93.3749 444.276 93.1641 cv
444.276 91.8866 li
444.276 91.6759 444.105 91.5051 443.895 91.5051 cv
440.763 91.5051 li
440.552 91.5051 440.381 91.6759 440.381 91.8866 cv
440.381 93.1641 li
cp
f
439.751 95.1021 mo
438.663 95.1021 li
438.663 100.615 li
439.751 100.572 li
439.751 95.1021 li
cp
f
435.083 93.1641 mo
435.083 93.3749 435.254 93.5456 435.465 93.5456 cv
438.597 93.5456 li
438.807 93.5456 438.978 93.3749 438.978 93.1641 cv
438.978 91.8866 li
438.978 91.6759 438.807 91.5051 438.597 91.5051 cv
435.465 91.5051 li
435.254 91.5051 435.083 91.6759 435.083 91.8866 cv
435.083 93.1641 li
cp
f
434.707 100.769 mo
435.857 100.724 li
435.857 95.1021 li
434.707 95.1021 li
434.707 100.769 li
cp
f
402.031 97.0043 mo
401.287 97.0043 400.683 97.6078 400.683 98.3523 cv
400.683 99.0967 401.287 99.7003 402.031 99.7003 cv
402.776 99.7003 403.379 99.0967 403.379 98.3523 cv
403.379 97.6078 402.776 97.0043 402.031 97.0043 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
432.485 94.1944 mo
407.565 94.1944 li
403.494 97.3146 li
403.703 97.6081 403.828 97.9648 403.828 98.3523 cv
403.828 99.3449 403.024 100.15 402.031 100.15 cv
401.038 100.15 400.234 99.3449 400.234 98.3523 cv
400.234 97.3596 401.038 96.555 402.031 96.555 cv
402.458 96.555 402.845 96.71 403.153 96.9587 cv
406.759 94.1944 li
394.149 94.1944 li
392.766 95.5768 li
392.766 102.899 li
432.485 101.648 li
432.485 94.1944 li
cp
.804746 .568353 .507561 .522942 cmyk
f
423.986 90.439 mo
397.944 90.3994 li
394.639 93.7039 li
435.044 93.7204 li
423.986 90.439 li
cp
.684352 .464546 .433845 .323278 cmyk
f
400.297 87.1992 mo
403.548 87.1992 li
403.548 82.5691 li
400.297 82.5691 li
399.647 82.5691 399.12 83.0963 399.12 83.7466 cv
399.12 86.0218 li
399.12 86.672 399.647 87.1992 400.297 87.1992 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
405.692 81.8749 mo
403.277 81.8749 li
403.277 88.216 li
405.692 88.216 li
405.692 81.8749 li
cp
.816129 .572106 .530816 .573571 cmyk
f
408.36 80.086 mo
405.692 80.086 li
405.692 87.7859 li
408.36 87.7859 li
408.36 80.086 li
cp
.684352 .464546 .433845 .323278 cmyk
f
417.984 86.8257 mo
421.053 81.5227 li
422.03 79.8342 421.279 78.8126 419.376 79.2408 cv
408.36 81.7195 li
408.36 87.7859 li
418.573 87.7859 li
417.984 86.8257 li
cp
.564294 .313085 .345434 .116823 cmyk
f
421.066 90.4346 mo
403.277 90.4346 li
403.277 87.7859 li
421.066 87.7859 li
421.066 90.4346 li
cp
.816129 .572106 .530816 .573571 cmyk
f
136.745 234.071 mo
103.166 234.071 li
103.166 237.186 li
103.248 237.186 li
103.248 239.218 li
119.827 239.218 li
119.827 237.186 li
133.621 237.186 li
134.641 235.794 li
136.745 234.071 li
cp
.849027 .6177 .563592 .674403 cmyk
f
129.774 239.185 mo
129.774 239.185 123.831 238.65 124.413 239.869 cv
126.808 244.888 124.869 250.706 124.869 250.706 cv
125.782 255.61 li
125.782 255.61 130.907 256.174 131.029 254.926 cv
131.485 250.249 130.032 247.498 129.808 244.646 cv
129.619 242.243 129.774 239.185 129.774 239.185 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
141.903 232.758 mo
139.535 232.758 li
139.535 232.467 li
134.641 232.467 li
134.641 232.758 li
103.701 232.758 li
103.701 235.378 li
134.641 235.378 li
134.641 235.794 li
139.535 235.794 li
139.535 235.378 li
141.903 235.378 li
141.903 235.835 li
147.109 235.835 li
147.109 232.384 li
141.903 232.384 li
141.903 232.758 li
cp
.804746 .568353 .507561 .522942 cmyk
f
152.557 232.222 mo
146.278 232.222 li
146.278 236.08 li
152.557 236.08 li
153.085 236.08 153.512 235.59 153.512 234.985 cv
153.512 233.317 li
153.512 232.712 153.085 232.222 152.557 232.222 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
128.624 239.368 mo
128.624 235.169 li
126.105 235.169 li
126.105 239.368 li
128.624 239.368 li
cp
.804746 .568353 .507561 .522942 cmyk
f
128.964 237.311 mo
133.602 237.311 li
134.721 235.872 li
128.964 235.872 li
128.964 237.311 li
cp
f
101.66 242.88 mo
104.352 242.874 106.33 242.794 105.655 241.807 cv
105.245 241.208 105.168 240.309 105.297 239.408 cv
104.039 239.512 103.104 240.248 102.226 241.83 cv
102.079 242.095 101.883 242.458 101.66 242.88 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
72.3466 244.748 mo
73.2054 251.634 75.4795 257.629 77.0062 261.345 cv
81.7324 259.832 86.0667 258.026 86.0667 258.026 cv
86.0667 258.026 82.9688 251.621 81.9598 243.083 cv
78.0029 243.384 74.7109 244.066 72.3466 244.748 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
104.905 238.673 mo
125.697 238.673 li
125.697 235.964 li
104.905 235.964 li
104.905 238.673 li
cp
.804746 .568353 .507561 .522942 cmyk
f
106.233 239.844 mo
110.87 239.844 li
112.447 239.844 113.282 240.679 112.169 242.256 cv
111.056 243.832 105.955 250.324 105.028 251.623 cv
104.1 252.921 102.802 254.034 100.761 254.034 cv
98.7212 254.034 97.1446 253.385 98.072 251.251 cv
98.9994 249.118 101.504 244.203 102.431 242.534 cv
103.358 240.865 104.471 239.844 106.233 239.844 cv
cp
133.804 233.618 mo
133.804 231.899 li
126.301 231.899 li
122.307 230.469 119.174 228.471 117.646 226.567 cv
115.605 226.567 li
116.863 228.226 118.924 230.541 121.475 231.899 cv
105.429 231.899 li
102.839 226.567 li
98.5785 226.567 li
100.487 228.009 102.021 229.557 102.835 231.085 cv
94.9178 231.085 62.4262 231.085 49.3252 231.085 cv
48.0997 231.085 45.51 233.227 45.7414 234.43 cv
46.4714 238.226 48.6502 251.2 49.4048 255.774 cv
57.2891 255.774 li
59.7017 255.774 58.3208 253.222 59.5986 251.792 cv
61.3915 249.785 63.7189 248.088 66.314 246.652 cv
66.7832 247.472 67.3841 247.384 68.359 246.774 cv
69.6332 245.978 75.2079 243.907 83.4904 243.509 cv
84.6849 243.509 84.1024 240.732 85.1376 240.5 cv
89.8437 239.569 92.0837 239.527 93.6681 239.527 cv
95.5225 239.527 96.3174 241.934 95.1043 243.647 cv
93.5277 245.873 91.3947 249.675 91.5801 255.332 cv
100.205 255.332 li
101.967 255.332 103.795 255.255 107.253 251.159 cv
113.577 243.668 117.266 240.227 119.827 239.237 cv
119.827 238.971 li
104.595 239.093 li
104.595 235.592 li
125.607 235.592 li
125.607 234.954 li
129.081 234.954 li
129.081 235.592 li
133.802 235.592 li
133.802 233.873 li
104.595 233.873 li
104.595 233.618 li
133.804 233.618 li
cp
.684352 .464546 .433845 .323278 cmyk
f
84.0979 226.092 mo
84.0979 223.213 li
84.0979 222.685 84.5258 222.257 85.0536 222.257 cv
116.905 222.257 li
117.433 222.257 117.861 222.685 117.861 223.213 cv
117.861 227.048 li
85.0536 227.048 li
84.5258 227.048 84.0979 226.62 84.0979 226.092 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
46.7058 239.815 mo
47.6452 245.224 48.8752 252.563 49.4048 255.774 cv
57.2891 255.774 li
59.7017 255.774 58.3208 253.222 59.5986 251.792 cv
61.3915 249.785 63.7189 248.088 66.314 246.652 cv
66.7832 247.472 67.3841 247.384 68.359 246.774 cv
69.6332 245.978 75.2079 243.907 83.4904 243.509 cv
84.6849 243.509 84.1024 240.732 85.1376 240.5 cv
86.7828 240.175 88.1214 239.96 89.2412 239.815 cv
46.7058 239.815 li
cp
.804746 .568353 .507561 .522942 cmyk
f
99.407 237.9 mo
100.37 237.9 101.192 237.301 101.529 236.457 cv
101.223 237.042 100.617 237.445 99.9119 237.445 cv
51.6471 237.445 li
50.6353 237.445 49.8151 236.624 49.8151 235.613 cv
49.8151 234.601 50.6353 233.781 51.6471 233.781 cv
99.9119 233.781 li
100.617 233.781 101.223 234.184 101.529 234.768 cv
101.192 233.924 100.37 233.325 99.407 233.325 cv
51.1415 233.325 li
49.8802 233.325 48.8539 234.351 48.8539 235.612 cv
48.8539 236.551 49.423 237.358 50.2333 237.71 cv
50.0144 237.856 49.8613 238.093 49.8613 238.376 cv
49.8613 241.679 li
49.8613 242.129 50.2255 242.493 50.6748 242.493 cv
51.1241 242.493 51.4884 242.129 51.4884 241.679 cv
51.4884 238.376 li
51.4884 238.195 51.4177 238.036 51.3175 237.9 cv
99.407 237.9 li
cp
.849027 .6177 .563592 .674403 cmyk
f
496.217 168.346 mo
475.776 168.346 li
475.776 165.599 li
496.217 165.599 li
496.217 168.346 li
cp
f
475.272 165.385 mo
470.955 165.385 li
470.779 165.385 470.636 165.242 470.636 165.066 cv
470.636 164.89 470.779 164.747 470.955 164.747 cv
475.272 164.747 li
475.448 164.747 475.591 164.89 475.591 165.066 cv
475.591 165.242 475.448 165.385 475.272 165.385 cv
cp
475.07 158.212 mo
475.493 158.212 li
475.493 164.109 li
470.931 164.109 li
475.07 158.212 li
cp
474.451 157.034 mo
469.753 163.864 li
469.753 169.653 li
476.671 169.653 li
476.671 157.034 li
474.451 157.034 li
cp
.804746 .568353 .507561 .522942 cmyk
f
424.538 169.8 mo
420.115 170.378 li
420.115 162.053 li
424.538 162.631 li
424.538 169.8 li
cp
.849027 .6177 .563592 .674403 cmyk
f
402.811 173.176 mo
401.597 173.176 li
401.547 173.46 401.509 173.748 401.509 174.046 cv
401.509 174.919 401.74 175.734 402.134 176.445 cv
402.805 176.445 li
402.628 175.933 402.512 175.393 402.512 174.821 cv
402.512 174.242 402.63 173.694 402.811 173.176 cv
cp
408.512 172.819 mo
408.512 178.517 li
399.367 178.517 li
399.367 178.517 398.221 179.46 398.09 179.976 cv
397.97 180.451 398.329 181.465 398.181 181.845 cv
397.862 182.666 396.221 182.711 396.221 182.711 cv
395.085 184.707 394.215 185.993 394.033 186.54 cv
393.851 187.087 394.626 188.318 392.574 188.364 cv
390.523 188.409 386.147 186.312 386.147 186.312 cv
393.577 175.189 li
393.577 172.272 li
401.282 172.492 li
400.835 172.659 400.514 173.081 400.514 173.586 cv
400.514 176.519 li
400.514 177.169 401.041 177.697 401.691 177.697 cv
406.759 177.697 li
407.41 177.697 407.937 177.169 407.937 176.519 cv
407.937 173.586 li
407.937 173.276 407.811 172.998 407.615 172.788 cv
408.512 172.819 li
cp
f
408.675 178.083 mo
409.063 184.172 410.574 189.544 411.638 192.966 cv
416.262 191.925 420.538 190.573 420.538 190.573 cv
420.538 190.573 418.147 184.254 417.895 176.082 cv
408.675 178.083 li
cp
.284794 .620722 .992004 .253178 cmyk
f
419.984 161.61 mo
419.984 162.566 419.209 163.342 418.253 163.342 cv
417.296 163.342 416.521 162.566 416.521 161.61 cv
416.521 161.444 416.551 161.286 416.595 161.134 cv
403.216 161.134 li
403.248 161.288 403.266 161.446 403.266 161.61 cv
403.266 162.878 402.238 163.907 400.969 163.907 cv
399.7 163.907 398.671 162.878 398.671 161.61 cv
398.671 161.446 398.69 161.288 398.722 161.134 cv
392.474 161.134 li
392.474 168.532 li
420.439 168.532 li
420.439 161.134 li
419.91 161.134 li
419.954 161.286 419.984 161.444 419.984 161.61 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
419.146 158.287 mo
396.325 157.295 li
395.585 157.263 394.981 157.764 394.981 158.414 cv
394.981 162.122 li
398.628 162.122 li
399.027 161.444 399.757 160.983 400.601 160.983 cv
400.849 160.983 401.084 161.033 401.308 161.106 cv
401.308 160.605 li
401.308 159.955 401.835 159.428 402.486 159.428 cv
417.803 159.428 li
418.453 159.428 418.981 159.955 418.981 160.605 cv
418.981 161.644 li
418.981 161.736 418.944 161.816 418.923 161.902 cv
419.011 161.968 419.091 162.041 419.164 162.122 cv
420.177 162.122 li
420.177 159.357 li
420.177 158.791 419.717 158.312 419.146 158.287 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
355.115 181.871 mo
353.866 182.232 352.786 181.472 352.702 180.174 cv
352.702 180.174 347.765 162.606 352.166 162.606 cv
361.586 162.606 392.592 162.606 392.592 162.606 cv
392.592 171.044 li
355.115 181.871 li
cp
.284794 .620722 .992004 .253178 cmyk
f
469.208 162.32 mo
425.411 161.507 li
424.725 161.494 424.167 162.011 424.167 162.661 cv
424.167 170.38 li
424.167 171.03 424.725 171.547 424.89 171.544 cv
468.688 170.731 li
469.687 170.713 470.074 170.268 470.074 169.727 cv
470.074 163.314 li
470.074 162.774 469.687 162.329 469.208 162.32 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
426.628 166.251 mo
425.782 166.251 li
425.782 162.67 li
426.628 162.686 li
426.628 166.251 li
cp
.816129 .572106 .530816 .573571 cmyk
f
428.319 166.251 mo
427.474 166.251 li
427.474 162.702 li
428.319 162.718 li
428.319 166.251 li
cp
f
430.011 166.251 mo
429.165 166.251 li
429.165 162.734 li
430.011 162.75 li
430.011 166.251 li
cp
f
431.703 166.251 mo
430.857 166.251 li
430.857 162.766 li
431.703 162.783 li
431.703 166.251 li
cp
f
433.395 166.251 mo
432.549 166.251 li
432.549 162.799 li
433.395 162.815 li
433.395 166.251 li
cp
f
435.087 166.251 mo
434.241 166.251 li
434.241 162.831 li
435.087 162.847 li
435.087 166.251 li
cp
f
436.779 166.251 mo
435.933 166.251 li
435.933 162.863 li
436.779 162.879 li
436.779 166.251 li
cp
f
438.47 166.251 mo
437.624 166.251 li
437.624 162.895 li
438.47 162.911 li
438.47 166.251 li
cp
f
440.162 166.251 mo
439.316 166.251 li
439.316 162.928 li
440.162 162.944 li
440.162 166.251 li
cp
f
441.854 166.251 mo
441.008 166.251 li
441.008 162.96 li
441.854 162.976 li
441.854 166.251 li
cp
f
443.546 166.251 mo
442.7 166.251 li
442.7 162.992 li
443.546 163.008 li
443.546 166.251 li
cp
f
445.238 166.251 mo
444.392 166.251 li
444.392 163.024 li
445.238 163.04 li
445.238 166.251 li
cp
f
446.929 166.251 mo
446.083 166.251 li
446.083 163.057 li
446.929 163.073 li
446.929 166.251 li
cp
f
448.621 166.251 mo
447.775 166.251 li
447.775 163.089 li
448.621 163.105 li
448.621 166.251 li
cp
f
450.313 166.251 mo
449.467 166.251 li
449.467 163.121 li
450.313 163.137 li
450.313 166.251 li
cp
f
452.005 166.251 mo
451.159 166.251 li
451.159 163.153 li
452.005 163.169 li
452.005 166.251 li
cp
f
453.697 166.251 mo
452.851 166.251 li
452.851 163.186 li
453.697 163.202 li
453.697 166.251 li
cp
f
455.388 166.251 mo
454.543 166.251 li
454.543 163.218 li
455.388 163.234 li
455.388 166.251 li
cp
f
457.08 166.251 mo
456.234 166.251 li
456.234 163.25 li
457.08 163.266 li
457.08 166.251 li
cp
f
458.772 166.251 mo
457.926 166.251 li
457.926 163.282 li
458.772 163.298 li
458.772 166.251 li
cp
f
460.464 166.251 mo
459.618 166.251 li
459.618 163.314 li
460.464 163.331 li
460.464 166.251 li
cp
f
462.156 166.251 mo
461.31 166.251 li
461.31 163.347 li
462.156 163.363 li
462.156 166.251 li
cp
f
463.848 166.251 mo
463.002 166.251 li
463.002 163.379 li
463.848 163.395 li
463.848 166.251 li
cp
f
465.539 166.251 mo
464.693 166.251 li
464.693 163.411 li
465.539 163.427 li
465.539 166.251 li
cp
f
467.231 166.251 mo
466.385 166.251 li
466.385 163.443 li
467.231 163.459 li
467.231 166.251 li
cp
f
468.897 166.251 mo
468.077 166.251 li
468.077 163.475 li
468.897 163.491 li
468.897 166.251 li
cp
f
419.984 161.61 mo
419.984 162.566 419.209 163.342 418.253 163.342 cv
417.296 163.342 416.521 162.566 416.521 161.61 cv
416.521 161.444 416.551 161.286 416.595 161.134 cv
403.216 161.134 li
403.248 161.288 403.266 161.446 403.266 161.61 cv
403.266 162.878 402.238 163.907 400.969 163.907 cv
399.7 163.907 398.671 162.878 398.671 161.61 cv
398.671 161.446 398.69 161.288 398.722 161.134 cv
392.474 161.134 li
392.474 164.176 li
420.439 164.176 li
420.439 161.134 li
419.91 161.134 li
419.954 161.286 419.984 161.444 419.984 161.61 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
417.905 165.832 mo
417.905 166.32 417.509 166.716 417.02 166.716 cv
395.389 166.716 li
394.901 166.716 394.505 166.32 394.505 165.832 cv
394.505 165.832 li
394.505 165.343 394.901 164.947 395.389 164.947 cv
417.02 164.947 li
417.509 164.947 417.905 165.343 417.905 165.832 cv
417.905 165.832 li
cp
.849027 .6177 .563592 .674403 cmyk
f
392.474 167.512 mo
392.474 170.75 li
393.848 173.497 li
408.271 173.497 li
408.271 178.992 li
418.672 176.735 li
418.672 171.384 li
420.439 170.75 li
420.439 167.512 li
392.474 167.512 li
cp
.804746 .568353 .507561 .522942 cmyk
f
400.207 171.94 mo
396.528 171.94 li
396.192 171.94 395.92 171.668 395.92 171.333 cv
395.92 170.997 396.192 170.725 396.528 170.725 cv
400.207 170.725 li
400.542 170.725 400.814 170.997 400.814 171.333 cv
400.814 171.668 400.542 171.94 400.207 171.94 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
405.855 169.29 mo
405.855 168.965 406.119 168.702 406.444 168.702 cv
408.872 168.702 li
409.198 168.702 409.461 168.965 409.461 169.29 cv
409.461 169.616 409.198 169.879 408.872 169.879 cv
406.444 169.879 li
406.119 169.879 405.855 169.616 405.855 169.29 cv
cp
f
412.515 171.866 mo
412.515 172.516 411.988 173.044 411.338 173.044 cv
411.191 173.044 li
410.807 173.044 410.483 172.849 410.268 172.565 cv
407.198 172.565 li
406.761 172.565 406.407 172.211 406.407 171.774 cv
406.407 171.337 406.761 170.983 407.198 170.983 cv
410.293 170.983 li
410.509 170.72 410.823 170.542 411.191 170.542 cv
411.338 170.542 li
411.988 170.542 412.515 171.069 412.515 171.719 cv
412.515 171.866 li
cp
f
400.969 164.13 mo
399.579 164.13 398.449 162.999 398.449 161.609 cv
398.449 160.22 399.579 159.09 400.969 159.09 cv
402.358 159.09 403.489 160.22 403.489 161.609 cv
403.489 162.999 402.358 164.13 400.969 164.13 cv
cp
.690669 .470649 .437385 .334691 cmyk
f
418.252 163.755 mo
417.07 163.755 416.107 162.793 416.107 161.609 cv
416.107 160.426 417.07 159.464 418.252 159.464 cv
419.435 159.464 420.398 160.426 420.398 161.609 cv
420.398 162.793 419.435 163.755 418.252 163.755 cv
cp
f
402.489 161.61 mo
402.489 160.77 401.808 160.09 400.969 160.09 cv
400.129 160.09 399.449 160.77 399.449 161.61 cv
399.449 162.449 400.129 163.13 400.969 163.13 cv
401.808 163.13 402.489 162.449 402.489 161.61 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
419.398 161.61 mo
419.398 160.977 418.885 160.464 418.253 160.464 cv
417.62 160.464 417.107 160.977 417.107 161.61 cv
417.107 162.242 417.62 162.755 418.253 162.755 cv
418.885 162.755 419.398 162.242 419.398 161.61 cv
cp
f
503.106 167.512 mo
499.77 167.512 li
499.77 166.089 li
503.106 166.089 li
503.106 167.512 li
cp
503.548 165.255 mo
495.653 165.255 li
495.407 165.255 495.207 165.455 495.207 165.701 cv
495.207 168.293 li
495.207 168.539 495.407 168.738 495.653 168.738 cv
503.548 168.738 li
503.794 168.738 503.993 168.539 503.993 168.293 cv
503.993 165.701 li
503.993 165.455 503.794 165.255 503.548 165.255 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
243.794 36.4692 mo
229.685 36.4692 li
226.548 40.7313 li
215.298 40.7313 li
208.2 27.3858 li
243.794 27.3858 li
243.794 36.4692 li
cp
.849027 .6177 .563592 .674403 cmyk
f
298.9 34.6149 mo
295.107 34.6149 li
295.107 33.1248 li
298.9 33.1248 li
298.9 34.6149 li
cp
.684352 .464546 .433845 .323278 cmyk
f
295.107 27.0772 mo
295.107 30.2247 li
298.9 30.2247 li
298.9 26.2961 li
295.888 26.2961 li
295.107 27.0772 li
cp
.564294 .313085 .345434 .116823 cmyk
f
338.601 34.3242 mo
303.3 34.3242 li
303.3 28.7313 li
338.601 28.7313 li
338.601 34.3242 li
cp
.684352 .464546 .433845 .323278 cmyk
f
300.434 33.3681 mo
293.573 33.3681 li
293.573 29.9813 li
300.434 29.9813 li
300.434 33.3681 li
cp
.849027 .6177 .563592 .674403 cmyk
f
248.017 36.0904 mo
243.434 36.0904 li
243.434 27.1858 li
248.017 27.1858 li
248.017 36.0904 li
cp
.804746 .568353 .507561 .522942 cmyk
f
229.696 46.6883 mo
229.696 55.2442 li
229.696 55.8946 230.207 56.2934 230.838 56.135 cv
240.466 53.718 li
241.096 53.5596 241.608 52.9041 241.608 52.2538 cv
241.608 43.2449 li
229.696 46.6883 li
cp
.284794 .620722 .992004 .253178 cmyk
f
229.57 40.1523 mo
229.57 46.3164 li
219.834 46.3164 li
219.834 46.3164 218.688 47.2587 218.557 47.7751 cv
218.437 48.2496 218.796 49.2641 218.649 49.6441 cv
218.329 50.4647 216.688 50.5103 216.688 50.5103 cv
215.552 52.5057 213.949 55.0584 213.767 55.6055 cv
213.584 56.1525 214.359 57.3833 212.308 57.4289 cv
210.257 57.4745 204.965 55.2054 204.965 55.2054 cv
213.317 42.9887 li
213.317 40.0712 li
221.749 40.2906 li
221.302 40.4578 220.981 40.8804 220.981 41.3854 cv
220.981 44.3184 li
220.981 44.9686 221.508 45.4959 222.159 45.4959 cv
227.226 45.4959 li
227.877 45.4959 228.404 44.9686 228.404 44.3184 cv
228.404 41.3854 li
228.404 41.075 228.278 40.7972 228.082 40.5868 cv
229.57 40.1523 li
cp
.849027 .6177 .563592 .674403 cmyk
f
223.518 40.3244 mo
222.304 40.3244 li
222.254 40.6081 222.216 40.8965 222.216 41.1945 cv
222.216 42.0675 222.446 42.8818 222.841 43.593 cv
223.511 43.593 li
223.334 43.0816 223.219 42.5413 223.219 41.9695 cv
223.219 41.39 223.337 40.8423 223.518 40.3244 cv
cp
f
233.825 19.3214 mo
229.051 19.3214 li
229.051 16.2475 li
233.825 16.2475 li
233.825 19.3214 li
cp
.564294 .313085 .345434 .116823 cmyk
f
238.705 23.635 mo
219.333 23.635 li
219.333 18.7297 li
238.705 18.7297 li
238.705 23.635 li
cp
.684352 .464546 .433845 .323278 cmyk
f
246.946 23.7658 mo
255.121 24.3544 li
255.121 18.0103 li
246.946 18.5989 li
246.946 23.7658 li
cp
.804746 .568353 .507561 .522942 cmyk
f
240.331 23.9956 mo
249.877 23.9956 li
249.877 18.3304 li
240.331 18.3304 li
240.331 23.9956 li
cp
.684352 .464546 .433845 .323278 cmyk
f
167.437 49.7472 mo
166.188 50.1082 165.107 49.3486 165.024 48.0507 cv
164.836 29.3035 li
174.256 29.3035 207.805 29.3035 207.805 29.3035 cv
207.805 37.742 li
167.437 49.7472 li
cp
.284794 .620722 .992004 .253178 cmyk
f
303.767 34.9129 mo
299.38 34.9129 li
299.38 28.1425 li
303.767 28.1425 li
303.767 34.9129 li
cp
.804746 .568353 .507561 .522942 cmyk
f
217.778 23.7658 mo
207.818 24.3544 li
207.818 18.0103 li
217.778 18.5989 li
217.778 23.7658 li
cp
.684352 .464546 .433845 .323278 cmyk
f
223.099 27.5592 mo
220.417 27.5592 li
220.417 18.4681 li
223.099 18.4681 li
223.099 27.5592 li
cp
.804746 .568353 .507561 .522942 cmyk
f
243.309 15.8519 mo
243.309 15.3941 li
241.281 15.3941 li
241.281 15.8519 li
240.496 15.8519 li
240.496 15.3941 li
238.469 15.3941 li
238.469 15.8519 li
237.684 15.8519 li
237.684 15.3941 li
235.656 15.3941 li
235.656 15.8519 li
235.002 15.8519 li
235.002 17.6832 li
238.142 17.6832 li
238.142 26.7088 li
240.823 26.7088 li
240.823 17.6832 li
244.813 17.6832 li
244.813 15.8519 li
243.309 15.8519 li
cp
f
219.998 23.3984 mo
219.998 23.707 219.747 23.9571 219.439 23.9571 cv
217.898 23.9571 li
217.59 23.9571 217.34 23.707 217.34 23.3984 cv
217.34 18.5066 li
217.34 18.1981 217.59 17.9479 217.898 17.9479 cv
219.439 17.9479 li
219.747 17.9479 219.998 18.1981 219.998 18.5066 cv
219.998 23.3984 li
cp
f
218.184 25.8367 mo
218.184 24.8341 217.371 24.0214 216.369 24.0214 cv
215.366 24.0214 214.553 24.8341 214.553 25.8367 cv
214.553 26.8392 215.366 27.6519 216.369 27.6519 cv
217.371 27.6519 218.184 26.8392 218.184 25.8367 cv
cp
f
219.509 25.7631 mo
219.509 25.9663 219.344 26.131 219.141 26.131 cv
210.359 26.131 li
210.155 26.131 209.991 25.9663 209.991 25.7631 cv
209.991 25.7631 li
209.991 25.5599 210.155 25.3951 210.359 25.3951 cv
219.141 25.3951 li
219.344 25.3951 219.509 25.5599 219.509 25.7631 cv
219.509 25.7631 li
cp
f
227.195 28.8294 mo
227.195 37.6289 li
226.83 37.9659 226.597 38.4444 226.597 38.9807 cv
226.597 39.9991 227.423 40.8248 228.442 40.8248 cv
228.728 40.8248 228.997 40.7536 229.239 40.6367 cv
229.239 47.1047 li
241.998 43.4165 li
241.998 38.4453 li
242.052 38.4453 li
243.794 36.7033 li
243.794 28.8294 li
227.195 28.8294 li
cp
.684352 .464546 .433845 .323278 cmyk
f
228.442 39.9775 mo
227.891 39.9775 227.445 39.5312 227.445 38.9807 cv
227.445 38.4301 227.891 37.9839 228.442 37.9839 cv
228.992 37.9839 229.438 38.4301 229.438 38.9807 cv
229.438 39.5312 228.992 39.9775 228.442 39.9775 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
242.247 36.8376 mo
241.697 36.8376 241.251 36.3913 241.251 35.8407 cv
241.251 35.2902 241.697 34.8439 242.247 34.8439 cv
242.798 34.8439 243.244 35.2902 243.244 35.8407 cv
243.244 36.3913 242.798 36.8376 242.247 36.8376 cv
cp
f
225.445 27.4802 mo
223.943 27.4802 li
223.943 26.5971 li
225.445 26.5971 li
225.445 27.4802 li
cp
.684352 .464546 .433845 .323278 cmyk
f
228.158 27.4802 mo
226.656 27.4802 li
226.656 26.5971 li
228.158 26.5971 li
228.158 27.4802 li
cp
f
230.872 27.4802 mo
229.37 27.4802 li
229.37 26.5971 li
230.872 26.5971 li
230.872 27.4802 li
cp
f
233.586 27.4802 mo
232.084 27.4802 li
232.084 26.5971 li
233.586 26.5971 li
233.586 27.4802 li
cp
f
236.299 27.4802 mo
234.797 27.4802 li
234.797 26.5971 li
236.299 26.5971 li
236.299 27.4802 li
cp
f
247.645 28.7313 mo
247.645 36.8999 li
273.328 36.8999 li
273.328 28.7313 li
247.645 28.7313 li
cp
.804746 .568353 .507561 .522942 cmyk
f
250.441 36.2376 mo
248.528 36.2376 li
248.528 29.3936 li
250.441 29.3936 li
250.441 36.2376 li
cp
.684352 .464546 .433845 .323278 cmyk
f
253.164 36.2376 mo
251.251 36.2376 li
251.251 29.3936 li
253.164 29.3936 li
253.164 36.2376 li
cp
f
255.887 36.2376 mo
253.974 36.2376 li
253.974 29.3936 li
255.887 29.3936 li
255.887 36.2376 li
cp
f
258.61 36.2376 mo
256.697 36.2376 li
256.697 29.3936 li
258.61 29.3936 li
258.61 36.2376 li
cp
f
261.333 36.2376 mo
259.42 36.2376 li
259.42 29.3936 li
261.333 29.3936 li
261.333 36.2376 li
cp
f
264.056 36.2376 mo
262.142 36.2376 li
262.142 29.3936 li
264.056 29.3936 li
264.056 36.2376 li
cp
f
266.779 36.2376 mo
264.865 36.2376 li
264.865 29.3936 li
266.779 29.3936 li
266.779 36.2376 li
cp
f
269.502 36.2376 mo
267.588 36.2376 li
267.588 29.3936 li
269.502 29.3936 li
269.502 36.2376 li
cp
f
272.224 36.2376 mo
270.311 36.2376 li
270.311 29.3936 li
272.224 29.3936 li
272.224 36.2376 li
cp
f
292.231 27.4749 mo
292.231 27.0333 li
290.612 27.0333 li
290.612 27.4749 li
289.729 27.4749 li
289.729 27.0333 li
288.11 27.0333 li
288.11 27.4749 li
287.227 27.4749 li
287.227 27.0333 li
285.608 27.0333 li
285.608 27.4749 li
284.725 27.4749 li
284.725 27.0333 li
283.106 27.0333 li
283.106 27.4749 li
282.223 27.4749 li
282.223 27.0333 li
280.604 27.0333 li
280.604 27.4749 li
279.721 27.4749 li
279.721 27.0333 li
278.102 27.0333 li
278.102 27.4749 li
277.219 27.4749 li
277.219 27.0333 li
275.6 27.0333 li
275.6 27.4749 li
274.717 27.4749 li
274.717 27.0333 li
273.098 27.0333 li
273.098 27.4749 li
272.215 27.4749 li
272.215 27.0333 li
270.596 27.0333 li
270.596 27.4749 li
269.713 27.4749 li
269.713 27.0333 li
268.094 27.0333 li
268.094 27.4749 li
267.21 27.4749 li
267.21 27.0333 li
265.591 27.0333 li
265.591 27.4749 li
264.708 27.4749 li
264.708 27.0333 li
263.089 27.0333 li
263.089 27.4749 li
262.206 27.4749 li
262.206 27.0333 li
260.587 27.0333 li
260.587 27.4749 li
259.704 27.4749 li
259.704 27.0333 li
258.085 27.0333 li
258.085 27.4749 li
257.202 27.4749 li
257.202 27.0333 li
255.583 27.0333 li
255.583 27.4749 li
254.7 27.4749 li
254.7 27.0333 li
253.081 27.0333 li
253.081 27.4749 li
252.198 27.4749 li
252.198 27.0333 li
250.579 27.0333 li
250.579 27.4749 li
249.696 27.4749 li
249.696 27.0333 li
248.077 27.0333 li
248.077 27.4749 li
247.635 27.4749 li
247.635 28.8731 li
294.292 28.8731 li
294.292 27.4749 li
292.231 27.4749 li
cp
.564294 .313085 .345434 .116823 cmyk
f
274.579 28.7313 mo
274.579 36.4583 li
275.312 36.4583 li
275.312 36.7765 li
276.399 36.7765 li
276.399 36.4583 li
277.205 36.4583 li
277.205 36.7765 li
278.291 36.7765 li
278.291 36.4583 li
279.098 36.4583 li
279.098 36.7765 li
280.184 36.7765 li
280.184 36.4583 li
280.991 36.4583 li
280.991 36.7765 li
282.077 36.7765 li
282.077 36.4583 li
282.884 36.4583 li
282.884 36.7765 li
283.97 36.7765 li
283.97 36.4583 li
293.86 36.4583 li
293.86 28.7313 li
274.579 28.7313 li
cp
.804746 .568353 .507561 .522942 cmyk
f
276.761 29.1724 mo
277.287 29.1724 li
277.287 32.6946 li
276.761 32.6946 li
276.761 29.1724 li
cp
.684352 .464546 .433845 .323278 cmyk
f
275.214 32.6946 mo
275.214 29.1724 li
275.74 29.1724 li
275.74 32.6946 li
275.214 32.6946 li
cp
f
276.824 34.8393 mo
276.072 34.8393 275.462 34.5263 275.462 34.1402 cv
275.462 33.7541 276.072 33.4411 276.824 33.4411 cv
277.576 33.4411 278.185 33.7541 278.185 34.1402 cv
278.185 34.5263 277.576 34.8393 276.824 34.8393 cv
cp
f
278.835 32.6946 mo
278.308 32.6946 li
278.308 29.1724 li
278.835 29.1724 li
278.835 32.6946 li
cp
f
281.402 29.1724 mo
281.929 29.1724 li
281.929 32.6946 li
281.402 32.6946 li
281.402 29.1724 li
cp
f
279.855 29.1724 mo
280.382 29.1724 li
280.382 32.6946 li
279.855 32.6946 li
279.855 29.1724 li
cp
f
280.687 34.8393 mo
279.936 34.8393 279.326 34.5263 279.326 34.1402 cv
279.326 33.7541 279.936 33.4411 280.687 33.4411 cv
281.439 33.4411 282.049 33.7541 282.049 34.1402 cv
282.049 34.5263 281.439 34.8393 280.687 34.8393 cv
cp
f
290.685 29.1724 mo
291.212 29.1724 li
291.212 32.6946 li
290.685 32.6946 li
290.685 29.1724 li
cp
f
287.591 29.1724 mo
288.118 29.1724 li
288.118 32.6946 li
287.591 32.6946 li
287.591 29.1724 li
cp
f
284.497 29.1724 mo
285.023 29.1724 li
285.023 32.6946 li
284.497 32.6946 li
284.497 29.1724 li
cp
f
282.949 29.1724 mo
283.476 29.1724 li
283.476 32.6946 li
282.949 32.6946 li
282.949 29.1724 li
cp
f
283.778 34.8393 mo
283.026 34.8393 282.417 34.5263 282.417 34.1402 cv
282.417 33.7541 283.026 33.4411 283.778 33.4411 cv
284.53 33.4411 285.14 33.7541 285.14 34.1402 cv
285.14 34.5263 284.53 34.8393 283.778 34.8393 cv
cp
f
286.044 29.1724 mo
286.57 29.1724 li
286.57 32.6946 li
286.044 32.6946 li
286.044 29.1724 li
cp
f
287.458 34.8393 mo
286.706 34.8393 286.096 34.5263 286.096 34.1402 cv
286.096 33.7541 286.706 33.4411 287.458 33.4411 cv
288.21 33.4411 288.819 33.7541 288.819 34.1402 cv
288.819 34.5263 288.21 34.8393 287.458 34.8393 cv
cp
f
289.138 29.1724 mo
289.665 29.1724 li
289.665 32.6946 li
289.138 32.6946 li
289.138 29.1724 li
cp
f
290.549 34.8393 mo
289.797 34.8393 289.187 34.5263 289.187 34.1402 cv
289.187 33.7541 289.797 33.4411 290.549 33.4411 cv
291.301 33.4411 291.91 33.7541 291.91 34.1402 cv
291.91 34.5263 291.301 34.8393 290.549 34.8393 cv
cp
f
292.759 32.6946 mo
292.232 32.6946 li
292.232 29.1724 li
292.759 29.1724 li
292.759 32.6946 li
cp
f
274.911 35.7776 mo
273.218 35.7776 li
273.218 29.596 li
274.911 29.596 li
274.911 35.7776 li
cp
.849027 .6177 .563592 .674403 cmyk
f
307.436 38.6859 mo
306.274 38.6859 li
306.274 38.6859 306.274 38.3638 306.274 37.9664 cv
306.274 37.5689 305.747 37.2468 305.097 37.2468 cv
303.068 37.2468 li
302.418 37.2468 301.89 37.5689 301.89 37.9664 cv
301.89 38.3638 301.363 38.6859 300.713 38.6859 cv
293.52 38.6859 li
293.52 38.1169 li
294.896 38.1169 li
294.896 37.8293 li
298.955 37.8293 li
298.955 36.5575 li
294.896 36.5575 li
294.896 36.1424 li
284.421 36.1424 li
284.421 37.5314 li
283.595 37.5314 li
283.595 37.7488 li
282.513 37.7488 li
281.342 37.7488 li
281.342 39.2883 li
281.342 41.9321 li
281.902 41.9321 li
281.902 41.9321 282.38 39.2883 283.41 39.2883 cv
283.461 39.2883 283.529 39.2883 283.595 39.2883 cv
283.595 39.6726 li
283.595 40.8551 284.856 41.8138 286.411 41.8138 cv
292.343 41.8138 li
292.993 41.8138 293.52 41.5181 293.52 41.1534 cv
293.52 40.7887 294.048 40.4931 294.698 40.4931 cv
306.258 40.4931 li
306.909 40.4931 307.436 40.6354 307.436 40.811 cv
307.436 41.1289 li
309.203 41.1289 li
309.854 41.1289 310.381 40.6018 310.381 39.9515 cv
310.381 38.05 li
307.436 38.05 li
307.436 38.6859 li
cp
f
254.824 24.6814 mo
263.449 24.6814 li
263.449 17.6833 li
254.824 17.6833 li
254.824 24.6814 li
cp
.684352 .464546 .433845 .323278 cmyk
f
266.669 16.8448 mo
266.577 16.6833 266.467 16.4897 266.341 16.2693 cv
266.041 15.7428 265.284 15.7428 264.652 16.2693 cv
263.96 16.8448 li
262.643 16.8448 li
262.643 25.52 li
266.952 25.52 li
266.952 16.8448 li
266.669 16.8448 li
cp
.804746 .568353 .507561 .522942 cmyk
f
208.187 24.6814 mo
204.655 24.6814 li
204.655 17.6833 li
208.187 17.6833 li
208.187 24.6814 li
cp
f
230.186 29.4113 mo
240.902 29.4113 li
241.975 29.4113 242.845 30.2816 242.845 31.3551 cv
242.845 32.4286 241.975 33.2989 240.902 33.2989 cv
230.186 33.2989 li
229.112 33.2989 228.242 32.4286 228.242 31.3551 cv
228.242 30.2816 229.112 29.4113 230.186 29.4113 cv
cp
f
230.424 32.9413 mo
229.548 32.9413 228.838 32.2311 228.838 31.3551 cv
228.838 30.4791 229.548 29.7689 230.424 29.7689 cv
240.702 29.7689 li
241.578 29.7689 242.288 30.4791 242.288 31.3551 cv
242.288 32.2311 241.578 32.9413 240.702 32.9413 cv
230.424 32.9413 li
cp
.849027 .6177 .563592 .674403 cmyk
f
226.548 37.4737 mo
226.548 28.8294 li
207.194 28.8294 li
207.194 38.4453 li
207.194 38.4453 208.207 38.4453 209.457 38.4453 cv
210.706 38.4453 211.843 38.5925 212.627 39.5883 cv
213.535 40.7313 li
226.548 40.7313 li
226.548 40.4891 li
226.216 40.0731 226.009 39.5531 226.009 38.9806 cv
226.009 38.4322 226.206 37.9023 226.548 37.4737 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
208.2 26.9651 mo
208.2 28.2897 li
243.892 28.2897 li
243.892 26.9651 li
208.2 26.9651 li
cp
.564294 .313085 .345434 .116823 cmyk
f
86.3074 113.277 mo
85.4706 114.114 li
86.0785 120.048 87.364 125.221 88.3419 128.774 cv
94.3477 127.628 99.9178 126.066 99.9178 126.066 cv
99.9178 126.066 97.96 120.313 97.3236 112.28 cv
86.3074 113.277 li
cp
.284794 .620722 .992004 .253178 cmyk
f
93.9375 96.9762 mo
96.619 96.9762 li
96.619 85.2287 li
100.609 85.2287 li
100.609 83.3974 li
99.1044 83.3974 li
99.1044 82.9397 li
97.0768 82.9397 li
97.0768 83.3974 li
96.292 83.3974 li
96.292 82.9397 li
94.2645 82.9397 li
94.2645 83.3974 li
93.4797 83.3974 li
93.4797 82.9397 li
91.4522 82.9397 li
91.4522 83.3974 li
90.7981 83.3974 li
90.7981 85.2287 li
93.9375 85.2287 li
93.9375 96.9762 li
cp
.804746 .568353 .507561 .522942 cmyk
f
82.3682 90.5388 mo
90.472 90.5388 li
89.5458 91.7744 88.0831 92.5852 86.4201 92.5852 cv
84.757 92.5852 83.2944 91.7744 82.3682 90.5388 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
150.807 104.406 mo
154.6 104.406 li
154.6 102.916 li
150.807 102.916 li
150.807 104.406 li
cp
.804746 .568353 .507561 .522942 cmyk
f
154.696 95.854 mo
151.684 95.854 li
150.903 96.6351 li
150.903 99.7826 li
154.696 99.7826 li
154.696 95.854 li
cp
f
144.712 103.135 mo
160.887 103.135 li
160.887 99.7487 li
144.712 99.7487 li
144.712 103.135 li
cp
.849027 .6177 .563592 .674403 cmyk
f
99.0022 105.858 mo
104.42 105.858 li
104.42 96.9532 li
99.0022 96.9532 li
99.0022 105.858 li
cp
f
78.0995 110.125 mo
78.0496 110.409 78.0118 110.697 78.0118 110.995 cv
78.0118 111.868 78.2422 112.682 78.6368 113.394 cv
79.3071 113.394 li
79.1302 112.882 79.0146 112.342 79.0146 111.77 cv
79.0146 111.191 79.1325 110.643 79.3134 110.125 cv
78.0995 110.125 li
cp
f
47.3305 105.454 mo
59.6673 104.813 li
59.6673 99.6542 li
56.5435 99.6542 52.1757 99.6542 47.3305 99.6542 cv
47.3305 105.454 li
cp
.804746 .568353 .507561 .522942 cmyk
f
63.2462 108.093 mo
63.2462 99.6542 li
63.2462 99.6542 61.6897 99.6542 59.1347 99.6542 cv
59.1347 104.773 li
59.3059 104.764 li
59.9553 104.73 60.6695 105.196 60.9009 105.803 cv
61.197 106.58 li
61.4285 107.188 61.9811 107.773 62.4312 107.887 cv
63.2462 108.093 li
cp
.684352 .464546 .433845 .323278 cmyk
f
96.4788 110.462 mo
71.1663 110.462 li
63.9958 96.7325 li
99.5895 96.7325 li
96.4788 110.462 li
cp
.804746 .568353 .507561 .522942 cmyk
f
88.7377 86.6493 mo
88.7377 81.0243 li
83.9633 81.0243 li
83.9633 86.6493 li
88.7377 86.6493 li
cp
.849027 .6177 .563592 .674403 cmyk
f
139.012 85.7753 mo
63.0155 85.7753 li
63.0155 90.6805 li
139.012 90.6805 li
139.012 85.7753 li
cp
.804746 .568353 .507561 .522942 cmyk
f
74.2566 91.0027 mo
75.7972 91.0027 li
76.1057 91.0027 76.3558 90.7525 76.3558 90.444 cv
76.3558 85.5522 li
76.3558 85.2436 76.1057 84.9935 75.7972 84.9935 cv
74.2566 84.9935 li
73.9481 84.9935 73.6979 85.2436 73.6979 85.5522 cv
73.6979 90.444 li
73.6979 90.7525 73.9481 91.0027 74.2566 91.0027 cv
cp
f
73.8538 85.6445 mo
64.5059 85.0559 li
64.5059 91.4 li
73.8538 90.8114 li
73.8538 85.6445 li
cp
.684352 .464546 .433845 .323278 cmyk
f
99.6876 96.7325 mo
92.0951 96.7325 li
92.0951 96.3645 li
90.5933 96.3645 li
90.5933 96.7325 li
89.3814 96.7325 li
89.3814 96.3645 li
87.8796 96.3645 li
87.8796 96.7325 li
86.6677 96.7325 li
86.6677 96.3645 li
85.1659 96.3645 li
85.1659 96.7325 li
83.9541 96.7325 li
83.9541 96.3645 li
82.4523 96.3645 li
82.4523 96.7325 li
81.2404 96.7325 li
81.2404 96.3645 li
79.7386 96.3645 li
79.7386 96.7325 li
78.8947 96.7325 li
78.8947 85.5137 li
76.2131 85.5137 li
76.2131 96.7325 li
73.576 96.7325 li
73.7663 96.4949 73.8986 96.2119 73.95 95.8984 cv
74.9364 95.8984 li
75.1396 95.8984 75.3043 95.7337 75.3043 95.5304 cv
75.3043 95.3273 75.1396 95.1625 74.9364 95.1625 cv
73.9193 95.1625 li
73.7213 94.3745 73.0138 93.7888 72.1644 93.7888 cv
71.315 93.7888 70.6077 94.3745 70.4096 95.1625 cv
66.1545 95.1625 li
65.9513 95.1625 65.7866 95.3273 65.7866 95.5304 cv
65.7866 95.7337 65.9513 95.8984 66.1545 95.8984 cv
70.3789 95.8984 li
70.4304 96.2119 70.5627 96.4949 70.7529 96.7325 cv
63.9958 96.7325 li
63.9958 98.0571 li
99.6876 98.0571 li
99.6876 96.7325 li
cp
f
122.748 83.8904 mo
122.465 83.8904 li
122.373 83.7289 122.262 83.5353 122.137 83.3149 cv
121.836 82.7884 121.08 82.7884 120.448 83.3149 cv
119.756 83.8904 li
118.438 83.8904 li
118.438 92.5656 li
122.748 92.5656 li
122.748 83.8904 li
cp
f
146.765 81.4008 mo
134.041 82.5782 li
134.041 93.9113 li
146.765 95.0887 li
146.765 81.4008 li
cp
.804746 .568353 .507561 .522942 cmyk
f
125.865 82.9342 mo
122.748 83.8904 li
122.748 92.5656 li
125.865 93.2118 li
125.865 82.9342 li
cp
f
118.438 83.8904 mo
110.917 85.0559 li
110.917 91.4 li
118.438 92.5656 li
118.438 83.8904 li
cp
f
83.6227 81.5448 mo
89.0753 81.5448 li
89.3592 81.5448 89.5895 81.3146 89.5895 81.0306 cv
89.5895 79.4138 li
89.5895 79.1298 89.3592 78.8996 89.0753 78.8996 cv
83.6227 78.8996 li
83.3387 78.8996 83.1085 79.1298 83.1085 79.4138 cv
83.1085 81.0306 li
83.1085 81.3146 83.3387 81.5448 83.6227 81.5448 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
96.619 85.3759 mo
96.619 91.0412 li
105.673 91.0412 li
105.673 91.0225 li
110.917 91.4 li
110.917 85.0559 li
105.673 85.4334 li
105.673 85.3759 li
96.619 85.3759 li
cp
f
148.111 96.2173 mo
146.492 96.2173 li
146.492 96.6589 li
145.608 96.6589 li
145.608 96.2173 li
143.99 96.2173 li
143.99 96.6589 li
143.106 96.6589 li
143.106 96.2173 li
141.487 96.2173 li
141.487 96.6589 li
140.604 96.6589 li
140.604 96.2173 li
138.985 96.2173 li
138.985 96.6589 li
138.102 96.6589 li
138.102 96.2173 li
136.483 96.2173 li
136.483 96.6589 li
135.6 96.6589 li
135.6 96.2173 li
134.473 96.2173 li
134.562 96.0233 134.618 95.8119 134.618 95.5847 cv
134.618 82.9342 li
134.618 82.0873 133.932 81.4008 133.085 81.4008 cv
127.398 81.4008 li
126.552 81.4008 125.865 82.0873 125.865 82.9342 cv
125.865 95.5847 li
125.865 96.0037 126.035 96.3821 126.307 96.6589 cv
125.592 96.6589 li
125.592 96.2173 li
123.973 96.2173 li
123.973 96.6589 li
123.09 96.6589 li
123.09 96.2173 li
121.471 96.2173 li
121.471 96.6589 li
120.588 96.6589 li
120.588 96.2173 li
118.968 96.2173 li
118.968 96.6589 li
118.085 96.6589 li
118.085 96.2173 li
116.466 96.2173 li
116.466 96.6589 li
115.583 96.6589 li
115.583 96.2173 li
113.964 96.2173 li
113.964 96.6589 li
113.081 96.6589 li
113.081 96.2173 li
111.462 96.2173 li
111.462 96.6589 li
110.579 96.6589 li
110.579 96.2173 li
108.96 96.2173 li
108.96 96.6589 li
108.077 96.6589 li
108.077 96.2173 li
106.458 96.2173 li
106.458 96.6589 li
105.575 96.6589 li
105.575 96.2173 li
103.956 96.2173 li
103.956 96.6589 li
103.514 96.6589 li
103.514 98.0571 li
150.171 98.0571 li
150.171 96.6589 li
148.111 96.6589 li
148.111 96.2173 li
cp
f
97.794 113.146 mo
85.2949 114.278 li
85.0467 115.312 84.1217 116.084 83.011 116.084 cv
73.0207 116.084 li
73.0207 116.084 71.8754 117.026 71.7443 117.543 cv
71.6239 118.017 71.9833 119.032 71.8355 119.411 cv
71.5164 120.232 69.7449 124.826 69.5626 125.373 cv
69.3802 125.92 70.1552 127.151 68.1038 127.196 cv
66.0525 127.242 60.7608 124.973 60.7608 124.973 cv
69.1125 112.756 li
69.1125 110.224 li
68.4229 109.356 li
67.6386 108.36 66.5018 108.213 65.2524 108.213 cv
64.0029 108.213 62.99 108.213 62.99 108.213 cv
62.99 98.5967 li
82.3433 98.5967 li
82.3433 107.241 li
82.0013 107.67 81.8043 108.2 81.8043 108.748 cv
81.8043 109.321 82.0113 109.84 82.3433 110.257 cv
82.3433 110.499 li
76.9831 110.499 li
76.8549 110.685 76.777 110.908 76.777 111.153 cv
76.777 114.086 li
76.777 114.736 77.3041 115.263 77.9544 115.263 cv
83.0222 115.263 li
83.6726 115.263 84.1997 114.736 84.1997 114.086 cv
84.1997 111.153 li
84.1997 110.935 84.1224 110.744 84.0177 110.57 cv
83.1041 110.46 82.3932 109.691 82.3932 108.748 cv
82.3932 108.212 82.6258 107.733 82.9913 107.396 cv
82.9913 98.5967 li
99.5895 98.5967 li
99.5895 106.471 li
97.8475 108.213 li
97.794 108.213 li
97.794 113.146 li
cp
.849027 .6177 .563592 .674403 cmyk
f
67.0172 99.962 mo
67.0172 100.224 67.2294 100.436 67.4912 100.436 cv
78.7082 100.436 li
78.97 100.436 79.1822 100.224 79.1822 99.962 cv
79.1822 99.7003 78.97 99.488 78.7082 99.488 cv
67.4912 99.488 li
67.2294 99.488 67.0172 99.7003 67.0172 99.962 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
78.7082 102.332 mo
78.97 102.332 79.1822 102.12 79.1822 101.858 cv
79.1822 101.596 78.97 101.384 78.7082 101.384 cv
67.4912 101.384 li
67.2294 101.384 67.0172 101.596 67.0172 101.858 cv
67.0172 102.12 67.2294 102.332 67.4912 102.332 cv
78.7082 102.332 li
cp
f
85.2341 108.748 mo
85.2341 108.198 84.7878 107.751 84.2373 107.751 cv
83.6867 107.751 83.2405 108.198 83.2405 108.748 cv
83.2405 109.299 83.6867 109.745 84.2373 109.745 cv
84.7878 109.745 85.2341 109.299 85.2341 108.748 cv
cp
f
96.6974 103.066 mo
97.771 103.066 98.6412 102.196 98.6412 101.122 cv
98.6412 100.049 97.771 99.1787 96.6974 99.1787 cv
85.9817 99.1787 li
84.9082 99.1787 84.0379 100.049 84.0379 101.122 cv
84.0379 102.196 84.9082 103.066 85.9817 103.066 cv
96.6974 103.066 li
cp
.804746 .568353 .507561 .522942 cmyk
f
98.0431 106.605 mo
98.5937 106.605 99.04 106.159 99.04 105.608 cv
99.04 105.058 98.5937 104.611 98.0431 104.611 cv
97.4926 104.611 97.0463 105.058 97.0463 105.608 cv
97.0463 106.159 97.4926 106.605 98.0431 106.605 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
130.375 97.832 mo
149.656 97.832 li
149.656 105.559 li
139.766 105.559 li
139.766 105.877 li
138.679 105.877 li
138.679 105.559 li
137.873 105.559 li
137.873 105.877 li
136.787 105.877 li
136.787 105.559 li
135.98 105.559 li
135.98 105.877 li
134.894 105.877 li
134.894 105.559 li
134.087 105.559 li
134.087 105.877 li
133.001 105.877 li
133.001 105.559 li
132.194 105.559 li
132.194 105.877 li
131.108 105.877 li
131.108 105.559 li
130.375 105.559 li
130.375 104.878 li
129.124 104.878 li
129.124 106.001 li
128.065 106.001 li
128.065 106.504 li
127.575 106.504 li
127.575 106.856 li
126.283 106.856 li
126.283 106.504 li
125.578 106.504 li
125.578 106.856 li
124.286 106.856 li
124.286 106.504 li
123.581 106.504 li
123.581 106.856 li
122.289 106.856 li
122.289 106.504 li
121.584 106.504 li
121.584 106.856 li
120.292 106.856 li
120.292 106.504 li
119.588 106.504 li
119.588 106.856 li
118.296 106.856 li
118.296 106.504 li
117.591 106.504 li
117.591 106.856 li
116.299 106.856 li
116.299 106.504 li
115.594 106.504 li
115.594 106.856 li
114.302 106.856 li
114.302 106.504 li
113.597 106.504 li
113.597 106.856 li
112.305 106.856 li
112.305 106.504 li
111.601 106.504 li
111.601 106.856 li
110.309 106.856 li
110.309 106.504 li
109.604 106.504 li
109.604 106.856 li
108.312 106.856 li
108.312 106.504 li
107.607 106.504 li
107.607 106.856 li
106.315 106.856 li
106.315 106.504 li
104.671 106.504 li
104.671 106.001 li
103.441 106.001 li
103.441 97.832 li
129.124 97.832 li
130.375 97.832 li
cp
.804746 .568353 .507561 .522942 cmyk
f
106.584 99.4479 mo
104.932 99.4479 li
104.932 103.413 li
106.584 103.413 li
106.584 99.4479 li
cp
.720851 .673426 .586358 .790768 cmyk
f
109.228 99.4479 mo
107.576 99.4479 li
107.576 103.413 li
109.228 103.413 li
109.228 99.4479 li
cp
f
111.871 99.4479 mo
110.219 99.4479 li
110.219 103.413 li
111.871 103.413 li
111.871 99.4479 li
cp
f
114.515 99.4479 mo
112.863 99.4479 li
112.863 103.413 li
114.515 103.413 li
114.515 99.4479 li
cp
f
117.159 99.4479 mo
115.506 99.4479 li
115.506 103.413 li
117.159 103.413 li
117.159 99.4479 li
cp
f
119.802 99.4479 mo
118.15 99.4479 li
118.15 103.413 li
119.802 103.413 li
119.802 99.4479 li
cp
f
122.446 99.4479 mo
120.794 99.4479 li
120.794 103.413 li
122.446 103.413 li
122.446 99.4479 li
cp
f
125.089 99.4479 mo
123.437 99.4479 li
123.437 103.413 li
125.089 103.413 li
125.089 99.4479 li
cp
f
127.733 99.4479 mo
126.081 99.4479 li
126.081 103.413 li
127.733 103.413 li
127.733 99.4479 li
cp
f
148.028 102.462 mo
148.555 102.462 li
148.555 98.9398 li
148.028 98.9398 li
148.028 102.462 li
cp
.849027 .6177 .563592 .674403 cmyk
f
146.481 102.462 mo
147.008 102.462 li
147.008 98.9398 li
146.481 98.9398 li
146.481 102.462 li
cp
f
146.344 103.209 mo
145.593 103.209 144.983 103.521 144.983 103.908 cv
144.983 104.294 145.593 104.607 146.344 104.607 cv
147.096 104.607 147.706 104.294 147.706 103.908 cv
147.706 103.521 147.096 103.209 146.344 103.209 cv
cp
f
144.934 102.462 mo
145.46 102.462 li
145.46 98.9398 li
144.934 98.9398 li
144.934 102.462 li
cp
f
143.387 102.462 mo
143.913 102.462 li
143.913 98.9398 li
143.387 98.9398 li
143.387 102.462 li
cp
f
143.254 103.209 mo
142.502 103.209 141.892 103.521 141.892 103.908 cv
141.892 104.294 142.502 104.607 143.254 104.607 cv
144.005 104.607 144.615 104.294 144.615 103.908 cv
144.615 103.521 144.005 103.209 143.254 103.209 cv
cp
f
141.839 102.462 mo
142.366 102.462 li
142.366 98.9398 li
141.839 98.9398 li
141.839 102.462 li
cp
f
140.292 102.462 mo
140.819 102.462 li
140.819 98.9398 li
140.292 98.9398 li
140.292 102.462 li
cp
f
138.745 102.462 mo
139.272 102.462 li
139.272 98.9398 li
138.745 98.9398 li
138.745 102.462 li
cp
f
138.213 103.908 mo
138.213 104.294 138.822 104.607 139.574 104.607 cv
140.326 104.607 140.936 104.294 140.936 103.908 cv
140.936 103.521 140.326 103.209 139.574 103.209 cv
138.822 103.209 138.213 103.521 138.213 103.908 cv
cp
f
137.198 102.462 mo
137.725 102.462 li
137.725 98.9398 li
137.198 98.9398 li
137.198 102.462 li
cp
f
135.651 102.462 mo
136.178 102.462 li
136.178 98.9398 li
135.651 98.9398 li
135.651 102.462 li
cp
f
135.122 103.908 mo
135.122 104.294 135.731 104.607 136.483 104.607 cv
137.235 104.607 137.845 104.294 137.845 103.908 cv
137.845 103.521 137.235 103.209 136.483 103.209 cv
135.731 103.209 135.122 103.521 135.122 103.908 cv
cp
f
134.104 102.462 mo
134.63 102.462 li
134.63 98.9398 li
134.104 98.9398 li
134.104 102.462 li
cp
f
132.62 103.209 mo
131.868 103.209 131.258 103.521 131.258 103.908 cv
131.258 104.294 131.868 104.607 132.62 104.607 cv
133.372 104.607 133.981 104.294 133.981 103.908 cv
133.981 103.521 133.372 103.209 132.62 103.209 cv
cp
f
132.557 102.462 mo
133.083 102.462 li
133.083 98.9398 li
132.557 98.9398 li
132.557 102.462 li
cp
f
131.009 102.462 mo
131.536 102.462 li
131.536 98.9398 li
131.009 98.9398 li
131.009 102.462 li
cp
f
96.4981 99.5363 mo
86.2199 99.5363 li
85.3438 99.5363 84.6337 100.246 84.6337 101.122 cv
84.6337 101.998 85.3438 102.709 86.2199 102.709 cv
96.4981 102.709 li
97.3741 102.709 98.0842 101.998 98.0842 101.122 cv
98.0842 100.246 97.3741 99.5363 96.4981 99.5363 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
183.119 98.4087 mo
159.324 98.4087 li
159.324 104.182 li
183.119 104.182 li
183.769 104.182 184.296 103.654 184.296 103.004 cv
184.296 99.5861 li
184.296 98.9358 183.769 98.4087 183.119 98.4087 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
16.1194 99.6542 mo
22.5201 99.6542 36.5028 99.6542 48.0506 99.6542 cv
48.0506 105.494 li
43.9798 105.705 li
43.3304 105.739 42.6371 106.267 42.4315 106.883 cv
41.5455 109.542 li
41.3399 110.159 40.646 110.663 39.9958 110.668 cv
33.7716 110.72 li
33.1213 110.725 32.203 111.083 31.7204 111.519 cv
23.1872 119.228 li
22.7046 119.664 21.8012 120.144 21.1565 120.229 cv
18.9911 120.515 14.943 120.63 14.943 118.767 cv
14.943 100.832 li
14.943 100.181 15.4691 99.6542 16.1194 99.6542 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
15.5652 101.441 mo
15.5652 101.716 15.7873 101.938 16.0615 101.938 cv
39.8133 101.938 li
40.0874 101.938 40.3096 101.716 40.3096 101.441 cv
40.3096 101.167 40.0874 100.945 39.8133 100.945 cv
16.0615 100.945 li
15.7873 100.945 15.5652 101.167 15.5652 101.441 cv
cp
.313878 .658839 1 .346471 cmyk
f
15.4943 108 mo
15.4943 108.333 15.764 108.603 16.0969 108.603 cv
23.5415 108.603 li
23.8744 108.603 24.1442 108.333 24.1442 108 cv
24.1442 107.667 23.8744 107.397 23.5415 107.397 cv
16.0969 107.397 li
15.764 107.397 15.4943 107.667 15.4943 108 cv
cp
f
15.4943 111.261 mo
15.4943 111.594 15.764 111.864 16.0969 111.864 cv
21.0245 111.864 li
21.3573 111.864 21.6272 111.594 21.6272 111.261 cv
21.6272 110.928 21.3573 110.659 21.0245 110.659 cv
16.0969 110.659 li
15.764 110.659 15.4943 110.928 15.4943 111.261 cv
cp
f
15.4943 114.097 mo
15.4943 114.43 15.764 114.7 16.0969 114.7 cv
18.6848 114.7 li
19.0176 114.7 19.2874 114.43 19.2874 114.097 cv
19.2874 113.765 19.0176 113.495 18.6848 113.495 cv
16.0969 113.495 li
15.764 113.495 15.4943 113.765 15.4943 114.097 cv
cp
f
64.8577 84.7289 mo
61.3259 84.7289 li
61.3259 91.727 li
64.8577 91.727 li
64.8577 84.7289 li
cp
.804746 .568353 .507561 .522942 cmyk
f
259.374 305.224 mo
259.374 306.714 li
315.161 306.714 li
315.161 305.224 li
259.374 305.224 li
cp
.684352 .464546 .433845 .323278 cmyk
f
232.829 316.593 mo
228.05 321.372 li
226.807 321.372 li
226.807 324.542 li
241.842 324.542 li
241.842 316.593 li
232.829 316.593 li
cp
.804746 .568353 .507561 .522942 cmyk
f
226.039 319.618 mo
225.326 321.113 224.983 322.638 225.009 324.007 cv
225.427 324.226 li
225.501 322.902 225.869 321.471 226.602 320.076 cv
226.626 320.03 226.653 319.988 226.678 319.943 cv
226.459 319.845 226.243 319.742 226.039 319.618 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
221.888 317.501 mo
221.679 317.457 221.463 317.429 221.24 317.429 cv
219.438 317.429 217.977 318.89 217.977 320.691 cv
217.977 321.476 218.26 322.19 218.723 322.75 cv
219.122 322.75 li
218.844 322.275 218.669 321.734 218.669 321.142 cv
218.669 319.341 220.13 317.88 221.932 317.88 cv
221.95 317.88 221.967 317.886 221.985 317.886 cv
221.947 317.76 221.918 317.63 221.888 317.501 cv
cp
f
209.058 313.867 mo
209.058 320.088 li
217.006 320.088 li
217.006 320.088 217.006 319.633 217.006 319.073 cv
217.006 318.512 218.06 318.057 219.361 318.057 cv
223.109 318.057 li
224.41 318.057 225.464 318.854 225.464 319.837 cv
225.464 320.412 li
222.113 323.764 li
215.464 323.764 li
214.766 323.066 li
214.634 323.297 214.475 323.512 214.308 323.721 cv
215.524 324.936 li
222.173 324.936 li
225.493 321.616 li
228.223 321.616 li
233.002 316.838 li
242.859 316.838 li
242.859 316.258 li
253.056 316.258 li
255.446 313.867 li
209.058 313.867 li
cp
.684352 .464546 .433845 .323278 cmyk
f
220.15 311.892 mo
217.538 311.892 li
217.538 308.875 li
220.15 308.875 li
220.15 311.892 li
cp
.849027 .6177 .563592 .674403 cmyk
f
243.726 312.173 mo
228.106 312.173 li
228.106 309.311 li
243.726 309.311 li
243.726 312.173 li
cp
.564294 .313085 .345434 .116823 cmyk
f
204.623 312.878 mo
204.623 314.761 li
204.623 318.028 li
204.623 319.911 li
209.165 319.911 li
209.165 312.878 li
204.623 312.878 li
cp
.684352 .464546 .433845 .323278 cmyk
f
319.81 318.124 mo
312.158 318.299 li
312.158 316.455 li
315.2 316.455 li
319.81 318.124 li
cp
f
312.718 316.639 mo
305.752 316.639 li
305.752 315.461 li
312.718 315.461 li
312.718 316.639 li
cp
.849027 .6177 .563592 .674403 cmyk
f
305.678 320.858 mo
305.678 320.025 li
310.437 320.025 li
310.437 320.025 310.437 320.398 310.437 320.859 cv
310.437 321.319 309.383 321.693 308.082 321.693 cv
308.033 321.693 li
306.733 321.693 305.678 321.319 305.678 320.858 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
321.664 320.134 mo
312.245 320.134 li
312.245 317.828 li
321.664 317.828 li
321.664 320.134 li
cp
.849027 .6177 .563592 .674403 cmyk
f
324.436 320.282 mo
321.394 320.282 li
321.394 316.749 li
324.436 316.749 li
324.436 320.282 li
cp
.804746 .568353 .507561 .522942 cmyk
f
326.012 320.036 mo
324.295 320.036 li
324.295 317.73 li
326.012 317.73 li
326.012 320.036 li
cp
.849027 .6177 .563592 .674403 cmyk
f
328.716 320.767 mo
325.773 320.767 li
325.773 317.186 li
328.716 317.186 li
328.716 320.767 li
cp
.804746 .568353 .507561 .522942 cmyk
f
329.467 321.356 mo
328.633 321.356 li
328.633 316.597 li
328.633 316.597 329.007 316.597 329.467 316.597 cv
329.928 316.597 330.301 317.652 330.301 318.952 cv
330.301 319.001 li
330.301 320.302 329.928 321.356 329.467 321.356 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
313.896 315.501 mo
305.408 315.501 li
303.789 314.275 li
313.896 314.275 li
313.896 315.501 li
cp
.804746 .568353 .507561 .522942 cmyk
f
340.97 310.496 mo
337.064 310.496 li
337.064 308.211 li
340.97 308.211 li
340.97 310.496 li
cp
.849027 .6177 .563592 .674403 cmyk
f
238.563 296.554 mo
232.16 296.554 li
232.16 291.843 li
238.563 291.843 li
238.563 296.554 li
cp
.564294 .313085 .345434 .116823 cmyk
f
248.53 301.446 mo
260.613 303.017 li
260.613 294.709 li
248.53 296.279 li
248.53 301.446 li
cp
.684352 .464546 .433845 .323278 cmyk
f
221.411 301.446 mo
213.236 302.035 li
213.236 295.691 li
221.411 296.279 li
221.411 301.446 li
cp
f
260.493 294.525 mo
260.493 303.201 li
270.062 303.201 li
270.062 294.525 li
260.493 294.525 li
cp
.564294 .313085 .345434 .116823 cmyk
f
226.208 305.24 mo
223.527 305.24 li
223.527 296.149 li
226.208 296.149 li
226.208 305.24 li
cp
.804746 .568353 .507561 .522942 cmyk
f
246.545 301.315 mo
225.613 301.315 li
225.613 296.41 li
246.545 296.41 li
246.545 301.315 li
cp
f
223.94 301.079 mo
223.94 301.388 223.69 301.638 223.381 301.638 cv
221.841 301.638 li
221.532 301.638 221.282 301.388 221.282 301.079 cv
221.282 296.187 li
221.282 295.879 221.532 295.628 221.841 295.628 cv
223.381 295.628 li
223.69 295.628 223.94 295.879 223.94 296.187 cv
223.94 301.079 li
cp
.564294 .313085 .345434 .116823 cmyk
f
238.931 292.354 mo
231.645 292.354 li
231.645 290.094 li
238.931 290.094 li
238.931 292.354 li
cp
f
178.302 316.132 mo
174.763 316.132 li
174.763 314.43 li
178.302 314.43 li
178.302 316.132 li
cp
.804746 .568353 .507561 .522942 cmyk
f
178.574 321.168 mo
175.035 321.168 li
175.035 319.466 li
178.574 319.466 li
178.574 321.168 li
cp
f
178.71 326.067 mo
175.171 326.067 li
175.171 324.366 li
178.71 324.366 li
178.71 326.067 li
cp
f
186.455 327.317 mo
178.841 327.317 li
178.841 328.044 li
179.124 328.044 li
179.124 328.589 li
179.891 328.589 li
179.891 328.044 li
180.658 328.044 li
180.658 328.589 li
181.426 328.589 li
181.426 328.044 li
182.193 328.044 li
182.193 328.589 li
182.961 328.589 li
182.961 328.044 li
183.728 328.044 li
183.728 328.589 li
184.496 328.589 li
184.496 328.044 li
185.263 328.044 li
185.263 328.589 li
186.031 328.589 li
186.031 328.044 li
186.455 328.044 li
186.455 327.317 li
cp
.849027 .6177 .563592 .674403 cmyk
f
192.003 310.872 mo
188.763 310.872 li
188.763 309.934 li
189.816 309.959 190.902 309.96 192.003 309.929 cv
192.003 310.872 li
cp
183.474 309.621 mo
184.473 309.714 185.562 309.797 186.714 309.856 cv
186.714 310.872 li
183.474 310.872 li
183.474 309.621 li
cp
200.698 308.846 mo
200.698 307.563 200.698 306.132 200.698 306.132 cv
177.603 305.135 li
177.603 308.846 li
177.603 308.846 179.086 309.125 181.425 309.404 cv
181.425 310.872 li
177.103 310.872 li
177.103 313.05 li
195.069 313.05 li
194.388 310.872 li
194.052 310.872 li
194.052 309.832 li
196.31 309.682 198.579 309.379 200.698 308.846 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
201.7 317.362 mo
199.641 318.76 li
196.73 318.76 li
194.671 317.362 li
194.671 315.385 li
196.73 313.987 li
199.641 313.987 li
201.7 315.385 li
201.7 317.362 li
cp
186.128 323.822 mo
186.128 324.46 185.61 324.978 184.971 324.978 cv
184.332 324.978 183.814 324.46 183.814 323.822 cv
183.814 318.173 li
183.814 317.534 184.332 317.016 184.971 317.016 cv
185.61 317.016 186.128 317.534 186.128 318.173 cv
186.128 323.822 li
cp
180.718 318.786 mo
180.285 318.786 179.935 318.435 179.935 318.003 cv
179.935 317.571 180.285 317.22 180.718 317.22 cv
181.15 317.22 181.5 317.571 181.5 318.003 cv
181.5 318.435 181.15 318.786 180.718 318.786 cv
cp
180.786 323.889 mo
180.429 323.889 180.139 323.6 180.139 323.243 cv
180.139 322.886 180.429 322.596 180.786 322.596 cv
181.143 322.596 181.432 322.886 181.432 323.243 cv
181.432 323.6 181.143 323.889 180.786 323.889 cv
cp
204.907 315.08 mo
204.907 312.865 li
176.941 312.865 li
178.642 327.496 li
191.504 327.496 li
191.504 320.12 li
204.907 320.12 li
204.907 317.296 li
207.51 317.296 li
207.51 315.08 li
204.907 315.08 li
cp
.804746 .568353 .507561 .522942 cmyk
f
315.161 304.911 mo
223.527 304.911 li
223.527 306.186 li
315.161 306.186 li
315.161 304.911 li
cp
.564294 .313085 .345434 .116823 cmyk
f
227.332 305.366 mo
226.525 305.366 li
226.525 304.499 li
227.332 304.499 li
227.332 305.366 li
cp
f
228.857 305.366 mo
228.05 305.366 li
228.05 304.499 li
228.857 304.499 li
228.857 305.366 li
cp
f
230.382 305.366 mo
229.575 305.366 li
229.575 304.499 li
230.382 304.499 li
230.382 305.366 li
cp
f
231.907 305.366 mo
231.1 305.366 li
231.1 304.499 li
231.907 304.499 li
231.907 305.366 li
cp
f
233.433 305.366 mo
232.625 305.366 li
232.625 304.499 li
233.433 304.499 li
233.433 305.366 li
cp
f
234.958 305.366 mo
234.15 305.366 li
234.15 304.499 li
234.958 304.499 li
234.958 305.366 li
cp
f
236.483 305.366 mo
235.675 305.366 li
235.675 304.499 li
236.483 304.499 li
236.483 305.366 li
cp
f
238.008 305.366 mo
237.201 305.366 li
237.201 304.499 li
238.008 304.499 li
238.008 305.366 li
cp
f
239.533 305.366 mo
238.726 305.366 li
238.726 304.499 li
239.533 304.499 li
239.533 305.366 li
cp
f
241.058 305.366 mo
240.251 305.366 li
240.251 304.499 li
241.058 304.499 li
241.058 305.366 li
cp
f
242.583 305.366 mo
241.776 305.366 li
241.776 304.499 li
242.583 304.499 li
242.583 305.366 li
cp
f
244.108 305.366 mo
243.301 305.366 li
243.301 304.499 li
244.108 304.499 li
244.108 305.366 li
cp
f
245.634 305.366 mo
244.826 305.366 li
244.826 304.499 li
245.634 304.499 li
245.634 305.366 li
cp
f
247.159 305.366 mo
246.351 305.366 li
246.351 304.499 li
247.159 304.499 li
247.159 305.366 li
cp
f
248.684 305.366 mo
247.876 305.366 li
247.876 304.499 li
248.684 304.499 li
248.684 305.366 li
cp
f
250.209 305.366 mo
249.402 305.366 li
249.402 304.499 li
250.209 304.499 li
250.209 305.366 li
cp
f
251.734 305.366 mo
250.927 305.366 li
250.927 304.499 li
251.734 304.499 li
251.734 305.366 li
cp
f
253.259 305.366 mo
252.452 305.366 li
252.452 304.499 li
253.259 304.499 li
253.259 305.366 li
cp
f
254.784 305.366 mo
253.977 305.366 li
253.977 304.499 li
254.784 304.499 li
254.784 305.366 li
cp
f
256.309 305.366 mo
255.502 305.366 li
255.502 304.499 li
256.309 304.499 li
256.309 305.366 li
cp
f
257.835 305.366 mo
257.027 305.366 li
257.027 304.499 li
257.835 304.499 li
257.835 305.366 li
cp
f
259.36 305.366 mo
258.552 305.366 li
258.552 304.499 li
259.36 304.499 li
259.36 305.366 li
cp
f
260.885 305.366 mo
260.077 305.366 li
260.077 304.499 li
260.885 304.499 li
260.885 305.366 li
cp
f
262.41 305.366 mo
261.603 305.366 li
261.603 304.499 li
262.41 304.499 li
262.41 305.366 li
cp
f
263.935 305.366 mo
263.128 305.366 li
263.128 304.499 li
263.935 304.499 li
263.935 305.366 li
cp
f
265.46 305.366 mo
264.653 305.366 li
264.653 304.499 li
265.46 304.499 li
265.46 305.366 li
cp
f
266.985 305.366 mo
266.178 305.366 li
266.178 304.499 li
266.985 304.499 li
266.985 305.366 li
cp
f
268.51 305.366 mo
267.703 305.366 li
267.703 304.499 li
268.51 304.499 li
268.51 305.366 li
cp
f
270.036 305.366 mo
269.228 305.366 li
269.228 304.499 li
270.036 304.499 li
270.036 305.366 li
cp
f
271.561 305.366 mo
270.753 305.366 li
270.753 304.499 li
271.561 304.499 li
271.561 305.366 li
cp
f
273.086 305.366 mo
272.278 305.366 li
272.278 304.499 li
273.086 304.499 li
273.086 305.366 li
cp
f
274.611 305.366 mo
273.803 305.366 li
273.803 304.499 li
274.611 304.499 li
274.611 305.366 li
cp
f
276.136 305.366 mo
275.329 305.366 li
275.329 304.499 li
276.136 304.499 li
276.136 305.366 li
cp
f
277.661 305.366 mo
276.854 305.366 li
276.854 304.499 li
277.661 304.499 li
277.661 305.366 li
cp
f
279.186 305.366 mo
278.379 305.366 li
278.379 304.499 li
279.186 304.499 li
279.186 305.366 li
cp
f
280.712 305.366 mo
279.904 305.366 li
279.904 304.499 li
280.712 304.499 li
280.712 305.366 li
cp
f
282.237 305.366 mo
281.429 305.366 li
281.429 304.499 li
282.237 304.499 li
282.237 305.366 li
cp
f
283.762 305.366 mo
282.954 305.366 li
282.954 304.499 li
283.762 304.499 li
283.762 305.366 li
cp
f
285.287 305.366 mo
284.479 305.366 li
284.479 304.499 li
285.287 304.499 li
285.287 305.366 li
cp
f
286.812 305.366 mo
286.005 305.366 li
286.005 304.499 li
286.812 304.499 li
286.812 305.366 li
cp
f
288.337 305.366 mo
287.53 305.366 li
287.53 304.499 li
288.337 304.499 li
288.337 305.366 li
cp
f
289.862 305.366 mo
289.055 305.366 li
289.055 304.499 li
289.862 304.499 li
289.862 305.366 li
cp
f
291.387 305.366 mo
290.58 305.366 li
290.58 304.499 li
291.387 304.499 li
291.387 305.366 li
cp
f
292.913 305.366 mo
292.105 305.366 li
292.105 304.499 li
292.913 304.499 li
292.913 305.366 li
cp
f
294.438 305.366 mo
293.63 305.366 li
293.63 304.499 li
294.438 304.499 li
294.438 305.366 li
cp
f
295.963 305.366 mo
295.155 305.366 li
295.155 304.499 li
295.963 304.499 li
295.963 305.366 li
cp
f
297.488 305.366 mo
296.68 305.366 li
296.68 304.499 li
297.488 304.499 li
297.488 305.366 li
cp
f
299.013 305.366 mo
298.206 305.366 li
298.206 304.499 li
299.013 304.499 li
299.013 305.366 li
cp
f
300.538 305.366 mo
299.731 305.366 li
299.731 304.499 li
300.538 304.499 li
300.538 305.366 li
cp
f
302.063 305.366 mo
301.256 305.366 li
301.256 304.499 li
302.063 304.499 li
302.063 305.366 li
cp
f
303.588 305.366 mo
302.781 305.366 li
302.781 304.499 li
303.588 304.499 li
303.588 305.366 li
cp
f
305.113 305.366 mo
304.306 305.366 li
304.306 304.499 li
305.113 304.499 li
305.113 305.366 li
cp
f
306.639 305.366 mo
305.831 305.366 li
305.831 304.499 li
306.639 304.499 li
306.639 305.366 li
cp
f
308.164 305.366 mo
307.356 305.366 li
307.356 304.499 li
308.164 304.499 li
308.164 305.366 li
cp
f
309.689 305.366 mo
308.882 305.366 li
308.882 304.499 li
309.689 304.499 li
309.689 305.366 li
cp
f
311.214 305.366 mo
310.407 305.366 li
310.407 304.499 li
311.214 304.499 li
311.214 305.366 li
cp
f
229.096 313.459 mo
222.994 313.459 li
222.994 308.035 li
229.096 308.035 li
229.096 313.459 li
cp
.804746 .568353 .507561 .522942 cmyk
f
248.757 313.459 mo
242.656 313.459 li
242.656 308.035 li
248.757 308.035 li
248.757 313.459 li
cp
f
252.532 312.139 mo
221.329 312.139 li
221.329 314.172 li
252.532 314.172 li
252.532 312.139 li
cp
f
225.179 313.459 mo
219.905 313.459 li
219.905 308.411 li
225.179 308.411 li
225.179 313.459 li
cp
f
216.967 319.706 mo
207.4 319.706 li
207.4 319.706 201.75 329.123 201.223 334.923 cv
201.029 337.062 209.665 337.141 209.811 334.999 cv
210.052 331.456 211.178 331.015 211.368 330.685 cv
211.482 330.488 211.529 330.263 211.468 330.027 cv
210.882 327.753 212.975 326.898 212.975 326.185 cv
212.975 325.939 213.358 324.103 214.775 324.103 cv
216.967 324.103 li
216.967 319.706 li
cp
.284794 .620722 .992004 .253178 cmyk
f
224.213 314.1 mo
209.752 314.1 li
215.198 312.371 li
224.213 312.371 li
224.213 314.1 li
cp
.804746 .568353 .507561 .522942 cmyk
f
226.291 311.142 mo
226.291 307.614 li
226.291 306.99 226.702 306.483 227.21 306.483 cv
245.076 306.483 li
245.584 306.483 245.996 306.99 245.996 307.614 cv
245.996 311.142 li
248.757 311.142 li
248.757 307.152 li
248.757 306.501 248.23 305.974 247.58 305.974 cv
224.706 305.974 li
224.056 305.974 223.529 306.501 223.529 307.152 cv
223.529 311.142 li
226.291 311.142 li
cp
f
255.82 313.494 mo
256.295 313.019 li
226.917 313.019 li
226.917 312.867 li
216.191 312.867 li
216.191 312.931 li
209.058 312.931 li
209.058 313.494 li
255.82 313.494 li
cp
f
337.768 310.752 mo
314.772 310.752 li
314.772 307.955 li
337.768 307.955 li
337.768 310.752 li
cp
f
380.718 312.04 mo
380.718 312.691 380.191 313.218 379.541 313.218 cv
341.674 313.218 li
341.023 313.218 340.496 312.691 340.496 311.79 cv
340.496 306.751 li
340.496 306.35 341.023 305.823 341.674 305.823 cv
379.541 305.823 li
380.191 305.823 380.718 306.35 380.718 307.001 cv
380.718 312.04 li
cp
f
315.161 306.572 mo
259.619 306.572 li
259.619 314.427 li
315.161 314.427 li
315.161 306.572 li
cp
.684352 .464546 .433845 .323278 cmyk
f
300.514 307.278 mo
306.362 307.278 li
306.57 307.278 306.739 307.447 306.739 307.655 cv
306.739 307.863 306.57 308.032 306.362 308.032 cv
300.514 308.032 li
300.306 308.032 300.137 307.863 300.137 307.655 cv
300.137 307.447 300.306 307.278 300.514 307.278 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
311.16 309.475 mo
311.782 309.475 312.286 309.979 312.286 310.601 cv
312.286 311.222 311.782 311.726 311.16 311.726 cv
306.723 311.726 li
306.102 311.726 305.598 311.222 305.598 310.601 cv
305.598 309.979 306.102 309.475 306.723 309.475 cv
311.16 309.475 li
cp
f
304.44 309.315 mo
304.44 311.823 li
304.44 312.089 304.224 312.305 303.958 312.305 cv
303.691 312.305 303.476 312.089 303.476 311.823 cv
303.476 309.315 li
303.476 309.048 303.691 308.832 303.958 308.832 cv
304.224 308.832 304.44 309.048 304.44 309.315 cv
cp
f
302.897 309.315 mo
302.897 311.823 li
302.897 312.089 302.681 312.305 302.415 312.305 cv
302.148 312.305 301.932 312.089 301.932 311.823 cv
301.932 309.315 li
301.932 309.048 302.148 308.832 302.415 308.832 cv
302.681 308.832 302.897 309.048 302.897 309.315 cv
cp
f
301.353 309.315 mo
301.353 311.823 li
301.353 312.089 301.138 312.305 300.871 312.305 cv
300.605 312.305 300.389 312.089 300.389 311.823 cv
300.389 309.315 li
300.389 309.048 300.605 308.832 300.871 308.832 cv
301.138 308.832 301.353 309.048 301.353 309.315 cv
cp
f
292.78 307.278 mo
298.628 307.278 li
298.836 307.278 299.005 307.447 299.005 307.655 cv
299.005 307.863 298.836 308.032 298.628 308.032 cv
292.78 308.032 li
292.572 308.032 292.403 307.863 292.403 307.655 cv
292.403 307.447 292.572 307.278 292.78 307.278 cv
cp
f
298.267 309.315 mo
298.267 311.823 li
298.267 312.089 298.051 312.305 297.785 312.305 cv
297.518 312.305 297.302 312.089 297.302 311.823 cv
297.302 309.315 li
297.302 309.048 297.518 308.832 297.785 308.832 cv
298.051 308.832 298.267 309.048 298.267 309.315 cv
cp
f
296.723 309.315 mo
296.723 311.823 li
296.723 312.089 296.508 312.305 296.241 312.305 cv
295.975 312.305 295.759 312.089 295.759 311.823 cv
295.759 309.315 li
295.759 309.048 295.975 308.832 296.241 308.832 cv
296.508 308.832 296.723 309.048 296.723 309.315 cv
cp
f
295.18 309.315 mo
295.18 311.823 li
295.18 312.089 294.964 312.305 294.698 312.305 cv
294.431 312.305 294.215 312.089 294.215 311.823 cv
294.215 309.315 li
294.215 309.048 294.431 308.832 294.698 308.832 cv
294.964 308.832 295.18 309.048 295.18 309.315 cv
cp
f
293.637 309.315 mo
293.637 311.823 li
293.637 312.089 293.421 312.305 293.154 312.305 cv
292.888 312.305 292.672 312.089 292.672 311.823 cv
292.672 309.315 li
292.672 309.048 292.888 308.832 293.154 308.832 cv
293.421 308.832 293.637 309.048 293.637 309.315 cv
cp
f
285.046 307.278 mo
290.894 307.278 li
291.102 307.278 291.271 307.447 291.271 307.655 cv
291.271 307.863 291.102 308.032 290.894 308.032 cv
285.046 308.032 li
284.838 308.032 284.669 307.863 284.669 307.655 cv
284.669 307.447 284.838 307.278 285.046 307.278 cv
cp
f
290.55 309.315 mo
290.55 311.823 li
290.55 312.089 290.334 312.305 290.068 312.305 cv
289.801 312.305 289.585 312.089 289.585 311.823 cv
289.585 309.315 li
289.585 309.048 289.801 308.832 290.068 308.832 cv
290.334 308.832 290.55 309.048 290.55 309.315 cv
cp
f
288.171 310.601 mo
288.171 311.222 287.667 311.726 287.045 311.726 cv
282.608 311.726 li
281.987 311.726 281.483 311.222 281.483 310.601 cv
281.483 309.979 281.987 309.475 282.608 309.475 cv
287.045 309.475 li
287.667 309.475 288.171 309.979 288.171 310.601 cv
cp
f
277.312 307.278 mo
283.16 307.278 li
283.368 307.278 283.537 307.447 283.537 307.655 cv
283.537 307.863 283.368 308.032 283.16 308.032 cv
277.312 308.032 li
277.103 308.032 276.935 307.863 276.935 307.655 cv
276.935 307.447 277.103 307.278 277.312 307.278 cv
cp
f
280.325 310.601 mo
280.325 311.222 279.821 311.726 279.2 311.726 cv
274.763 311.726 li
274.141 311.726 273.638 311.222 273.638 310.601 cv
273.638 309.979 274.141 309.475 274.763 309.475 cv
279.2 309.475 li
279.821 309.475 280.325 309.979 280.325 310.601 cv
cp
f
269.578 307.278 mo
275.425 307.278 li
275.634 307.278 275.803 307.447 275.803 307.655 cv
275.803 307.863 275.634 308.032 275.425 308.032 cv
269.578 308.032 li
269.369 308.032 269.2 307.863 269.2 307.655 cv
269.2 307.447 269.369 307.278 269.578 307.278 cv
cp
f
265.792 310.601 mo
265.792 309.979 266.296 309.475 266.917 309.475 cv
271.355 309.475 li
271.976 309.475 272.48 309.979 272.48 310.601 cv
272.48 311.222 271.976 311.726 271.355 311.726 cv
266.917 311.726 li
266.296 311.726 265.792 311.222 265.792 310.601 cv
cp
f
275.425 313.848 mo
269.578 313.848 li
269.369 313.848 269.2 313.679 269.2 313.471 cv
269.2 313.263 269.369 313.094 269.578 313.094 cv
275.425 313.094 li
275.634 313.094 275.803 313.263 275.803 313.471 cv
275.803 313.679 275.634 313.848 275.425 313.848 cv
cp
f
283.16 313.848 mo
277.312 313.848 li
277.103 313.848 276.935 313.679 276.935 313.471 cv
276.935 313.263 277.103 313.094 277.312 313.094 cv
283.16 313.094 li
283.368 313.094 283.537 313.263 283.537 313.471 cv
283.537 313.679 283.368 313.848 283.16 313.848 cv
cp
f
290.894 313.848 mo
285.046 313.848 li
284.838 313.848 284.669 313.679 284.669 313.471 cv
284.669 313.263 284.838 313.094 285.046 313.094 cv
290.894 313.094 li
291.102 313.094 291.271 313.263 291.271 313.471 cv
291.271 313.679 291.102 313.848 290.894 313.848 cv
cp
f
292.093 311.823 mo
292.093 312.089 291.877 312.305 291.611 312.305 cv
291.345 312.305 291.129 312.089 291.129 311.823 cv
291.129 309.315 li
291.129 309.048 291.345 308.832 291.611 308.832 cv
291.877 308.832 292.093 309.048 292.093 309.315 cv
292.093 311.823 li
cp
f
298.628 313.848 mo
292.78 313.848 li
292.572 313.848 292.403 313.679 292.403 313.471 cv
292.403 313.263 292.572 313.094 292.78 313.094 cv
298.628 313.094 li
298.836 313.094 299.005 313.263 299.005 313.471 cv
299.005 313.679 298.836 313.848 298.628 313.848 cv
cp
f
299.81 311.823 mo
299.81 312.089 299.594 312.305 299.328 312.305 cv
299.062 312.305 298.846 312.089 298.846 311.823 cv
298.846 309.315 li
298.846 309.048 299.062 308.832 299.328 308.832 cv
299.594 308.832 299.81 309.048 299.81 309.315 cv
299.81 311.823 li
cp
f
306.362 313.848 mo
300.514 313.848 li
300.306 313.848 300.137 313.679 300.137 313.471 cv
300.137 313.263 300.306 313.094 300.514 313.094 cv
306.362 313.094 li
306.57 313.094 306.739 313.263 306.739 313.471 cv
306.739 313.679 306.57 313.848 306.362 313.848 cv
cp
f
314.096 313.848 mo
308.248 313.848 li
308.04 313.848 307.871 313.679 307.871 313.471 cv
307.871 313.263 308.04 313.094 308.248 313.094 cv
314.096 313.094 li
314.305 313.094 314.473 313.263 314.473 313.471 cv
314.473 313.679 314.305 313.848 314.096 313.848 cv
cp
f
314.096 308.032 mo
308.248 308.032 li
308.04 308.032 307.871 307.863 307.871 307.655 cv
307.871 307.447 308.04 307.278 308.248 307.278 cv
314.096 307.278 li
314.305 307.278 314.473 307.447 314.473 307.655 cv
314.473 307.863 314.305 308.032 314.096 308.032 cv
cp
f
213.613 302.362 mo
209.181 302.362 li
209.181 295.364 li
213.613 295.364 li
213.613 302.362 li
cp
.564294 .313085 .345434 .116823 cmyk
f
250.28 293.699 mo
250.28 293.241 li
249.235 293.241 li
249.235 293.699 li
248.45 293.699 li
248.45 293.241 li
246.422 293.241 li
246.422 293.699 li
245.637 293.699 li
245.637 293.241 li
243.61 293.241 li
243.61 293.699 li
242.956 293.699 li
242.956 295.53 li
246.095 295.53 li
246.095 305.366 li
248.777 305.366 li
248.777 295.53 li
250.863 295.53 li
250.863 293.699 li
250.28 293.699 li
cp
f
167.413 308.033 mo
165.916 308.033 167.413 328.653 167.413 328.653 cv
167.413 328.653 175.648 328.041 175.648 326.339 cv
175.648 324.638 175.648 316.132 175.648 314.975 cv
175.648 313.818 174.967 307.761 174.151 307.761 cv
173.334 307.761 168.094 308.033 167.413 308.033 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
312.767 320.331 mo
302.955 320.331 li
302.955 316.455 li
312.767 316.455 li
312.767 320.331 li
cp
f
303.23 321.134 mo
301.218 321.134 li
301.218 315.835 li
303.23 315.835 li
303.23 321.134 li
cp
.804746 .568353 .507561 .522942 cmyk
f
258.454 306.802 mo
254.433 306.802 li
254.159 306.802 253.938 306.699 253.938 306.572 cv
253.938 306.445 254.159 306.342 254.433 306.342 cv
258.454 306.342 li
258.728 306.342 258.949 306.445 258.949 306.572 cv
258.949 306.699 258.728 306.802 258.454 306.802 cv
cp
258.454 308.667 mo
254.433 308.667 li
254.159 308.667 253.938 308.445 253.938 308.171 cv
253.938 307.898 254.159 307.676 254.433 307.676 cv
258.454 307.676 li
258.728 307.676 258.949 307.898 258.949 308.171 cv
258.949 308.445 258.728 308.667 258.454 308.667 cv
cp
258.454 310.881 mo
254.433 310.881 li
254.159 310.881 253.938 310.659 253.938 310.386 cv
253.938 310.112 254.159 309.891 254.433 309.891 cv
258.454 309.891 li
258.728 309.891 258.949 310.112 258.949 310.386 cv
258.949 310.659 258.728 310.881 258.454 310.881 cv
cp
250.674 305.869 mo
250.674 315.077 li
259.94 315.077 li
259.94 305.869 li
250.674 305.869 li
cp
f
243.614 239.463 mo
244.909 239.463 li
243.999 238.648 243.417 237.476 243.417 236.158 cv
243.417 235.055 243.827 234.058 244.491 233.284 cv
241.715 233.284 li
241.343 233.932 241.125 234.678 241.125 235.48 cv
241.125 237.233 242.144 238.733 243.614 239.463 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
249.522 233.284 mo
249.741 233.717 249.869 234.235 249.867 234.887 cv
249.855 237.659 247.611 239.915 244.838 239.915 cv
242.739 239.915 240.161 237.901 240.628 234.818 cv
239.503 236.478 li
239.603 236.662 239.675 236.862 239.675 237.087 cv
239.675 237.802 239.095 238.382 238.379 238.382 cv
238.327 238.382 238.283 238.359 238.232 238.353 cv
237.564 239.339 li
239.197 238.59 241.002 239.244 242.311 239.905 cv
243.07 240.288 243.929 240.504 244.838 240.504 cv
247.94 240.504 250.455 237.989 250.455 234.886 cv
250.455 234.318 250.451 233.788 250.534 233.284 cv
249.522 233.284 li
cp
f
273.417 228.269 mo
252.842 228.269 li
252.842 224.779 li
273.417 224.779 li
273.417 228.269 li
cp
.816129 .572106 .530816 .573571 cmyk
f
254.45 224.152 mo
218.217 224.152 li
218.217 230.966 li
238.654 230.966 li
238.654 232.466 li
248.279 232.466 li
248.279 230.966 li
254.45 230.966 li
254.45 224.152 li
cp
.849027 .6177 .563592 .674403 cmyk
f
277.293 224.427 mo
277.293 223.029 276.404 222.654 275.237 222.654 cv
273.51 224.427 li
273.006 224.427 li
273.006 228.621 li
278.304 228.621 li
278.304 224.427 li
277.293 224.427 li
cp
.684352 .464546 .433845 .323278 cmyk
f
254.45 224.152 mo
231.007 224.152 li
231.019 224.163 231.028 224.173 231.04 224.183 cv
231.724 224.756 232.742 225.221 233.315 225.221 cv
254.45 225.221 li
254.45 227.318 li
247.436 227.318 li
247.436 225.57 li
239.688 225.57 li
239.688 226.223 li
232.736 226.223 li
232.387 226.223 232.104 226.506 232.104 226.855 cv
232.104 227.204 232.387 227.486 232.736 227.486 cv
239.688 227.486 li
239.688 227.991 li
224.695 227.991 li
224.695 228.328 li
239.688 228.328 li
239.688 231.801 li
245.079 231.801 li
245.079 226.764 li
246.984 226.764 li
246.984 231.801 li
247.436 231.801 li
247.436 227.907 li
254.45 227.907 li
254.45 231.386 li
254.45 232.687 253.396 233.741 252.096 233.741 cv
219.452 233.741 li
217.501 233.741 215.92 232.16 215.92 230.209 cv
215.92 224.784 li
215.92 223.483 216.974 222.429 218.275 222.429 cv
224.686 222.429 li
224.138 223.004 223.796 223.778 223.796 224.634 cv
223.796 226.4 225.234 227.837 227 227.837 cv
228.766 227.837 230.203 226.4 230.203 224.634 cv
230.203 223.778 229.862 223.004 229.314 222.429 cv
240.955 222.429 li
243.207 223.876 li
248.412 223.876 li
249.572 223.13 li
254.45 223.13 li
254.45 224.152 li
cp
f
251.286 230.274 mo
251.286 230.603 251.193 230.908 251.044 231.178 cv
253.296 231.178 li
253.715 231.178 254.055 230.838 254.055 230.419 cv
254.055 230 253.715 229.66 253.296 229.66 cv
251.174 229.66 li
251.242 229.854 251.286 230.058 251.286 230.274 cv
cp
.720851 .673426 .586358 .790768 cmyk
f
248.114 230.274 mo
248.114 230.987 248.692 231.565 249.406 231.565 cv
250.119 231.565 250.697 230.987 250.697 230.274 cv
250.697 229.56 250.119 228.982 249.406 228.982 cv
248.692 228.982 248.114 229.56 248.114 230.274 cv
cp
f
221.145 229.322 mo
221.76 228.945 222.374 228.568 222.989 228.191 cv
221.593 225.916 li
221.281 225.407 220.615 225.247 220.106 225.559 cv
219.597 225.872 219.437 226.538 219.75 227.047 cv
221.145 229.322 li
cp
.564294 .313085 .345434 .116823 cmyk
f
223.127 228.417 mo
222.513 228.794 221.898 229.171 221.283 229.548 cv
222.37 231.319 li
224.907 231.319 li
223.127 228.417 li
cp
.804746 .568353 .507561 .522942 cmyk
f
220.576 254.984 mo
219.936 254.984 219.418 255.503 219.418 256.142 cv
219.418 256.782 219.936 257.3 220.576 257.3 cv
221.216 257.3 221.734 256.782 221.734 256.142 cv
221.734 255.503 221.216 254.984 220.576 254.984 cv
cp
.720851 .673426 .586358 .790768 cmyk
f
218.418 262.136 mo
217.316 262.136 216.423 261.243 216.423 260.141 cv
216.423 259.039 217.316 258.145 218.418 258.145 cv
219.52 258.145 220.414 259.039 220.414 260.141 cv
220.414 261.243 219.52 262.136 218.418 262.136 cv
cp
221.732 233.643 mo
224.912 238.933 220.034 242.341 216.573 247.068 cv
213.427 251.363 213.703 256.193 213.703 256.193 cv
213.703 256.578 216.064 260.889 216.222 261.213 cv
216.619 262.025 217.454 262.584 218.418 262.584 cv
219.364 262.584 224.892 260.902 225.423 259.171 cv
225.511 259.032 225.573 258.898 225.573 258.776 cv
226.287 256.119 li
238.23 238.499 li
237.887 238.266 237.648 237.892 237.648 237.446 cv
237.648 236.73 238.228 236.15 238.944 236.15 cv
239.214 236.15 239.45 236.252 239.658 236.393 cv
241.522 233.643 li
221.732 233.643 li
cp
.804746 .568353 .507561 .522942 cmyk
f
215.697 255.848 mo
215.705 254.924 215.891 251.384 218.186 248.249 cv
218.865 247.322 219.624 246.423 220.357 245.553 cv
222.748 242.718 225.395 239.579 224.65 235.643 cv
236.186 235.643 li
235.847 236.161 235.648 236.781 235.648 237.445 cv
235.648 237.803 235.709 238.154 235.823 238.486 cv
224.443 255.276 li
223.647 258.236 li
223.594 258.32 li
223.555 258.445 li
222.852 259.231 215.928 256.371 215.697 255.848 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
222.702 256.142 mo
222.702 254.968 221.75 254.016 220.576 254.016 cv
219.402 254.016 218.45 254.968 218.45 256.142 cv
218.45 257.316 219.402 258.268 220.576 258.268 cv
221.75 258.268 222.702 257.316 222.702 256.142 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
237.154 237.279 mo
237.154 236.45 237.826 235.779 238.654 235.779 cv
239.483 235.779 240.154 236.45 240.154 237.279 cv
240.154 238.107 239.483 238.779 238.654 238.779 cv
237.826 238.779 237.154 238.107 237.154 237.279 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
221.922 256.142 mo
221.922 255.399 221.319 254.796 220.576 254.796 cv
219.833 254.796 219.23 255.399 219.23 256.142 cv
219.23 256.886 219.833 257.488 220.576 257.488 cv
221.319 257.488 221.922 256.886 221.922 256.142 cv
cp
f
227 228.248 mo
225.007 228.248 223.385 226.626 223.385 224.633 cv
223.385 222.64 225.007 221.018 227 221.018 cv
228.993 221.018 230.615 222.64 230.615 224.633 cv
230.615 226.626 228.993 228.248 227 228.248 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
229.615 224.633 mo
229.615 226.077 228.444 227.248 227 227.248 cv
225.555 227.248 224.385 226.077 224.385 224.633 cv
224.385 223.189 225.555 222.018 227 222.018 cv
228.444 222.018 229.615 223.189 229.615 224.633 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
228.097 224.633 mo
228.097 224.027 227.606 223.536 227 223.536 cv
226.394 223.536 225.902 224.027 225.902 224.633 cv
225.902 225.24 226.394 225.731 227 225.731 cv
227.606 225.731 228.097 225.24 228.097 224.633 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
88.1734 293.443 mo
83.8152 293.443 li
83.8152 306.72 li
88.1734 306.72 li
88.1734 293.443 li
cp
f
85.1603 301.581 mo
85.1603 306.324 li
69.4194 306.324 li
69.4194 292.979 li
85.1603 292.979 li
85.1603 301.581 li
cp
.849027 .6177 .563592 .674403 cmyk
f
113.263 299.304 mo
100.231 299.304 li
100.231 300.176 li
113.263 300.176 li
113.263 299.304 li
cp
.564294 .313085 .345434 .116823 cmyk
f
114.1 298.552 mo
114.076 298.552 li
114.076 298.18 li
113.581 298.18 li
113.581 298.552 li
113.572 298.552 li
113.313 298.552 113.103 298.763 113.103 299.022 cv
113.103 300.466 li
113.103 300.725 113.313 300.935 113.572 300.935 cv
113.581 300.935 li
113.581 301.3 li
114.076 301.3 li
114.076 300.935 li
114.1 300.935 li
114.359 300.935 114.569 300.725 114.569 300.466 cv
114.569 299.022 li
114.569 298.763 114.359 298.552 114.1 298.552 cv
cp
f
100.357 298.18 mo
93.8104 298.18 li
93.8104 301.3 li
100.357 301.3 li
100.357 298.18 li
cp
.816129 .572106 .530816 .573571 cmyk
f
123.007 293.197 mo
93.767 293.197 li
93.767 297.907 li
123.007 297.907 li
123.007 293.197 li
cp
.564294 .313085 .345434 .116823 cmyk
f
57.6791 295.662 mo
59.7917 295.801 61.0482 297.839 62.2261 298.53 cv
62.4868 298.177 63.1059 297.301 64.0621 295.755 cv
62.7909 296.183 61.9735 296.056 60.3774 294.828 cv
58.464 293.356 56.468 295.583 57.6791 295.662 cv
cp
f
87.961 306.616 mo
65.6277 306.616 li
65.6277 306.172 li
87.961 306.172 li
87.961 306.616 li
cp
.849027 .6177 .563592 .674403 cmyk
f
71.6624 313.075 mo
71.6624 315.333 73.0096 317.241 74.9316 318.128 cv
75.0366 317.986 75.1564 317.855 75.2648 317.715 cv
73.9452 316.695 73.0852 315.12 73.0852 313.32 cv
73.0852 312.261 74.0419 311.259 74.986 310.493 cv
74.3756 310.43 73.8125 310.409 73.3776 310.409 cv
71.8459 310.409 70.1545 310.62 68.9439 311.351 cv
70.0746 311.971 71.6624 312.876 71.6624 313.075 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
85.1603 301.581 mo
85.1603 306.324 li
69.4194 306.324 li
69.4194 292.979 li
85.1603 292.979 li
85.1603 293.864 li
74.9916 293.864 li
73.8614 293.864 72.9452 294.247 72.9452 294.718 cv
72.9452 295.19 73.8614 295.572 74.9916 295.572 cv
85.1603 295.572 li
85.1603 297.47 li
74.9916 297.47 li
73.8614 297.47 72.9452 298.39 72.9452 299.525 cv
72.9452 300.66 73.8614 301.581 74.9916 301.581 cv
85.1603 301.581 li
cp
.564294 .313085 .345434 .116823 cmyk
f
87.2405 293.101 mo
87.2405 298.669 li
87.2405 301.973 li
87.2405 306.741 li
90.5444 306.741 li
90.5444 306.741 90.5444 306.358 90.5444 305.277 cv
90.5444 303.074 91.7246 301.973 92.9918 301.973 cv
94.0319 301.973 li
94.0319 293.101 li
87.2405 293.101 li
cp
.849027 .6177 .563592 .674403 cmyk
f
121.246 293.442 mo
119.449 291.644 li
118.951 291.147 118.145 291.147 117.648 291.644 cv
117.152 292.14 117.152 292.944 117.647 293.442 cv
121.246 293.442 li
cp
.564294 .313085 .345434 .116823 cmyk
f
66.7653 306.8 mo
69.4813 306.8 li
69.4813 291.917 li
68.3948 291.917 li
66.7653 302.292 li
66.7653 306.8 li
cp
.816129 .572106 .530816 .573571 cmyk
f
80.8365 315.275 mo
80.8365 318.354 77.8345 320.581 73.701 320.581 cv
69.5676 320.581 66.9032 318.403 66.9032 315.324 cv
66.9032 312.244 69.4421 310.81 73.5755 310.81 cv
77.7088 310.81 80.8365 312.195 80.8365 315.275 cv
cp
89.443 306.477 mo
69.2756 306.198 li
67.1197 306.198 li
67.1197 301.538 li
68.461 292.957 li
68.461 292.957 66.0493 291.966 64.5974 294.424 cv
62.684 297.662 61.7028 298.888 61.7028 298.888 cv
61.5556 304.187 li
61.5556 304.187 59.9098 305.898 56.7261 305.924 cv
55.4255 305.935 54.516 306.708 54.5363 308.009 cv
54.5458 308.619 54.5391 309.249 54.5225 309.873 cv
51.3295 314.458 44.0145 325.131 44.2371 329.404 cv
44.4824 334.114 47.1317 335.389 49.9772 335.389 cv
52.8228 335.389 55.423 333.329 56.1099 329.355 cv
56.5924 326.563 58.8899 319.925 60.2657 316.203 cv
60.4009 316.036 60.5456 315.863 60.7016 315.685 cv
61.7114 315.791 65.6839 314.064 65.6839 315.005 cv
65.6839 318.374 69.2803 321.114 73.7008 321.114 cv
78.1215 321.114 81.7183 318.374 81.7183 315.005 cv
81.7183 313.509 81.2217 312.271 80.292 311.35 cv
86.5767 311.35 li
86.5767 309.976 li
89.0665 309.976 90.5506 309.976 90.5506 309.976 cv
90.5506 306.198 li
89.443 306.477 li
cp
.849027 .6177 .563592 .674403 cmyk
f
56.6495 308.112 mo
48.5165 319.866 45.3192 327.536 45.413 329.344 cv
45.5861 332.665 47.0361 334.212 49.9774 334.212 cv
52.5054 334.212 54.2557 332.244 54.9494 329.154 cv
56.0608 324.204 59.6913 314.637 61.2122 311.938 cv
61.5065 310.761 57.042 307.425 56.6495 308.112 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
80.8317 306.842 mo
80.2233 306.874 79.765 307.351 79.7004 307.937 cv
77.2612 307.48 64.7365 307.694 64.1254 307.727 cv
63.4489 307.763 62.9296 308.34 62.9655 309.017 cv
63.0013 309.693 63.5787 310.212 64.2552 310.177 cv
64.8663 310.144 77.3435 309.034 79.7207 308.321 cv
79.847 308.897 80.3531 309.323 80.9615 309.291 cv
81.638 309.255 82.1573 308.678 82.1215 308.001 cv
82.0856 307.325 81.5081 306.806 80.8317 306.842 cv
cp
.564294 .313085 .345434 .116823 cmyk
f
113.748 174.993 mo
103.996 177.318 li
104.242 180.737 105.17 188.44 107.513 194.5 cv
112.514 193.014 117.109 191.211 117.109 191.211 cv
117.109 191.211 113.918 181.529 113.748 174.993 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
92.9979 174.731 mo
92.9979 174.002 93.2302 173.33 93.6192 172.776 cv
95.4626 172.776 li
94.9557 173.367 94.6423 174.128 94.6423 174.971 cv
94.6423 176.114 95.2194 177.104 96.0823 177.724 cv
94.8018 177.724 li
93.7328 177.147 92.9979 176.031 92.9979 174.731 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
98.7169 178.122 mo
93.3005 178.122 li
90.9142 176.588 li
90.7676 176.733 90.5998 176.854 90.4383 176.982 cv
93.1275 178.71 li
98.8901 178.71 li
100.544 175.911 li
100.431 175.732 100.33 175.546 100.238 175.355 cv
98.7169 178.122 li
cp
.849027 .6177 .563592 .674403 cmyk
f
101.661 180.664 mo
100.955 180.664 li
100.955 177.964 li
102.306 177.964 li
101.661 180.664 li
cp
f
102.484 167.288 mo
101.767 167.288 101.185 168.046 101.185 168.981 cv
101.185 169.295 li
100.531 169.295 li
99.8137 169.295 99.2319 170.053 99.2319 170.988 cv
99.2319 178.997 li
101.692 178.997 li
114.18 175.118 li
116.077 170.49 li
118.982 165.955 li
102.484 167.288 li
cp
.816129 .572106 .530816 .573571 cmyk
f
131.642 157.698 mo
131.642 156.802 li
130.615 155.5 li
129.164 155.5 li
128.137 156.802 li
128.137 157.698 li
131.642 157.698 li
cp
.684352 .464546 .433845 .323278 cmyk
f
92.491 157.529 mo
92.491 155.653 li
89.033 155.653 li
85.9158 157.529 li
92.491 157.529 li
cp
f
94.8152 159.71 mo
98.8985 160.726 li
106.993 160.726 li
110.565 158.919 li
115.894 158.919 li
118.128 160.049 li
119.59 160.049 li
121.824 158.919 li
127.153 158.919 li
130.579 160.652 li
135.099 160.652 li
131.678 157.34 li
85.6102 157.34 li
85.6102 159.71 li
94.8152 159.71 li
cp
.564294 .313085 .345434 .116823 cmyk
f
127.852 156.892 mo
127.116 156.892 li
127.116 158.488 li
127.852 158.488 li
127.852 156.892 li
cp
126.601 156.892 mo
125.865 156.892 li
125.865 158.488 li
126.601 158.488 li
126.601 156.892 li
cp
125.35 156.892 mo
124.614 156.892 li
124.614 158.488 li
125.35 158.488 li
125.35 156.892 li
cp
124.099 156.892 mo
123.363 156.892 li
123.363 158.488 li
124.099 158.488 li
124.099 156.892 li
cp
122.847 156.892 mo
122.112 156.892 li
122.112 158.488 li
122.847 158.488 li
122.847 156.892 li
cp
121.596 156.892 mo
120.86 156.892 li
120.86 158.488 li
121.596 158.488 li
121.596 156.892 li
cp
120.345 156.892 mo
119.609 156.892 li
119.609 158.488 li
120.345 158.488 li
120.345 156.892 li
cp
119.094 156.892 mo
118.358 156.892 li
118.358 158.488 li
119.094 158.488 li
119.094 156.892 li
cp
117.843 156.892 mo
117.107 156.892 li
117.107 158.488 li
117.843 158.488 li
117.843 156.892 li
cp
116.592 156.892 mo
115.856 156.892 li
115.856 158.488 li
116.592 158.488 li
116.592 156.892 li
cp
115.341 156.892 mo
114.605 156.892 li
114.605 158.488 li
115.341 158.488 li
115.341 156.892 li
cp
114.09 156.892 mo
113.354 156.892 li
113.354 158.488 li
114.09 158.488 li
114.09 156.892 li
cp
112.839 156.892 mo
112.103 156.892 li
112.103 158.488 li
112.839 158.488 li
112.839 156.892 li
cp
111.588 156.892 mo
110.852 156.892 li
110.852 158.488 li
111.588 158.488 li
111.588 156.892 li
cp
110.337 156.892 mo
109.601 156.892 li
109.601 158.488 li
110.337 158.488 li
110.337 156.892 li
cp
109.086 156.892 mo
108.35 156.892 li
108.35 158.488 li
109.086 158.488 li
109.086 156.892 li
cp
107.835 156.892 mo
107.099 156.892 li
107.099 158.488 li
107.835 158.488 li
107.835 156.892 li
cp
106.584 156.892 mo
105.848 156.892 li
105.848 158.488 li
106.584 158.488 li
106.584 156.892 li
cp
105.333 156.892 mo
104.597 156.892 li
104.597 158.488 li
105.333 158.488 li
105.333 156.892 li
cp
104.082 156.892 mo
103.346 156.892 li
103.346 158.488 li
104.082 158.488 li
104.082 156.892 li
cp
102.831 156.892 mo
102.095 156.892 li
102.095 158.488 li
102.831 158.488 li
102.831 156.892 li
cp
101.579 156.892 mo
100.844 156.892 li
100.844 158.488 li
101.579 158.488 li
101.579 156.892 li
cp
100.328 156.892 mo
99.5926 156.892 li
99.5926 158.488 li
100.328 158.488 li
100.328 156.892 li
cp
99.0774 156.892 mo
98.3415 156.892 li
98.3415 158.488 li
99.0774 158.488 li
99.0774 156.892 li
cp
97.8264 156.892 mo
97.0905 156.892 li
97.0905 158.488 li
97.8264 158.488 li
97.8264 156.892 li
cp
96.5753 156.892 mo
95.8394 156.892 li
95.8394 158.488 li
96.5753 158.488 li
96.5753 156.892 li
cp
95.3243 156.892 mo
94.5884 156.892 li
94.5884 158.488 li
95.3243 158.488 li
95.3243 156.892 li
cp
94.0732 158.488 mo
93.3373 158.488 li
93.3373 156.892 li
94.0732 156.892 li
94.0732 158.488 li
cp
f
130.882 158.886 mo
129.016 158.886 li
129.016 156.899 li
130.882 156.899 li
130.882 158.886 li
cp
f
78.8396 168.682 mo
74.9877 168.682 li
74.0084 168.682 73.2144 167.888 73.2144 166.909 cv
73.2144 165.929 74.0084 165.135 74.9877 165.135 cv
78.8396 165.135 li
79.819 165.135 80.6129 165.929 80.6129 166.909 cv
80.6129 167.888 79.819 168.682 78.8396 168.682 cv
cp
70.0987 169.17 mo
59.7629 169.17 57.0756 172.201 53.4346 172.201 cv
52.39 172.201 52.1833 172.27 52.1833 168.48 cv
52.1833 164.691 51.8388 163.451 54.1815 163.451 cv
56.5243 163.451 70.9946 163.412 70.9946 163.412 cv
72.5104 163.412 72.2215 169.17 70.0987 169.17 cv
cp
75.8179 162.555 mo
71.8903 162.555 48.3246 162.693 48.3246 162.693 cv
48.3246 162.693 48.3246 170.548 48.3246 173.304 cv
48.3246 176.06 46.3263 182.882 47.4287 182.882 cv
48.5312 182.882 52.5967 182.882 52.5967 182.882 cv
52.5967 182.882 54.8017 172.822 64.5174 171.512 cv
74.2331 170.203 79.1254 170.272 83.1908 170.272 cv
83.1908 165.862 83.1908 160.212 83.1908 160.212 cv
83.1908 160.212 79.7455 162.555 75.8179 162.555 cv
cp
.684352 .464546 .433845 .323278 cmyk
f
86.239 171.613 mo
86.3266 172.037 li
86.4357 172.678 86.2467 173.645 85.9043 174.198 cv
81.369 181.522 li
81.0266 182.075 81.1967 182.802 81.7488 183.145 cv
85.5923 185.537 li
87.9616 186.886 87.1839 184.943 87.4685 184.358 cv
93.1992 172.58 li
88.168 172.58 li
86.239 171.613 li
cp
.284794 .620722 .992004 .253178 cmyk
f
136.241 174.43 mo
136.241 171.943 li
133.15 171.943 li
133.15 174.43 li
132.526 175.95 132.12 178.36 132.12 181.083 cv
132.12 183.16 132.357 185.055 132.745 186.514 cv
136.646 186.514 li
137.035 185.055 137.271 183.16 137.271 181.083 cv
137.271 178.36 136.866 175.95 136.241 174.43 cv
cp
f
130.684 170.264 mo
130.684 171.086 li
133.042 172.278 li
136.377 172.278 li
138.735 171.086 li
138.735 170.264 li
130.684 170.264 li
cp
.816129 .572106 .530816 .573571 cmyk
f
146.764 164.185 mo
146.942 164.729 li
146.942 167.914 li
152.143 167.914 li
152.143 164.185 li
146.764 164.185 li
cp
f
144.262 169.828 mo
144.262 172.846 li
146.029 172.846 li
146.912 170.688 li
146.912 169.828 li
144.262 169.828 li
cp
f
146.246 161.438 mo
144.925 160.408 li
130.648 160.408 li
130.648 161.438 li
126.38 161.438 li
126.38 160.481 li
100.77 160.481 li
100.77 159.466 li
82.655 159.466 li
82.655 170.6 li
87.9897 173.139 li
99.5322 173.139 li
99.5322 171.535 li
99.5322 170.561 100.325 169.769 101.298 169.769 cv
101.341 169.769 li
101.512 168.972 102.221 168.373 103.068 168.373 cv
116.077 168.373 li
116.077 170.49 li
147.353 170.49 li
147.353 164.823 li
146.246 161.438 li
cp
.684352 .464546 .433845 .323278 cmyk
f
134.339 167.093 mo
134.339 167.432 134.064 167.706 133.725 167.706 cv
133.725 164.37 li
134.064 164.37 134.339 164.645 134.339 164.984 cv
134.339 167.093 li
cp
.804746 .568353 .507561 .522942 cmyk
f
135.91 167.093 mo
135.91 167.432 135.636 167.706 135.297 167.706 cv
135.297 164.37 li
135.636 164.37 135.91 164.645 135.91 164.984 cv
135.91 167.093 li
cp
f
137.482 167.093 mo
137.482 167.432 137.207 167.706 136.868 167.706 cv
136.868 164.37 li
137.207 164.37 137.482 164.645 137.482 164.984 cv
137.482 167.093 li
cp
f
139.053 167.093 mo
139.053 167.432 138.779 167.706 138.44 167.706 cv
138.44 164.37 li
138.779 164.37 139.053 164.645 139.053 164.984 cv
139.053 167.093 li
cp
f
140.625 167.093 mo
140.625 167.432 140.35 167.706 140.012 167.706 cv
140.012 164.37 li
140.35 164.37 140.625 164.645 140.625 164.984 cv
140.625 167.093 li
cp
f
140.411 162.91 mo
138.302 162.91 li
137.963 162.91 137.688 162.635 137.688 162.296 cv
137.688 161.958 137.963 161.683 138.302 161.683 cv
140.411 161.683 li
140.75 161.683 141.025 161.958 141.025 162.296 cv
141.025 162.635 140.75 162.91 140.411 162.91 cv
cp
f
142.196 167.093 mo
142.196 167.432 141.922 167.706 141.583 167.706 cv
141.583 164.37 li
141.922 164.37 142.196 164.645 142.196 164.984 cv
142.196 167.093 li
cp
f
143.768 167.093 mo
143.768 167.432 143.493 167.706 143.154 167.706 cv
143.154 164.37 li
143.493 164.37 143.768 164.645 143.768 164.984 cv
143.768 167.093 li
cp
f
145.339 167.093 mo
145.339 167.432 145.065 167.706 144.726 167.706 cv
144.726 164.37 li
145.065 164.37 145.339 164.645 145.339 164.984 cv
145.339 167.093 li
cp
f
144.778 162.91 mo
142.668 162.91 li
142.329 162.91 142.055 162.635 142.055 162.296 cv
142.055 161.958 142.329 161.683 142.668 161.683 cv
144.778 161.683 li
145.116 161.683 145.391 161.958 145.391 162.296 cv
145.391 162.635 145.116 162.91 144.778 162.91 cv
cp
f
134.148 162.33 mo
134.148 162.583 133.943 162.788 133.69 162.788 cv
84.1902 162.788 li
83.9371 162.788 83.7319 162.583 83.7319 162.33 cv
83.7319 162.33 li
83.7319 162.077 83.9371 161.872 84.1902 161.872 cv
133.69 161.872 li
133.943 161.872 134.148 162.077 134.148 162.33 cv
134.148 162.33 li
cp
.816129 .572106 .530816 .573571 cmyk
f
127.898 163.788 mo
127.898 163.88 127.824 163.955 127.732 163.955 cv
84.9819 163.955 li
84.8898 163.955 84.8152 163.88 84.8152 163.788 cv
84.8152 163.788 li
84.8152 163.696 84.8898 163.622 84.9819 163.622 cv
127.732 163.622 li
127.824 163.622 127.898 163.696 127.898 163.788 cv
127.898 163.788 li
cp
f
57.7438 32.2858 mo
57.7438 29.3602 li
55.8896 31.0685 li
56.5883 46.7684 li
56.5883 46.7684 58.0537 49.699 58.5421 49.4199 cv
58.9016 49.2145 59.9411 38.1271 60.465 32.2858 cv
57.7438 32.2858 li
cp
.684352 .464546 .433845 .323278 cmyk
f
101.262 30.3543 mo
101.262 34.9323 li
101.262 36.3607 100.104 37.5185 98.6756 37.5185 cv
92.4319 37.5183 li
92.4319 38.1074 li
98.6755 38.1074 li
100.426 38.1074 101.85 36.6828 101.85 34.9326 cv
101.85 30.3543 li
101.262 30.3543 li
cp
.849027 .6177 .563592 .674403 cmyk
f
94.6306 30.1666 mo
94.3946 30.7164 94.247 31.3112 94.247 31.9496 cv
94.247 33.3782 94.8908 34.6395 95.8879 35.5082 cv
97.0768 35.5082 li
96.2898 34.6605 95.808 33.5269 95.808 32.2782 cv
95.808 31.5122 96.0107 30.8031 96.3372 30.1666 cv
94.6306 30.1666 li
cp
f
143.35 26.7709 mo
131.557 26.7709 li
131.557 23.4914 li
143.35 23.4914 li
143.35 26.7709 li
cp
f
131.569 28.0966 mo
127.382 28.0966 li
127.382 22.1656 li
131.569 22.1656 li
131.569 28.0966 li
cp
.816129 .572106 .530816 .573571 cmyk
f
86.87 49.4331 mo
86.0394 48.9559 li
86.0394 57.915 li
93.0171 57.915 li
93.0171 49.4331 li
86.87 49.4331 li
cp
.284794 .620722 .992004 .253178 cmyk
f
110.95 19.2707 mo
107.321 19.2707 li
107.321 17.9449 li
110.95 17.9449 li
110.95 19.2707 li
cp
.564294 .313085 .345434 .116823 cmyk
f
126.301 20.2495 mo
126.301 18.5748 li
126.301 17.149 125.145 15.9931 123.719 15.9931 cv
122.293 15.9931 121.137 17.149 121.137 18.5748 cv
121.137 20.2495 li
126.301 20.2495 li
cp
f
127.487 29.2357 mo
126.719 29.2357 li
126.719 20.7229 li
127.487 20.7229 li
127.487 29.2357 li
cp
.816129 .572106 .530816 .573571 cmyk
f
105.102 24.5434 mo
99.4058 24.5434 li
99.4058 30.1137 li
126.987 30.1137 li
126.987 22.032 li
107.923 22.032 li
107.759 23.4443 106.557 24.5434 105.102 24.5434 cv
cp
.284794 .620722 .992004 .253178 cmyk
f
66.5716 32.1086 mo
66.5716 32.1086 63.9075 33.7853 62.3152 35.45 cv
60.7801 37.0549 60.9196 35.8687 60.9196 32.2403 cv
60.5876 32.2403 60.2012 32.2403 59.8205 32.2403 cv
59.8005 32.4638 li
59.4611 36.2479 59.1821 39.2066 58.9491 41.5244 cv
60.0125 43.2651 64.4149 34.0404 70.6019 32.1086 cv
68.5254 32.1086 66.5716 32.1086 66.5716 32.1086 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
82.5493 35.0045 mo
82.0476 35.0045 li
81.6423 35.0045 81.3137 35.3331 81.3137 35.7384 cv
81.3137 39.4493 li
81.3137 39.8546 81.6423 40.1832 82.0476 40.1832 cv
82.5493 40.1832 li
82.5493 35.0045 li
cp
.684352 .464546 .433845 .323278 cmyk
f
127.487 19.8629 mo
114.857 19.8629 li
114.857 19.0954 li
84.5043 19.0954 li
82.2957 19.8629 li
68.8044 19.8629 li
68.8044 18.5721 li
68.8044 16.5489 67.1643 14.9087 65.1412 14.9087 cv
63.118 14.9087 61.4778 16.5489 61.4778 18.5721 cv
61.4778 19.8629 li
60.8499 19.8629 li
60.8499 28.3757 li
80.3176 28.3757 li
80.3176 30.5426 li
103.902 30.5426 li
103.902 25.3753 li
109.24 25.3753 li
110.223 25.3753 111.02 24.5787 111.02 23.596 cv
111.02 23.4884 111.006 23.3842 110.988 23.282 cv
127.487 23.282 li
127.487 19.8629 li
cp
f
65.1412 18.2581 mo
64.6016 18.2581 64.1643 17.8207 64.1643 17.2812 cv
64.1643 16.7416 64.6016 16.3043 65.1412 16.3043 cv
65.6807 16.3043 66.118 16.7416 66.118 17.2812 cv
66.118 17.8207 65.6807 18.2581 65.1412 18.2581 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
78.5384 26.2126 mo
68.7696 26.2126 li
68.5961 26.2126 68.4556 26.072 68.4556 25.8986 cv
68.4556 25.7252 68.5961 25.5846 68.7696 25.5846 cv
78.5384 25.5846 li
78.7118 25.5846 78.8524 25.7252 78.8524 25.8986 cv
78.8524 26.072 78.7118 26.2126 78.5384 26.2126 cv
cp
f
78.5384 23.9798 mo
68.7696 23.9798 li
68.5961 23.9798 68.4556 23.8392 68.4556 23.6657 cv
68.4556 23.4923 68.5961 23.3518 68.7696 23.3518 cv
78.5384 23.3518 li
78.7118 23.3518 78.8524 23.4923 78.8524 23.6657 cv
78.8524 23.8392 78.7118 23.9798 78.5384 23.9798 cv
cp
f
92.9955 30.3551 mo
80.6436 30.3551 li
80.8199 30.5124 81.1001 30.7627 81.4341 31.0608 cv
81.9736 31.5425 82.411 32.9874 82.411 34.288 cv
82.411 47.0049 li
87.0267 49.6564 li
92.9955 49.6564 li
92.9955 30.3551 li
cp
f
106.868 24.538 mo
106.078 24.538 105.437 23.8976 105.437 23.1076 cv
105.437 22.3175 106.078 21.6771 106.868 21.6771 cv
107.658 21.6771 108.298 22.3175 108.298 23.1076 cv
108.298 23.8976 107.658 24.538 106.868 24.538 cv
cp
.804746 .568353 .507561 .522942 cmyk
f
106.868 22.5144 mo
106.54 22.5144 106.275 22.78 106.275 23.1076 cv
106.275 23.4351 106.54 23.7007 106.868 23.7007 cv
107.195 23.7007 107.461 23.4351 107.461 23.1076 cv
107.461 22.78 107.195 22.5144 106.868 22.5144 cv
cp
.816129 .572106 .530816 .573571 cmyk
f
61.0614 28.302 mo
61.0614 26.8288 li
61.0614 25.9025 60.3106 25.1518 59.3844 25.1518 cv
58.4582 25.1518 57.7073 25.9025 57.7073 26.8288 cv
57.7073 28.1344 li
57.7073 32.5505 li
58.9372 32.5505 59.9993 32.5505 61.0614 32.5505 cv
76.3379 32.5505 li
79.8037 32.5505 80.4212 30.7057 80.4212 28.302 cv
61.0614 28.302 li
cp
f
59.4518 26.4799 mo
59.8372 26.4799 60.1496 26.7923 60.1496 27.1777 cv
60.1496 27.563 59.8372 27.8754 59.4518 27.8754 cv
59.0664 27.8754 58.754 27.563 58.754 27.1777 cv
58.754 26.7923 59.0664 26.4799 59.4518 26.4799 cv
cp
.849027 .6177 .563592 .674403 cmyk
f
59.382 31.9225 mo
58.8811 31.9225 58.4749 31.5164 58.4749 31.0154 cv
58.4749 30.5144 58.8811 30.1083 59.382 30.1083 cv
59.883 30.1083 60.2891 30.5144 60.2891 31.0154 cv
60.2891 31.5164 59.883 31.9225 59.382 31.9225 cv
cp
f
74.9074 30.3176 mo
63.3244 30.3176 li
62.9969 30.3176 62.7313 30.052 62.7313 29.7246 cv
62.7313 29.397 62.9969 29.1314 63.3244 29.1314 cv
74.9074 29.1314 li
75.235 29.1314 75.5005 29.397 75.5005 29.7246 cv
75.5005 30.052 75.235 30.3176 74.9074 30.3176 cv
cp
f
77.7334 31.0154 mo
77.271 31.0154 76.896 30.6405 76.896 30.1781 cv
76.896 29.7156 77.271 29.3407 77.7334 29.3407 cv
78.1958 29.3407 78.5708 29.7156 78.5708 30.1781 cv
78.5708 30.6405 78.1958 31.0154 77.7334 31.0154 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1605.m00.i125.n026.S.c12.weapons.eps)
%%CreationDate: 5/26/2016 7:48 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KCL>i+o)Ja[q0_m!Uta<aJ^fi7f`p/n$ad:7:n[Oj%7u)7>\GbGe+;MlgA`rRfp80ogb%>e2J5f/Hm;:Zd:b?m)T`?pq0'MQ
%XgcUHmJj>#<c'Lrl<%*,n_f&(rqOgV_UJ?IXd^a#AjoOV5,sdbG,=)t[<h_@G,<dW(>=akVn86Dr$]$0]B(jDVOVp5CGaapAb(h$
%jT;$qm>0fiHD@q)mPN,#N6GH.g;ijTX"HL<(#W`Ah;b%Q5_laR%u>eJWSPGZ]B<dq!,$`"*S5iQY3/D0i.GRSB=mr(lUWt@pu/!k
%fgf,bO06CZ[faCa8(V>;\%mJ/If?^-NT>8Y,3lCU=mhN$ol^_a=N`DnD\9_-'PjW.I\Wg>bs\Dd@rEfK<@heV/eR?r;_hk1_[M!p
%s3tE"$\@6N<JLO7M@G$OcTG]M*7`@6IM(>mWdobB'(@d1&$UTh&6U8&OnVARk%1=CX3k<r@,<C2J74I%"pJGrPXI34A:4c9^j/u'
%N-+8Z(]Vin,N5SLYLibWb<2nlX0mtRJR#*s=T9J%[=C/O@;5M0hl([([H]n_RB">0K<X+5ef)oSkje%0R0:Cj+oTn:Nlmp!=q;mh
%h<<l9XCXLEq!LSc=XsHMTr^$*aPLL1Fjtk7KYjOhYkO01UViLln[TYKPI*`40lDqW:b,Rt'a.OK3&LLT]mH=H=hV5OlG9DkcEptD
%l-ubr>e<,YW?9WHXCqJ&K7B=jk]s@5CB_X4IU(M_Ar)`.4iF5,>1GsOM*oY/5P$`T!bP0%IAXc=rh/_QMZ0I?$N\:$g@.A@KbaXX
%T,6cSms)UpLG,9AgAT3cenP#Bs"*<4m?:`9Ffj)-G@47JRD"ffnAeF=O_/OoW)Kia*Un8T-<mW[/rce@qUqiZe@4our>GN.o/o]C
%cn\H%$JfHFY;P%#7`DB4RMto>j]8pUTeF7i9D.cC9c<^?<J^lp]sk!+"C\hD[SSPT-;je#"cTY51f^Qb#-&fIh!+dfmTe\#<GU\e
%5GtLQn=nL7S0tAfkc[su?gaK&\l!6C]-/iWT+R]XpBjPlA"h[keB^2;bO^$+POJ.UkF&)g]+NUXjSQ/-o/ldUT1mpt?EM]1CT7:A
%[]0]\)[$nRSseNf_P`-r"CFo&.fj.gWc_-8=%pSKb8gL]#+7-p:JqMZiK*+m]2A#T_qIgq+(e9]d\n2ckk8bjFOOZPL`=@/pfAW2
%2#L9WqVA:3Yas?L?moOqqt48IR[`^,-/,/__t3G1NAqW:4H-9Sa0;_7ldk@da;'\;lH@)s:I%5=cpW-jIa5%2?Z1-]0>RR[cc(26
%c&$K(a,$qM1Q29M2HoV3.PRMo5O%oWTZC0,@'7s--d,K7l]#YWetNd>o3_fhPOM6CdJJLNL+a@FKr*"G6`@;5(,,6lh!"&Z5HZE_
%.Q:?6B_mLYAl?81h\9Akn+aK0X>HLCX'Y1aVs&ph2qa`^YLUtEHRX7S'HC1uE]_;`D9Mch$i?^d3Zi2FruC?lNUC;iR\G:6BO#t$
%PAP13kG.or8udj*WYD"^Q!R&6Pt=o:]mf,I>fg$C2OZ_mWKD!'.j%E>>4'46*NY1Hh<@fto[M=uG-(>G3labbWmu%U<I3cqWB+T+
%*`nt1!_7I8;sX,rBf'R$E,5o*ee4aiF&MGW[QCm8I@,:o/<E9qPfi-g*jFsV0Nq'!N^bH,KCnKM@4Xcff^<r5[3s*c9sN'QdO]LB
%nVQ%d"<*hE?e.8LE5b^s,q:t/.\Y_18fbnVL6$bsOA".N-S<;Zq+XhMYqhbu#K>D2Aps+#9gff[T&$2bB'MN@BC=IO4$:.(:)Qb&
%`f##R488->^pcrk1$?:,\:(t'EO!&i2g=ZOY2.m@S%Ein:I9`"&QW(fmNC%XBTsO@3R6"T#?)VeE_Cfr!rh?OV/R.tTTE^RV,4T^
%'m0,$;O<g?d/7\GpeIsErgpuYLV>[pZ(s+g&K`lGNW+S_^EDf3Ft?L>>WqF[2X7CY_c8-E.[[9)U1[?NEHS9[]53_\C_;u6eN,&1
%V&?J@kh%(C)7Ihm$kr-Zb.tc7p^Fph0j/X@?g2&=/JJm=><f5(e#h>"@mEqknJT6pg1e6C[BUJ<.5,Ju?85HXN3Zsb/5qMS8aS'o
%^S8o2X"3;O?f`@Y\c^6*YM;_6p8aA:l;F[R7\c;#Q%$'#`rjb'5GR^M?'oZ5hFpB/`-V<k`oVJk#(1hX9j"`*XF7;$l'YLj9saW)
%qK:5r;@?9aZ]_I1Ij^OBcM5ABEkgA2QWs9dHT0V=+Jj0SqW+9Z5i5@-@Xf`a2jPLbJl(?2s/HAh`JWU:!h#7L"b(?*-=.XeLjr`9
%'`^)fJ;)#*Ff+@iRQ5jP`[P9_e9gB'=tbj>Rk!fqAoR)nK4BshKh6.[:]1'PB$t%O,S1n.B/8&Z'JfBc>pQ=f,N:)kp1G/oEK9:$
%X`IN1Ar^p;=&C^06_<`is-%fN.?5'9Hrt!pLR`rfo0)06g-`k#jDp-VepJ!Rm!Hg\dbl`5\(4K\3qId[q7cBHhfpj+1>b$^mi,&5
%jClD_`UeN<M0;_Xqo0;K"(l*$35o/:h1"N$%.?Q&!Re&'n`"&b4k!/o[,$V)T&<pTl_gZZDQV9'Jaq/\UCd^%(g$0Tcje!i]@ao_
%d845YJf!"8k[F%5EHP*!H3P.]e33V5ldDR\#;[)<9/XQJ@Bt0GllTOPf$?Cb>&,-PYM+<9<NVn$f>#qlNEU86;ld(146>%YHXKbi
%583Y`ffX^AO.X\WB>^[>iqSp8Z--![^gAPN9h*g@l"Vk?T?@272uBTBZ3j6b3D<AQP>>:QGA5UMmj*Q+NfphEVc)ko,\4i*2.ct\
%j9u88nGOZ;E-6Wal%:_X0rGRPh=I7pM%)X(dBcPG]Ck&SY]tVsK@(q8^rnk01(V%A"#'1NkqJ#&]]^aP`F%bYQ[.M#*dF(X?KQg*
%.IoaeJX;u8]St/>]\+=bGlS-V3RePb<(E%!b(lVa5gkVJ=YVucMLTuoBUkN*\hC.P[>V'6>UV;j2cc_7J3UfR@Y+htdVl3XT0G=2
%CWe9a<mdl?k]QOh`Gr1!a7SCIna#34-E$[N3;11VoQB[Oh;\7ap^cZJq(5@JFc4^EN9gBGVtgcsitBg@2?U.-:"P4nJ'"aYV3eil
%lHGL+jHY5%L"$oe8TjhFh?YGRI-EWUW\D'lbi.hGh@(b'[:/K'[c''6At7`ZQ@_]7(3*+>^=;td(R*^8Blb<Wf3V.qjKGGcX/]Yd
%XO?_aNIb:SUP7Gd4mgg<38J/)*PlIGWDul/!)/mQg:M7,-<k>X2VRPub,Sf1Bp:+alPTl60?]W,n&Ll^9k=k589^RqPoH&@VE?sp
%nT-0k5Gi99D56#`jXa"S=HgJqcWoJ_hcYB)?lu1k?EUa:.a3]0q_slJe"&EO,L4Q8T$O"cl.;B848o.>:NcMMC/<C+YOoH32/1K>
%"$)!hV<en3_mCGM]&C-FN730CR+"t)lZVFAgtXZPm))bcC9:8*FZVg-T?t@C\t-B/1`]'5ga9UP6KTZ:-dFW=\Np/l"Sk144jW<g
%?'a`nT9Ph;+J3&t4?l+q=_l23SW]HqNg$k1c;0Nte@IV(5sE-NiqrrTHu5CWNUm85^GT(Ir?=>KJc3-CjHDJW^W5Q+T(2TX<(s,V
%S9E&??FfU#>u0K:Woljo79KLF6s(hl\8SbcHhC_,WdUl!fbH&^<,\SDJNm1]CkcL./#Lj8mX^1C:Xpu%n@1N%eF/q")mr_82apD7
%<^>5.Z%[L%maeg.[;UKWI%#,5M=P._8k+iqA8CaJ)6->LYJF3%n=Q+9'<f8U`mXkrq\16LHTF$f=*XjCGH]+gRqg9PdI-@-2qKB\
%:!AoG1oj]*bk;p[WP9\<pVf&1EspYP>aDX`_Ea[egG8L%"Xcj=pl^K+Y\PS7da)01h;=V^;m=Z%>7&q2FGXU*),,5e_9\+c`2a$,
%9lh"_)XV6[TMh:,S@2QWo`k(?/Z^@9Dbk/>m<WE(nW-6\iEl=*c0.nkFHU97ls!;A?`/n9`Cc1oRr%h'Q%Q&8,I8Y+=Z9i%AmNWP
%bf+DR@`E"eRH;JX*'u7f*XP$qPZutm1iHch5ahX4X(L@N[$ci$r:FF$W<dmM?B*R"SqfLaN=MetjVj,hL\#`OFe3(<HVuDE'*U2b
%ng&N5%!2+-?l]-r(ORN&$=e&70=mXfm3Mq"Ah`hcEl5)^Rj\-jp^#^F<IXP@jaV;]VC#O#9!aZQcX\P%RbI5[RdKPm'L"'f=5!;(
%Q*<"%j*]Qp2q.DPMN+YaBnXmHX=S&`"nc86k7Zmse]UFq<@auWZEmGH<-I#14:\.Mpk7!g@6_0K=AS>SoqGBsCm<DEgR"tkHEVdo
%$Ah>[=EIf]&m$["Al<$*4`aV<>hu?fWjU<%/(JdB0T`\_YF)=g7bMd(Xk`]Pr$00/JP"6>G>]>$WoWq+pf<i/<2oMZrC/eAr%D)1
%V;^rk_B@r@]pXc=h\V*:p4HPJI%X(*;J1+OjL:qE:<t9)4ENVf:agG.nV,ZkcW/q&fD]GVY$RRa#^kaBXU7U']hKIG3S&2-K,-Co
%C[\(hmiONp29lO&e#A`+3VT$+>RKq9f&p9F(<kssI*Q"\kAVo]QC;U;;VQmlKQHU^bMW:f;f(#;>HZP\ED<@]aA3tWST;-p:U=aK
%'HFIIgMM-eceFHQ=c+ei\`UMDbpV\CDm&o55kCh6e%+W<f5&*#DCpe_PVelkA%Y/P>pn'*B/.E\/=;Wu'7\Q5WSUaRb>!.mc>2ZN
%!#67h=*KmW!-WqO.Y6#*m/j!J#1l"=iJHJ#f/ZTiT(]?A(1u[fS6<OS.c$"_VsV:=e=VnrOn[\W_JN4cqCq0#9h"f`ce_p!i_-0.
%Y;]c\q%i(0mmjrj6`Y6k]s:>E$CfRIG2le)k-)*d0j=2#=\jmlZ-"Wmht..27&jQeGZ81<V]1TpV<Gr!`bo;Q\*NXp<r^VVcbu:W
%o?>;JR?<[bC=D>:9_X5RZaPiQIk.GEL\Y.7a"o\V-+q/#a.<?<49b&nr/I6HMT'QRS`$,soZlU,7$BMQo/C[g7OmQr5W>.rn6;(n
%jqgE[lCp";W>[2qh9JqV-H95YVeSoFXI5u$9NnI9r4QLEm%40IQO6KK>;0b9o,E>1dk`Cn?Yp^/[8eOhVE`<K<@9+Ub@.j)DV-ai
%FsA'UR"[V9k7N]'>sopVOj85?@q**?Gsl-tArS_O&WJVqQq'!Q5Nh2ANHmp%dRIgid?mE\VBhlj"*[Vd_G(`q/4D?mF_:KE)0Fsd
%hEo'.B44:B%OoqF<N^\tp[l]T*Kt5fogW5LDSDQkSf5_:YjsO)WB\:=`Cf+8:#5]B:]c--7lR<3]N>j=8u^]Z]h\BM(",\/`!<7'
%k6KJ.o,-Y,RD2m5mdJF!]t(m:ao5TRP@a1Nc%<\hK.h;;Boao9:@d3#)n3kS@Z]^^hq[1[4+)+)DfE#+*PTpQZC37?G/@P!eQKsq
%B!^Ric/NU36JXJZINJK3*1ad%J'Uo$s%C#;fudZnanP/+Cl6[EJ*0Nfj1.6e"uOL3k*>r,Ru\mjNQma?>^?8]#8Uo:H2XUjg0Aq%
%<iMO0jg@,W=(7]DK%lKd'@SkUVtedm1UrF1C77i-_OB`&^lqn\J"@k5@-TX,dgXG7D.fa0c$VToS<i7fB^-9Z9Y+rqLc+$j@AQlF
%PCG+YaXitX8^iNqdDWR0>FpQ?EiW2U*7c%99"O66i$7:Iha*.ed%Bdai$2`<D2S#SAYWM02/B>NDY\<&Q^hY*W_9VI2BAAa)GN0T
%l_g!SrlY^tA?h2j4%g[E(u%?mZ&N"GGgtfX;(4O\D5!I$^4CJ%3[HN6qCRt?9tEqfo*3[C]]X&G:+)k%`:'/fP;_/j413fB;T):*
%l]"BFN1IsVcaqS#]:#N<<,>h<8>-r\/qo;"TFQqI>GD&*3n^I@C?6/=doFPMb&0;c,sb#JEHNabB'H_P=QSr?oq>;/+";p%<NGe!
%rHg#^$]C$^A?I\fc2H*Jf0$'2A+MQUFQ90?QHDJ@ji5i9EoX@oNtgE$'t.33Ug/gXa`2I&eS_4O2jI"MftSjM.5l7+_IN6ib,otG
%(!.u@Mh5*AOECbTS(1ZOb-Wo3R4)c10l>m-Gp^ZZ`Fi+DP=\hX1S'A#R>"<KQ6J(JFf?d'7V6Bn5j*?j:&OQ<'=p5YD)ioQ.&dpP
%jQE7:Ag%s:9dcf-(!gquk.)lRZK05//kRTf2sKYkL]isqbXJMT67tm!:/"kGBA.E(;@1pMX+XX#7B+Kt/kVR-9\ZY`a^(?Lbc+/[
%Qp79%`]9@6rSjnXl"]gPR(iGbVIq$#.i%*?@&@g!U^PpnTe>Q+bM(b/o`D")>g\#\$OFf$T3CFCkrZ!`!Mp*Brf(]D`i<a&mb4)>
%UAHf:Qf@,fF%&#hFQ6DD.E$>2kl(TO[uf?Qf'ueA)Cdkd"@C-^g9#e%V$@a;Y%g([q8VPUJ,JKK-%4sUn+I]KppioHb+c&=[SLY+
%I&Gjbcg6s%jYK`4H^uY539n\GqR04<2!S^g1@(Z)m<7Ljr9RM1LOB&..?i9b5pt[Qr._@[5p,gY.LP]-N8nt,_^p`FiI>+Ool$FL
%?[\:,oF?44)RV3AL?G]4?S2*^Vo7R"&;P;@dJF'0K-s9)`Z3R!Q]50NaNEl.O'qDWs*Is>j8aX>IE!;Za]M]tF!VXl5r.?(?23?i
%Ncar8Dfb[V$i^!RIm&E[?NL$330Dn=I/%5`WdhgN#<3ToOXe_`?\Ub<^d^t=Z3qa[k'hE+b^=N/%3HSf"9-,L$"#Y-Hku2^I_51>
%GLY`?-Q)R'[2gmYKCGZg4RBXt\Iq+\gZ8K^^c3"UV[pZ7Dm8smWZVVfR#VrBrGn[ald\ttp.p-HfT<_8.>Blg1"QG<\kN&4)!_H8
%/GAT#s4!.+IHZallrSorIIX(J"iXmm>oZr^PlA(q:pk@GeLn7S`*-7o4G5G?J+)=Qo7o"sob[N$Lu0@WIr6$flJ5c_k5>`,*g?b,
%leg2*YS,<LLHh4Tm06Vas3)3%JR6lYmUre1l/T3sZ.oFV0-!1^!1[NnB?\d(^bA-1I!t\1%Y_g.rL^+PL0D.1#$<k!ep:LZ?G,%X
%*e,he]'CU.-n($]N&7=sC:`q"Vk-m9Fh6:UoF;e("dU4\H>1Z4&k-F&Q&4^@Wl%J+Y0jCWe40:c6qL5I-ACI2)0)dH]PsBYXR"u3
%'NsEd7[h^Fqr%Le;HWgf?7fR<aUiLZB;OMQ[@7i&rdLo(Y'%p$Rc54mMC-$4rY+ncE:aI/J!ut^R`aI8^Eu4[Va-Gi)thA?W:<m.
%Z8)q#C?<Gm>ojkn+p*3eLrNc/h5hIHVig4TMLl0!PMi3_Pj64n6ppV3Y4;81(8KtEh-7OJ#ie'Sj6mp8Rs_hr?-c:"4YSEZ[F<u=
%Vk2lX"sR[KTo$#t83*\%&UMXPA/Go_[S6lFc!%;U"mbFXM",t_R+kU],"X)%7VTgMBm[:c+h&+Q>70KCpN$#4rkF"%OP=1pZeqa)
%CRsq%bYdcB^!'NbhCG5J)tdOAEeKl(hl,)*#<7oS)^L1gn4BC';JmK(0)LWGOAMBnqP\gV4raM7kDo@T_uZSg$m'tbf>#OG2dei"
%>.'CU5VHXBi*j=0*C$l7l^h`!b2$C+;u[s$\n2Feh0,RN)aYi7Yh/>Lp3WPU@:%%=6/kMuelfb8<m0j=0Dh*PFAJnt)cq<bUO$(h
%l;EXs.d]\Qd)Ig`n$63#7O5$#CmM[L8Z^^GGE[[8]kmEedE1cdErB<+lt%bO"a)>WY=os_?gcH"?t<1a-!UHk*q@(mPWQRBG.CPr
%<%qfE_kDImQC+Y(jfWOuU=HDOZsc5F3pi#q7Thrs=hY"nkgo!IQ"Yi\d9s.VDKRVU*B]u%("K?]4RBBg_A65IK#%PsE/ou1g^,2O
%,E!Jq)9L"!g6"fuEeP=Pp3s-m]rY6'rh_'YJRb.k>Q=(ZqW"$]3&tJ[c-`gPVr;HFOhrWb1-Nu26]+L2BXuZoB0]G>JZLIZ0?^Y5
%R-l0-Ze]OVK'DqHW.G&)Dc9Q]m<.,!iI^A4>grNO>C"mTUV=p9C>WfdTrKP;MgId5"gagC+2ZN*B-c3]g/YIBZ.^;N)GeO>kZFfi
%.5t(KFfE/qgE8$VNRg-P`E6:7q]k`cZ0<FChIOuET_7'sCRn*,hfhSp[*km[Jr!hhikHUqB@+-U+>_4h3i#t\^XGK^$nMm"3g2]l
%Q^^#%?Qqelba\2bBUQPaVQb\,(mT9B>,r-ADW\cnFt`j.f`r*<kPb7,CCQBldoshb@"+Dlesr=&42l_@@4VhGB0^/p_,LN<X5'`?
%V'WZ-f[di:-'UisSt;[!G&TU$[Dan*qhIDnR!L;XCHoLY0iR,@g6(0$l7EVVrI/WAO[&3`WqChiB_^%SCcs/SN**t,V1Hf)C5X'H
%MeN&DV2/k;TTBqrO<2>nFJ.ulee*Zl*FW5RlmPbFXtXHPQ;O^HK@``Do1;N7Q/,).\5C*_<:D#N+<GoIT4FpaEha61s.I)^ccIPd
%P->dp,o'Rg/1`.,D.Qe8l@@%DFDGa9fXRO.mR@*F";l27U0Q'IOhJ<DA.bRal_-V&;YdDBZI:jOB+/&_(Fbk'UL[!AVsB$dRRUD&
%?uuXS)_H:(E`WO<.Wh6BV9kAm8)U3"CR.g>?XY4LjY+rK(YKI,,MT,o=lfbkk0K=SS)qpaGG+jfJV[Cbn('a(d>Ap4$m.[e%!*M%
%k+aNuQ/#.,\o%g]30nkr2^Lsd;[]#\TX<=,=b[8%7SpSGaB$i?4UlH\p;?48ijtZ=\m88.ZJ#F#U<uS/`FX1&X_OaZ.QM>'@0+s@
%Xr@j!UtZ@0:L@XL5'3ToX;TLX*1$9$//\g-%@8n"<H#aEcSiQS9inXP^.^tn.bugM\=Ql(4smt$+GV@gY0+k/KR-QZr^Kb\hnjb^
%Hq"jD_C2/fIWJLC8Epr8(#k*-["e@f0p,3@^t#8N1LF/5esEt-W\.Fl5`Vc[q.(`$QYNX,5AL`"l@po1-T\n_D4OY3I9LQJ>27V"
%e5bdQjDkqVO23G-3n\-+*aD^@dVcl.dR.[G\pe&7ciSi"[1]R@g`9S2;pDa4BM+TN$@QU0;crM6gR\?j9]T_=ZM6m?&$"Tpm.E-4
%$O+/cbdt(s>m;"o2R;98&O#M^/fU&tf-ia]W7's;/'Unh=)UJR`7;PS+`!;q;m8V*]WM@D2V)'qn6N*IYuheu_la__.]*s]@qo7I
%(1b-\mmWEg)sr@gP_Css9ppYm\n8>l<N+>[?]HUgp0et8^es4?QgKA[)DO$I]BJ@KPWR^e"u'r%N*NJoV0cgh7MRftX;'6O5tQs^
%&LAk5S!4>N8#NIq[b;Rls&>]8c=sn5Xn'AMh>Tu*-gb?;eV3E\iLHU]9G]6c1leaYoPV*;4"H)1SmPV-4^a4VN0#26#`DJo6u<Bf
%op*E)%bGbuY^9[\c`;40\$/i6LJaHTckl4^BRP_HmP*JshofguQ4q6B'?*!74p4;7L(uijk&(SXW#%uL]Js_DUOjrs32.fPGh9E^
%TuqE2:V<E4qm(75`h=%$l\;$(<;Y:74&DZP"(m$k]I]SOkR;GH2aGdKUsC4u)4QXpV7Mt$S^Q]%S0VclKTX`_G.K,g,V!ukDcNs(
%7TDuLLq;1C2lLQ'eI$L[Xsl9Waf.*k6Z')Tn0FXZfd]PT9=`2TiT\9jQQ=PV*&_n8#bAd[[!;fU6$Tidr,H]c,E7lRhKe=C`ZlY;
%TY)-M)',DLnV%Pu3he%5=-02<qk,-^,na'n>r9,UR)])*0@?toejTeLcnk2WG8T(1`%s&tOC056e2)b.@7SqnFn@\hrSf_=2=8SY
%MX\REQ-\/3R6C5.aTU5e>Vj60()s^FRUjuX/+bD7jQci%Eef@>*D[B#93"$HZJ[k%]DH#^j3>JglfGT+cg88jX81#cPNM\p=mOYF
%m9;*!pBpS6[X1NYHFbD@YAM""nn?X#]N4lRDg/P:YIN=kI+MS1NcWs\]#CklZPDfOk5+9-rQU=ebO0!:3I_%RCp'+BFb3N;HMOnF
%02%cR:@58^J,#s?b\$=7%CB-8^4QXGiqC6Xqu00jq"7SBH,$qRCUQmlgs0?sI//o;h;9hGGM_Dq2X\80Ar<M;Z]h)jh/WBlp[u]?
%+*0r+m-C]V29W+Mg>'3jrj95ebr1oH.gu=C`@'27BSQ;irT/:-?Te;Z`m$G#)fO>'oB3g(\bhu;3:c0KZ,0,j2E)]7H_W%lU:Z-*
%B:mrJl0c%?:3G`#Ib"=A-[3(H];:=.>H[[n)?9$^Eb29q?7m#=S`BC&gk'ru3WERMbOT9(hQ-$1XagAulY!]Qf.3-W"b*I)Dk33>
%<R]0<:j+qn4($S(T:]-TNJ5FI<]eJHqmk/6h/CqsV9S[Gk;G.Af3a$]bdAqpR`c4cf,qNINt:QZqk/:Nk;nkK[X>@"_C@(TBAM1T
%3VQk)I:HL3[<gdt)$ZMr5$V>uWT>)eIT,pu?"m`RYd8?Hc.7b*n.8H:kC^GGa=Xb`05nM+ITYVX[m*a'O'2q<V+:+UD&eiPnr8%M
%6<67l?S'<!/YK;J-&[2_]j#k\hRL1GC\`A`S!!KbB<$ZC5Vq!5T0!P]Z2A9^6\!g7Zh7Rg0<Au<;75q<Hj:qlXgS)jdFJXX5!F=l
%.sgf+A%ha3`Fg+6OCG/,0/%ohTN(nn8A_9\"Le*p!)(i^_SiR(nX.s7XE>UHo"Fs)aW2,2/f.;*4TDii0&O:)QRAtCqYLY=?fgtg
%q>K=;@K"sC[ngdPcqN;AGBBo'qHd4[D]Q1Gf6QOrDK!/^p!%KMr`)-a5A`$CD&5t91Z75e0<TXuD+>%]LYnQHF*jb\caSg*e`VfO
%!O(#f5S<3cAm[/TIU2rM](AO>jj!InhOh?RB>+:Pk7Yur3"ZS=gWlpoW^E.>HNcMo[.V/EE5oY/4>'gl+#e&"K8hN'gI73dq^]kc
%[f8?J??,+rK,Y5R&td5-h*1?8HXjAH=m8NGp_b<efiYsns0B=_qE17R2NHYcV)t;.'I@aZaSp`tgKqO>\PtPT#8^UfV<i@NY:pLD
%[7T$kDH0P12dpkemm?2T0,;dX\%;!RjjcZBIF$dra'o!^j)qHo5G)boY+5:)L;gp+4YK&V\YJ!G1+8V^IPG2UG;5%_.Vb2po$0CP
%ag8r<rl!J1'VF7]p<nD"ICgoaoArJ<^>SO]W,'b`b3AV#;7Ln^](_Y8:R4.l]gAh:++1W3TE!WG2Y2pZlZV^[r9YN'j8!^t_<'6?
%qZYlk]BXjd*Lr_YK?$13c-,4s\Q57o`RB00-.(C1="84Up"QBq7Y_bNIlamE2pWPZ7=G34GiG7.ah:lVFQ;KNjpmD81q^#OeIBrE
%dCOkQ6j;;jXH!.siamObisApH<;l]HqdksCYdPCKRoq-;Xi6(QhF&kii`d,\`L_D\"P+%f$@#pDf6=g(TYE"d7@s/k+**-DSe^n,
%IdYDA`m[6iML9[YqOhphceeDWF,0]=-i0,9UJ:oe\_3s`h,QgS:=Rn?ohR0jE8B^=g[+#!klIid2BT9J_Yn?;ft3#'r->gZJ%e$U
%Q0c2Yrq=Xj,J[VNiItJ>q?5'i6fsTc4,'?kl4`s_FJ&Q.DlmXgeY;_aakt]7f[g3&W93$Y=WW$V2m)8$D]e4.Qh#ob@;f-,GFG"5
%1IRn1r:s"Al=r7J"9o=$2PA35:=lrLiA(8/k4Q3s]aZC\l7r53OGfR$/h%PU*U.17,MAF9qg2Q:kuJjS]K+CL;W7!>=$[#2,t/;m
%To'DP0+SfHLc8Ob-KfuhJf\A/e1[Tqea;!K+ItcNp$DXj([A8hZYkn/<R"cA4qSCe(KB89a'-8#fbZ<d,-fEj1U6ogFRK+0;XbsS
%NT)IO'6P>8Q'rSP^,o\e=K5sW.AVhXjT5*_*lK*Inu3,#4:o>Z:41:L.hW6_704M&-?rcS(c=)tklXgUr&:Xe<.(EPe<;`'cOKmQ
%brHDH1X4"=qa#-%H>t:4.79W#DT53(O;CWT.DaCF&JLgnl4%ng'&Ja%)!F1TUaZ_PBe1(-YBhuuW^:tfg*.;#I:tg)Sd7=Rpd!)P
%dKbZIMjGi+nG?ut+DSoX+Cmb`2[ahe0cjXIj=u@_"?J0ud0*"6J.f/%k^u\>JUeZ%2P?%>b+/6\obuVH#$u'Ge2&3,-L1QbdHfsI
%BP)V_?L8"\P>cA%BR[)flhO[tqoeE>[I%2mZfbBVABbJjP1;X%?55+OhqW['<iCL3hV>,9I(QGF>/TD5]mVY@d"!%sJ=5!9nsa%t
%(m.ua>?uQV9[s$3V2s"B*-2WB>Wk#Qhco^\kP^&-`TPR^jioF>O)):Y<cN'Ln8maqgpe\h2mZ2LcIrZ,EP/RQA\4N2p;*@o+2DfD
%NMkR@.P"""noBGf)U9tYT:?X3pU?_47c;\#^)ul7)iGfO4eo3XT`a^>qW!$7]8aPf'm703i5sOCKAD0@3M^L,>RU*$Du*@BV^9RS
%hr%-2c2=q%7@dA+I`u7#HkAA<?6e3M)AuAT(+us;p\%a]D!j9`FD\eN#7WYH=1^f6iWfo3Rk%_eErQ4HnEJ!Qo=V^@/M*IR?Z(>&
%T7=E@WCN8dp$<!+[Cc]k,2Y3E4OF:V,bJ_-4($faJoc5DEil8-lUL+e\+f/Ja?3/F,UIFH#b$U_+N;l$;Vhq^_NT@7Spa.S.g]+)
%cIuUpai-RU-J?QON5eiTdn9)Nje!p7^V'!I:`b0bDs7V4C?$ACRQG>%0#Q^^hcT!unK-S8Fj&Cnp!N^VnE[q/(9<8NBf%9q?ed9(
%J%W/n6m!KU,4I#h*R6jp?gKCthm@muKG.o+h3cOa$i]WroL12"eloK7Y]-P4U$=I_H^WdJf_UsE.rr*`J%C,VH`P]s_AE-IVrVXT
%c@ZY!>:D_Y^YI`%k=b940/T6uG71sJ0+M?!KHU'LbuZuI$JTbVpS*/CDj;r]N@3Pq>3?*Z7Mg8>lU.-OB(5M+VfVj[=keArQs*V$
%*j:&ZJ$`USqLorb?[J.8Vg524[rD"FH.BSC)i"rrF8l%-eaSJAk?GBdK5\5"2EQCPHb+WTBuL,'o`k?!Q"g]XWe9^+j/#uCfN3E@
%j5b8so?GJ?]5-TQLNQ].rNFQV8Na!<.tTEM=,YBcpV.-ebP]rB,?6@d`j)Q91rf4NqO,Q=m]Kk27nmJT$C`B>0oetU-6'n]9EtO)
%I9NRnl`tcHq>kE6X`&n]Ppq:u)!d.GI<c4Oo3`p"lq-/]K1`7#n(*EaV0DgMh",`kWWr%Qo,#qd[HXjt,.RD\nat[JX&sUm>:I_F
%p8phfMI3"l:i"XOLLRCZj_df!lKS;#Hm=!RT\dReA;dP&GiaA-3rZe]!Q[L;[J;ESGqiR@c9pgu"YB*n!%7[b>_=`%[WV0!I6DK$
%O:)"Q5mP)VQd.k#FtXBdMn(>#DV/1$Xj;>Aa'c'OU[C-Jg8Z].+*5`%rt8;i)\9uD9E\(AI=$%qnZ0:@SS%gf?G(`Vc+Ud)J!N/U
%>2F_6nDoe&^L5TPBu$YNk2CsPcA0hrZp5,"#jCQ5_h`Ifd#'CCkjG"ZmGlrFh\Aq<Abh()B;PB>EG7-_H*hj:[Vu7ViW$H;HKXdF
%8?34OWs@I_jnnV5f"9!=^`g<Pc@=\uIAb[)RkDNJTA>[Dde5t5*+`2]?ei8)m<j/aTdpE#>7*1TIQ]i"X5A97$\mLF3Zd%pG>IZ<
%)k0r,Z+U(8rScdZ7:+kq?W>VN&k1AeT9h0L=i3egg5E<1qUS:94TdPj=RK"%IsTQ0h7n_6^FEeN+A92UYdWni.tcofI/B`/U@A#!
%69o37#+Bi.W,q8,=Ol:=@&,`r)4%&#c,p*Ohd"TQcB*%e_F/f)jhpJ(:H+/jP)-2L4cl:Shbp`)0C;+)cT;1rgtBlY*pp=iac[:L
%]lrMch`ZD'EdMS+cSsJIQ_mog$/8S;m&^&3eBj[FpJ^_g2<013Yk>`]]:7`Ys0Zq:#],(<mrIge^&+[`KN&.V'`Ih^+s1KE]OQc?
%UPI9X,V:>kr^C_j.-LF3A5XHb:LA:;X/MqnpZ_)46LN=UG%("/i9?efCa\C1\B#+4P.UaZ*06kco(GPXB2A_Wq=^GMCN!s#S).`>
%fEeWLF_pTEq_VV%9Ddo(pGH'K%JqebdDhBiDKGW9qrI#(\+f4W_P+8$CMn97a5J<MaOe%nY>:5U7cf]lZ[OWU:gMm^HgqgSg+_CB
%a-$:@]2d4I8`@>\QK+fh'@t(R&DV%`33Rc0'(EKpR-](/f.T>dh!GkY::>-cfN>_kn-Xj>h7%cQmu\HOS!SWAMK\MRJ$I976/ss5
%@)*dG.%VK&^`TpYS&SF_l$iL"A7>Ado?GSJcb8=P]9=P774f(7>9DGDZR+D0HFmHBI;BEhUJEL3PFmun[=.6*f=Jr?`Hh!qUP0W=
%*PPL(jN?f_h6>=MC1aC?"s)'OW%d'DCE&nnQfp(M'rHD/EQJlbof$804o(Q$@sK$+n])H8)ilUiS!,T]NSmb.6/3]h\h!72UK>`A
%:96X/M->NXS"V#olK<#51j"HJF1]rUWe_EI]p`5!m!J$#h93?a]A#"Ln+Lhih!'@ca(Bl!cb2^e@0MQs<*<jL]?<+6X[dSR`O>8j
%c.Wkq4XU-d2M0J3\U;oL=o@g`99?2-elLm<#CXqXk0qLl62?d(g3QX'e<>*G%GD@>P@OFIZhMcS#/M5M.Go)'muXH@pLbdiPdpJb
%W&G4;<_kY87W2bpMVY1'<kctkr/u0p#M8L0XV5L1SnVVKp.=pGY#2@\(<^R&[s$NK*OJJQil^,eC1';4oL$cronJpG]2eZ*IKE=.
%<bHd&4*[4$5e]BE.$6U)IbMG](VKXK&l"CRM3P4OG!UUrAZm$Dd*PmEZaIGiD]*fpH$*4L[960l+76pmI!u<(hp,Q_oUF*b`qGR0
%TI3r,9[:A>lGVrbXmffCs.U9r8)<ogUarE;%i8S*]gE=m`In$S[1.!=#">t])\42B9\J'?hk"]H]I2MVmd%'>(3m:a]"hW0]Bcl4
%]1qMa_33LDUMikD@6UjDii9>Wo1gpaN"pqdn,&I5VdKY9XnC.lX[?8ODEtVu(EXJ)Kom8d*r1fkLL?&_DJsHbJYXC]O/gfi0g/!t
%0eR7_%!32,6&aZ>YZ!H'F,)980K*S<>6u2'Wq?<Rc?ZJD5LE5j#pFr?WE%,'(Y,O5rT_jIc[B&C=ucOYrDP`C>CUO.]X0m>T0M6.
%1Y`:45.SC5^:Ue`rok/bU[H<:Mm%N/JC8ps!R'usAaZ37hF&h2oPs]oAp<M,T>g!>ClEDq%WCM`LFLju/Re[mHZ\%]6+OkMigGmX
%DQNIpf&`ZFpU@q4])QVoA%SH]1/q5HNqsT,BW]apg?7,']DQWsrNf&Z&O=R<JpUU:D`kSCo6Jl*6)rJXd2F[qhp45^g!Q"mn)(Q]
%CjPn*pns"^pe2WigL!/;cS;?Y*][#sXd(,D@*G`Z=cLMeK@Mn7qQCZUXcp)/W99*h\%d=Q9j/1)1_OIK?LM[6CHqQEL[Q!D`P(WY
%^O;;-HK?2:m.2kg^QtPUbr;m]-aNQk)d'<sX_uG<TSl0s5Uu:SIrFAGGea6NZE`ugGs:DnlsQ*&lNs%7_0ofR;$3W]^+HRoneH1b
%T0L;ci3RXK$m$YZje&b^e39t#hmC-6+)H@2f\Z2RorZPYcX27k=a`6)n/(n8n&&5/CeEG(WFh=#_906RHL't#MHgeih5-sZgY-q`
%4;c(e$+@Y;p-"N&47BXZhg&j[kDd/iLd:q1b$"/2fY*@!&)WtF+$Tl=H4_.$%2Nk9XQ]Z$ooleALW*'^GIJ$$$S*Fq+4d+IcjJ.i
%=P1&h(="k>X2UW!iD%/tYkZD&\$m0GkIo[Mqj"V+gfO\BdLgWo;8q,.d?]T1,gI@8p%N,q4KVMW3s_^rpF-/2fgtZ.bh?+nbL`"a
%lg_+Um4XBi36m>@`FlYT/VCV_?f:_NqTdsH"1e.!eHtlF[]ReE&3-dQSlo]>s"-ME+3bqC>eBq`71p?;2o7dchV)9/@0/'b^iVX&
%DH.`@L"]kh]tEC?gA5d/5C:i[g7Db=5PmHbFC+2TQ2gS,8l^hJ!uC-eR8aKTPf\h2(j2ujG`#@u;dt@L(Ge.47\>\nZo].Jp?[!n
%K,g>-Nes/#`U2^TlBZ2u>*0J#p97V9<Qgs!;M0U:O#lsr/tO[d;0K^%<niHOoGBm^dIi8G@V,/n+i!?A32iC9"CJtM.U(2S"`g/L
%:PQgO3&"*0/?1M0FA1'(-n3!;QGPUW.,nssWh:"G2Pa9.8J-!Q/k+;n8rW6G&jd0Uat=8@`U/VaS(`'2H#k!s@ZI(WH5Oi8DFP:O
%7A:eDG%@:Ks-+pETbJG3KV5c>2")h-hJnL3oV"tT@PiK`)1>1WF-.lj=m=Y[?oUh9-cih7!>dULS=m)@Y8o.7dLXWa=om1+G*'-P
%^@d1MUSI+4%<+"o_4ahS`&;/Ed/tpn0j)Oc\^=#a1kB*$e-e]H`aH@kFj;O1KMd584fG?9P'/1$+uZM]*/%^u_Q#/>$7N1..b5<%
%G`%`?NVX;:<;\<MGt8FD.8T)ndNDmEp#a&C@d4GqIE"AY#9)oIG_28-U"Ls'G+`2NdAqBSQQm!f"DVM[h!MeSS\2,Wr^rljPb,'c
%H[S7X2L0eqF]?`$3Vh<a\guBnUJCXU1-A]["U,BU6=1Cf@Sp%TIGqk#XkpcQ^k$:YI_/GfO+n--#PAb>h$cLk'sM)Th.g$:47-X^
%f`%qJme\$;Z/rP#:nIbC-8FB;#'*Ti?`Ml9lJWVcTr7_'Oe\,pgHZ.J9n0Q4(Zr#E^$mI7(>>l?SI45Q!^H"KokX""8Un_+n:P3O
%fhXZj+4p!WNfq.DFF*D$]bO)_Da$o2cGT,u.Wr\L]R`CS@2PfPf$:glBde-:drt4QKA9$[4QuQ]Eg"iPeD/'-H-#@),eHggLJ8@j
%Uop$oC@iG7\Dhbp:YZ+568T/AdW^]L/KX(Fh3O5h'"$tZ8*dp\<Ws2Zc\tYO`Q$80FY5djkeF+q>tpNW?a)592Pe`YF_ToW)Ed\%
%eE&9u1C*2!q2Z]>jG%Gf\f1hkE"lRlHGpQLhOSk]N_@Hd3H;3K$6(JhC.IIck"2UYDkupBZna]umTWAiYeTJSL_E;@/IGaAl4Xl8
%R:klh?"FQD-TI[NXkj'gC!*D:<2PEk3&c7IW'>Q]C>-45S85jQs"raK$qN0k"q7&q21C7=1MhO?iaNMqheB0\>c#n5.JHHr+14l7
%-HGH(MW$=?I8AmU51%]>9(5GY^ReS]6>D?1KOL0;6A!t,%a3aF]DY4&%aF/L=1b^L`H$sX@1@!1hUXG!>V]V,Q?YjI!l!_%cclAs
%]I8XSY?jZ;oUF%nVs@t4pG2AQXc,NPFRmJ%()pA%.8stYQjY;]G.IUQSRQ1_'9lM%1@#ba^C'F9>\$mdpP!S2GJE>4\I&mqd#Qpl
%KDdgM=,528e_^:Z[,s!EH&Gnlf<71UhHE_,nMgLCO1N6#r[NVO$2R"*N;]HnSc8/O5/+#?A!1hZq3Z+]Zfk+p[KRcsi(2j#ba@>&
%K-*'s*I=h*G?de>=-Ye+S`R<IB3%0eAb]jqTZOH,ee,>"TUh@NE/9#UF@DL8aU!R?*QN5o,g-PR"^&E07Bg55f.=5(aP*5>V.A.u
%J7N?GG.ju]W&bC)UUJLT>l#'u-S)$ncXBS7qlW:3JjCt'M/JW+*'i,tK(7(LnZX/M'Rj(R#9O2-OL>fUBs`>H<4Q/h"`J`&aKl`r
%.da;fi:ErV7A2X44Fj"6cV'ouW.r0%LLI3sJ3>/a=jM+nLB^S$(iFm8Q7F5@S)>u`*/E%?GKkgd#p3hoEC?dA-j&%.l%;c_oEl+4
%Q[T('9Fr',F4Um^6]V`]NQ2,="?lli5_I<Hp@+>li1Dte,)f*S@i$,A"B)-Kf5p/8H56pjU)<\L,Y46n@AFni#pJGB60R]pmJ9rn
%AK3_p=tksj<mW2R&Q1l.nZl&32ZcR(I&P:J8ida2\i)\Zon,pu(=,TjHUNO>PH'-7j^g$ujj\2bqP$C(%R?BeNibRiJPd"ollBHT
%W+BUm!AJ;cKP:S;L92r)"iR]OR3B_#ksYmO!JH>'gPnI])JE/lorJPV98M@WcinFKXqqEc1%ZrWE=g6CZ1tJT'BYS?dO7b+\K$=M
%pUOiY_I4XupeF3q>9%NB(hLn"(sH5Bb'mAH#<LtAh"l?6q]PCTbc23&fS9tsW7$sH1pFWup_$.;AiM=K*[24SSf27f"4X5hGRGU@
%6:KjRLC2`h=^7)7LBV*K5pnu4%Oa"8Op$S8C'&K,F@'SG%jOkG9@*gU`EdeDV<a9M_fXi/G";jm(rb;$4lSjh0:<&c08?P:2Ui53
%#Yfs(Gs833gLjZG"F;9XH[<%d$qB&Ml3Sk\UuTKM%liRi&4:tp=tbL,B-m[0P;AmXbQ&Xp_E]$80A$71'mgOKdOCQa22$'G5Tl9W
%5_^!Z4n_$GCH`%l"cQT<mb&(_$A8Hrc6j9YC$D=s_oF@L'2_>c%8bEE'LVie3IX5RmfcY*@TY">`.<pK"?DT:^O&i]+A?+.KRmZg
%MD6RbA)tPmB1nih>ZqYd,Xunf[&8o[_M:>6N$(:JU4"0koV((LQ=<ab=93IHo*B>U^*)EFoiN*=!'8t;;K$obAchVG7[;"b?%LcR
%KF9h'm:T_Oc\+7p%nD:WSuN9bTWNp9'Y!3G^<`&=%+Vr*Lc@AM8^Or#)CFUWTcekb?4"Io'he`sC&,9A,X<N,QZsKpiOEkY3CCZ/
%poChu_>nSl3[$qE'40n%Le?7=OUf0i.d=Ia%N'ZC5DT<!8g'M_RK-)6d!ZZ%S-EEg4VT/,\0mQG0b?E5?qr57G+&!QggR//A-A24
%BF2].ZcpFG#Yac%C4bZD!fR*if3VNU&V;FDW)007LJ^dm+%Q0q6!b6,VZ3AJi],:LiG(_QGWsfI%VTZjGnF.65nFAFkp-i$h?1qE
%%OUKMXc`L/[*sq(\V-eME3_XB*5O6e0O;d+!>WOe_6S''_S1Q=4!['$=s\Q`ioVp^5m`Xlk=\H"?Q<-l95.(\JTMieMh6iPB8$*5
%2HUPnRIj`M3e05h<-b][#7(e[LK]+2W1mb:#2pK>E/!=+Yf`=:?&_be3f;L=>#O:2+>Op7B3LM2\.B"SLcm,koh[Y/Ut#N7CH;o.
%W70"#0&$?@3@"]AZRh.fS!]sc&hoS6e6`5CA4W)b[S^diZgY7e>f>&],#dfqK3M['FrOWE6:RVb1K;@PbnuOUQjXlM1Y4mJTi)hb
%;).k(W0ntt4:D4K$-/7G@t^Ne$I>J6TTW/'_4G2/TRh*uo8+$+cDDCc)l4NZNEfIU\hI%N'LQ,lHjL6+!_sIhqDZ3EMK2FAkFP>:
%?oWd%AaG0p9P]4U$AZW2/g7s5E*WO5Zq*,i":*Y3'gu/!"I>;)E0hH'3agpX)H#$TLo(58++^(/d-(pS6:8buOW?`7!CG3M:_nR-
%/R-_UnCab(61k>m:cu>hlAtt\s8C1$;WdA9hm&>4hN=B=EK<bF0ol\g!`jo+F#=Yj*^>XpB;"6(iPsUZ^q]-i)3;hl6>I0<\4"(g
%=@s.?!lN6`Fq?JO^QFcc=#I5]K@g4Sd#<Mq*Hi$rU`g#P];-1(>?lq<:bh"1.>2=V"_DFhDT`=87[h+q)a+Q5UpQOe]gS![-!4)3
%Q*ID\:*/-N0"6JU*#m_MTG+/14o6VX3tt/NVBOS4BY;:$*Z?TK5T<^@BGg$TLP!q6Tr(=A?<DfN5aS@I0[QgN`"6>;msr@Y@O0rh
%"%nu'NsT!UXWGtL0m)2Q`b8-moUlVg4"LRDK81L_<0`#&/K19/9L]@3TKUjlXhnA$3ltL=?'q08/c`_o(jBt/rAKe"$56CW7Pt>i
%MV9l_m0^O)Kr$%uOM\*@5b\Gl:t$0/'MtCbhA&XCVGRR#H-I03I^19,T.JA99OP)&H!D\KP(S<XS/P-b1,q+FGcGBo9k<Lg<Kf3[
%`<+G'_5\N:L>DqP0X^QK2Ql6tp;3Nb<[.cZR=iC#,#D'YmTH^_/<0_ZUeB<^9E\';7gG#?d"n5:>I].d7c(]ia&%;*H%gg'`DM>>
%4i)A47gF9l'_I?md?tHZ+KC*W5RL*ha/0],A4lk^6E":`Nb)n"TOT%+b6SNN^OlALL?g]-7NK,UO+uKA%MD8#I#$k9:_:"8*JDj'
%[&1"G4=LBW`lPA*%bcYc!m@#Q/Cu4.Yh4Q]G:DMTbjiOLO6SR`b#"$U@'AMX>"[5bZhK(`X)MX'PtVT,80&HN02_LG@'m;qnRmVd
%%)[`\O>TJN:sbltB'b+_qg`10;CuEHpCs?]MkOOcRt6V.%#61GGXFb5IX,XN"B=bEAJ5Hl;u0>+'I@%gZ''s;K;KhGkZBVW6et*q
%<*J5D`1A$-+[p-N,'";=9Qh#!0EPY@E.r7i=@<GAm%\Vu_$:FrFYGcs<Y]^nO9(')M@+nnKn3U-%g?kN2"f:)$Q4Ml"R+kqWIkdf
%9a(s&fHLkFk)c_c$CZ*lTEB(j7lnL0Bdaf]IP]u;l3C:i16+JUn`j]1pFSH.9.#JL=kmTiW#h"NTQh>q,7kG+(G"3m&\*B*+gf?9
%K2AKJ@<n(c(SqrSN]s5BB2F(ChI&"$N0n43q71tgg*LVn43WIK"Lu$8hCib=1h3K"m0'Bt%3IDJDJNL."uVKWJKZ+eip)Tj/GdT-
%;q@">,CQds`DHlL.3(ZoQ'EPXB\\t!e8j(PAY;M.6i(sn4!Y<rH?YD#6-m"Tf,3r1@%Sa"@_a5kX##YGqGgcgD&[]d63PkC&8^q5
%%FA,F)P\o]B*-gC)AO+5O^s'2.*Q\#bA^:Fc]T]2X'Dt^mZH6>/f**Hn50K1O?m?/6<>G$!Ch4I"jBq)RajqPaXdQf6TJ8[_%#+o
%EUI=)K#@b--J.jRFWR6L`j%9=#N9)F*@2[PX%`ZscCef8e0hIgI;Ye/.>h`W+88$eLj1-VUoC%+,Lf/)(li)kj)@uLn6<@#TY2mq
%<#Ch$WDLc=b!Df,7cWWnSu^3L8.eO1+/]*(YVr4=;G^;_0i]G(JDPDqd!+";#K^qJ..3Glj@fg.'u"mO<Z!)hLP^BhL'!?S[-E)+
%$X$RcpM=*;#\@8QAfa'lX!MWGqofATHlRu$54)"S1>E/pR+\1U>3LS="EoHn+<Ws9i,8h%9<#@+5W+.l,Do%ok]-C-c]=Qb2Hi$t
%"u:TK\+QPK"I]oZ28Lc=bqDD3>GVOc6M8k+;#C#cOlc['Pm7LD(t^1F,S>/9c,V/a6^'Rhbn,%5IRcB<YsD`,P^aFcae%fH_ZirX
%,K8]9-7%9]KEk[M0Jr6m\HNP^D4jmf=SjL*a;Nc5n9kIl%h8@F&C)u0@R)P*K!o/O8s0N,d'O<s+c-96:>%fSl>Qc_'uGVh%1$.I
%!i2K2K*JS@jh_lXOA@Zh8MF[$;_!I\5bP8g695=H[AmUh[%s!17[p0mj-V5<]iZKkUkpP!74:E\/mC=2>]W_<Q9:(n"]7Yj:\L2%
%(_o6.%SfiR@%<T*3mdI9S9HYX>X=[Q`^D7i7JkXgp<()fQ+4*[7Y-jj83DXk((u6o\oGccC_i6acV5#^:Y7GZ6Vo_sFqTo(=Nl;/
%,!/'"*IlX+pKf7s$]emTR&+'03bFIF[Af1++N]:'@3K*E+p'9c2I_&=!ANd=Mi2L='buX7C.4*hU2T"1h$EEXR1RS#$^aslMG'_S
%!@Cec\i,+<)q-R:AckTi/Omi37R>8qEHFKtWZOlZ>hD[;gULIjTCk0X3'pm_'QaO&*^H;9YR4Vg:SG:_.9?6SM\_Y'8iE&?RDK+T
%_N7^1AIj<_:L_F_,uakPZO#5$I>OVSHI/q16oi)2*igdmW'r;t)NE5.fp9,T9Mc_&\eu?Y3%;(Z@<a+b1'U4XP:4M"gGLH:JV`G"
%29A2t:6HT)0o?E:[fIu2:=(.I3P].[*gV8LTI2lDX"4<GJi.9ULRQRc;B19CP"jG)$RD'>SB8L&`5P<fJ0AtHjb1N_XKDhb8.O$,
%F^?aT#-\6H+fO/bD8?ZBE7q^b_-dh5.'nVo.*.h"_TLk'5d5eX<ZTm0giKV"%?fbMDFRgDRio[]K+r[VZ4k2>T?128&R\M<;3Nun
%;tI0o@hbE2Vq+72)rLoL/5,\4Jn>G%4'nYSOHRR4Mh$WG&<2n:\SdSR+deo_6?P)u?Md&e0TP6B8]G%WhbKErNb,NL"<s!re>*R*
%(W!bb^_k0?Wgf-ZbnHn_[d=LOm+Jh6.-NH!X"4,&Uf`0pD)RdS1<JPfN"Km#e;0*b=IdDKE-DPSCh"YL:D=M704L285X]XK`l[g(
%/'6i`9[FcQ\f'C`XVmKWCjCDYaUT.ggeAKApYYa-U,W-Ig2KtOYRh#T(r7Q!)j)>QAg$.Akm\9l$(!"HqR.3<3!)d:2/8:%0_%'C
%j:I9tCndM]ZIg_RA:`.r!@A2f;%kH.R2r=Yr&^W4!0a#JJGY>g4EU]m*OZW+3g.)nF^4L$E*lj%rLr,0!oTIfFs0S=c>YE:[?q^#
%W!;(nf>a[L=J6FL-Nb+d1HHW2EKnBk&.re/;Zg'!bR]b%>^/@bRfh0XA1jH.CW"@t:RT*dWu;=mG08c!$A-:H/n\9l"I\YGW$X3u
%0'Ym<ZbuO3j,WmfB0]o?bVg2.;en:\a(9\Gi[u[?HHPaj0)Fhk<g0:"7iA_">q]Iuo`X\c2Poi:o0=ZK0_jicgK*`qZ48/"PfSsG
%=beo_1"+3\FnWZF^u;'-$TGqF9[<@IN-@j.>oFq/TZV=Cd&*=](JG<C7s&##WZ6Am7VrJ<if9+5LPIZJ(Q[CN"!+hFbR?uH;LI9c
%T]Mf3-&`E2._guRE<oac0prSE5fSC)68;CUA#WqCQ:8eGSu0:[mN;L&_BD4%!@\_4FVR[ue:HULa$1PY21TeM5Usr#5YES]kqNq#
%%3B-p=$Or2bGJZ:"C\[W'<9%`Kjb%VeH,CMV-S6Z$h5O"\H(gIZ`t+0"g4"!%0_k[D=hSM'LslH6>lo6#cP$(N/(]+,dRkWl>>Yf
%Z$FUs`Xo-PWO@VJ`G>lWeL`Mo7cP(IZ%.(P@Zh;eiNP@/k@+:Id;Aq!@Pe:f*Y?MTPsp]?7kHeg,6h]H+G=E!G#Vc"\O#'dY/iU#
%jjQ#BN'h]M"[s=5XJCHK:pNN8O*Z%fg]SoX=7]Dt%+W`f`(=FC5h*3M"AdO23`,'ks,b'?4:I%0CP-uSR+K\%g3R8Y:)aR9\)$7V
%)E^sVTR,X?P"00"@PA-jp])ka5oV&S3jC;`IQ/6HT_D?_(H8]T,^*1(1sXM1iLllM=(RMg8RTqcNt<n^;+>gmV0E.D8nS-`.YshD
%2nd7_fmXF6)TXu`<'mmAU-<c89-)56,:>.!ipf*6)*-h,=_dug7!60h(!K]_Ahhe$c&1(0#P"Vr-pgaj.7h%;@fVU+Tj>T"d%J*F
%&181$QO+B:X?l,SO"8;j<&T=fnJ!=Lj\t`W,;JtOIU.bqP,Kc#/h`f6,4"W21o__cqNWJjqNkZM^(Llj^k=)U\Jd>.3]O5')M,GK
%ZocMeX^7pEJ\Yc9[r%e73(c8-/._t=;Mje*YGH&?UYasC<::C#X/G2VX'QU'&-td#.#o6,br@1l+k'RlYj?FOodr;jX)k"SgR_9$
%(\Frt$PD#f5+_Y/l7EH^m=t<]EOc14Scf=a4P/bLFUAVOGXttMXeSb1D$=s8W<48HWc;lUkM2^>>;:Zec>5eG?"lCE5d`B@eKi$a
%"G,g7Zr<"n%6!/ONX>[e"KKue/N,<E4B9s%O1?,unR.q\_\R??L1A_ql%B^AQ>-[;Q$?gU%BU2l<!kbDCHRWHUi\(BCr8Lp/Q?/3
%6FUNJL;Bd4m8YRbi$VB\e`,6oTZ?U<27P'RWCB9'cUc;;5@",:24!8^`j;$S9tPpQo`jK?Bri!)"4/1D@.eJ<ZQ]t2?U$X=JEMi'
%)ej.&i0pTS5d!.75aiR*oJ8CC>iNOIh+pB@Ml"4Q;P^p0ZifP`%rE'iKfVCEWH([k:^+\)O9,V+lp0;A\s1"L$D.J,^i>`J9l+om
%ClFd$9aPJhFn-BE-FC`Zo*1aFgVR\R>%JiX^a/Q1(nN7NG\hoa(`j5^9:pte`1]!NEKN.F`_!Sk"AEbt1=7f"94uV%>7=:R!X'DS
%(I1)IjQTPd973T-4tq72eqK+9l<3`m/ZHb@_>S*LmL5Z>7>-;e*h:[+.(Y(lYKmPIbRq9@^FZ!Ub:Y(CF7MbJQ5MHH'eLl-,<[=_
%_F(l/c##shD@9DFZiP'\[jX^HPi[b,.*p>b\Uu@<,m4=?F>ed&DHOn7a<_o=BW>X)X5dg#KqT5WX#Q0gXtafaQBR:<&oIj2:a,`"
%I!g_oPC[IM6$0a]LKR-eE'SOuRR5,u[:gV]WG^[;)QoYjPib<'_4?"KOU9h-*UI.lL9e!:m&8Y4.!WX]"BeBD-<c;%GUu*37qN4J
%dAVf8NkUpXREROfB<:Rd'F+jfE42P/GO.=V^7+CPVM0%W)#(H2"2c+IIpfelP)8FWR,['!C3[Onig=h"irNDa&ZKn:D/ol9[_qbu
%oEb+0'o+<=6jcT>DMU?)h&>`U.6;bD$W@.K0>L;I8mOHCVt5om'ZJA<XH.>RU9j@E-&B1IJ`uJBkrRTbosPP*KSa/K#8S--BZ#K[
%0m\$s69Ui*Ap%dZgNjr7\#UYZFbD#TYb](-/&B[h2Q/M<3E$5(g#;Z6/Y^+hJZcBS#K<uCD^_7ad\AWUT&XrmN[Y;RB?KJdBIS]4
%\03'5>8Vb2&m(i72E]+_8s$LKY5g:i6XN7_.g")_?A[\#AEej2NGEM97$G_jQ=9iB=,)t/h./h/;.Cr8QXgpf3Y"mp!S7^DlQR-n
%""btOf#s@K&TSkb+,=_\+m*G]2,JjD1,!-<-h-W)JqA/'U^^bZb)V#W;$i,-,&1VV$UN4iUC6qG<=i5h!O[X)P5WjCU44(=a`]qQ
%$D)bbhL:UNT3hB<l<q<'oJNCL%0[NN1B.H`'Ls%P\`#Cc(*tOY;26S2+6JCHk^7H1,:ggj7"HQ`<?N/_.e34o!>(S103Kg8O=Fls
%NnTj1kU1-W=`*Jm+E3LL<8nXcNPS!a`H,9hkr,:@%im(E:8!j!D)l>WoitQD;2-6@&Zi1!Nq::g&2_GVT![\E6Z%t.(^`_N,?f#7
%e\B%A'A(^_\+T]+-7I7u7`8/1K83BY97l@OSe*>!=5"mW-igZ)/bIs(&*![?O83B$0o/B"W+Q2HDrtM(`iKYkM(DYtDH7tc]rC#$
%#$=c2d#m8FW4,&#"&.*T5^`lu^uu(RJk.4p8`Vt9JSHXoR&UsrP_A>5)H&L.(_@%Yp2gaCU731SLnf;;$:]tJU&m7h31]1&kp@b*
%@X.2KD<.YG=!NED-T,'Gg@`n_>_@P)4;ikgkV=:K;L5-&(6@]&dR6`J'FiCHOEX[AE&=R<\d&=r6e\:CT-4^^DkHW4U*]t"BJF6=
%N^bmrhHUsSDFJdoM"40/okpK*[i%'8aP3CJZ%J?(qMKOnQ`UX!$muXM9FDF*6NjQ.#\#_lJC8ZZD`1Gd0ni=EKSdK3-nO0'fgEDd
%N:)!Yl@l,H+4>-gEetM\JosDT*aX-RlODIML>cfBDs>7OK@(Gu`KcPFGj(g"egk+#P8g6m(lG<_^;GOSCL+hse>V>*YJufpO/!2f
%J3F#VTm-m?FS%.R[$]<"9dh'-Q'$qC"qZKjn?O/l3Wlab:lb:W)NUY=@8d:XCrCi\2$IiPKW&O!q2/$5*2OS5N\;Ct^s,AQ\Lh%N
%o6)*PZs<bc`D@B$UFu^Pd5;>&N>bQ1Cr6UJmJ.OFK"EEd\7$T^n]6na@q%/r$0`!]?(ujH&C6"ZC-Xn\*XrLOa0)#a[2Fd8[%`:"
%!5[fl#]`l^c#q?K<$N,HXsPbLAoo/oCS7H;bq6T%I8Sg%2pd&jD.Yd)?-be#2D@0_KFi3%,oTUui>BX@WNI0JC86,<S;c.&L+8&t
%8$>-H6-E;M,,d*uK``9F!I7.O5plk`>8ajMIFEh64?\!Hdu*0g29Ok8*!]JL!Q&]d&<+'9!jiY3kt4mCiarY;dAVeh3Af!#]>l49
%MpoWUMIqcaeaa0V'LOTr7]5_n2%3!7)T(6K3Q=c6eKkH;;Hl!tU<H\c2PiBjo&Y*6KXa`r5YRtnU$!CSk"$Kq#\\R>f,dQe.j9Y)
%R$l8UF_ZjQ/MM;EeD>73$J(!<b\:eSGbe$Pqlgfj.;k!DVg!TO+Mk%J"H)H(LuI2<p;@OW3T(`H!OHbOD[K\F;pk`%JlGbQ_]+eV
%>1TqdQ6$3hQ=?eHLX+"*0e+"I)UDogGl=N\%&AkVa6#&nbbYk<J<jXmUO[lsd'/8`W)828ST+a?AaH'_Vqa;aB:P'.4T*$0gCeG`
%F4E9p6oi/ChnZh?r=(sns0@q\qe`h`jb&!%1#!ZY/?a(V.&S_K_3lJ1l;$bT7L'>GSiF'U%D#Vk0%NC1<:1+;I\m6nJABbqA?p72
%G3)':@D"(\VO2pDh`XKS<_BViU6sU\W;?V<-*Fi';ilVnFXDdpD)R6OM<`Yb6YS"fU<VpR0Ep&F`_ocr)Q1JtQ54=1BB#@.;[9Br
%nJ]a]=-jp9WAg]5n5`XP984A$d2OIcHUbVh+f]hIqeD_\#+O2&7Ld8_W.n6g<qo\^NO+p'a8q.7X$DA<nr5*D9$T7sMP2"G5#ng(
%C[bmhTI-,+[hMIn1=N.=pqALQf63@]LSr8aE^oC/?MiiHdh/5]pO\X`"j"*fUOkL<TI=8o`OQ:`FNL9C.ns"!rQ6f%M(?:H($];9
%_s&"/"eXk#,#lM'aXeH8$P=QdQ6`d2E<3l@3LQNBB!,&!!Y%Mm"B14<8K*[!ILSZbK9OuG\rhOkJEkQ_!NZ8N-mblj=L``/<XqQ(
%BM-&hZKY=r`4\GpIug<<$u`kT$,c9S,B]85'2XU["KDH5GdpTS^2ZHVqcjt39T/cp6p/@;Z"ZQc.OZun;_!U?81):E&n`S:<hkWE
%B*B#le1Lip%*%U!Z!Gs](4_//=[C*iV-+Auq4fai"::._pmK(D,KSCD:m<u$Off5l42@2??6qV[j!hiNY-(Y&pB4Zo?q,[4e8S'n
%Lb1ruER,gY\YW'U)\>A8:lngsU8X6kOYs.KR/4q0LLIdq</Ap=THtm&%\o[gpc&Jsl0N07L]JCC6tf,7<*e.e6/E$rXps72@:j4.
%Q,^hoYV99mBed9D4<.?f96&H<1nknCUJVJuYqKS[:0;Y_hME0CnY.6m=nPTJDXWt3ES)6YfgCabP5V8*Z@T^u6_bQ;nGO%01GFLk
%,h->41.5u-GWA1"M%&OCDkLd!gE,_qEO%A[g#5,#)30khfd_N-VRYr3X`b\]G,^a@D[1$sf*oO_&3@pS'rpRoTHO@"=")T1Ou^n4
%_MuQ8OUi3JP=<Ar@'mTb6Q$q$e@pj%JPt2p+-$O_P_Rb)KV<<npsD+,[BVB(]2]BV9++u),%@>39G!OSO$OP!)GigLN]K-sNS<S/
%#1,"mWu@ud>(dqUUS&uKb;-*BKVE''1o)e)0'pPBDmea%8Ie1@%@H3*-j_`3!A?1cXu+lf+G6=(W[Kg+$i4MCCG<U1pHuRV@6ocV
%3jIsD-u(\-6NX%J_JTeS[pmX<?bW9@4U5rJCc*dr1sDC<Sq)N[jD1lLF'M6k.Y`Qcg+1<O^tV1<$E;$AVJdmigF<Z/i'q>ha))j)
%RuTEP$2(GJE4OAPFUb^R:mL2^J;>m?-ApO6`<3)Za?a]Fe>!UJaT4kJR+uNJN7k4c$?6D19!l+L_q<Ej%]51B@6tPX-E;n4CC>JI
%^_`h^@HG9@H+6G#U"M&$P$rH+c&'u/R:")V$6(ptLe8?2h2/->3ut_EYfrcf@$uY6e2jkT0rln_L5CSjR%U2,W%7)b+CbJ5iGK9@
%$'+!#\Ln[)NoB+=SI%7?jhYA\W-&c2W&.B-S#Ep&b>Gkua!)ErNhHPd`?.V59#Lim#"@%/W$XU+0'q?nDZZg3.fCR-1s.%;ndMj6
%/NZub?B5p_&@uipMPr@/h4:LUYg[$e-HdS?%@5tD7\7fJVt#KZjjo3(`1W3Z(ojMmWXJ\^^_tBPI.7>4EX_F3["OWN);PcP9j'mj
%Hsd_*gk6k$9iQ<aW\3X[e?6WoLd[G<GVn9CZ)@,0?]W7]0VO:>'@g&PeV/EEE[K]]*hDET;![5fG@QM5@!7?^WR_n#O^k,SS?TG`
%R]+bm*0)Bk<$4"U:j=Wm9[-tFT&n#T<=Fau0i:Ye=BjFaW)[o+#5D('7Egq;kL&I4S!llL.A#bi/lf$,=bDO?^/@+SH6Z6+_T70p
%4W/gRCFRDKA[ou:']hWU)CiZ3e0pF\VQ4S0Z,^^g^RSCF-5=m;Jsti#[]jBHI#6>iD'UAD#4mOg5KPU^?L24Rb>h`Wft%KD<19KJ
%9iP?LkGVO9AHmtqbOFdKl,4WeI!&I:Cr-/R64?DICXa#>C60gj6>>3&:G</pQ#rgc@$X/-1g$hc9E8/V;qSYfKf#6kmR^A^f\<?-
%P?AKS-F5rFq&YS[mbhAe1=h6fKuB@O-9A.Ym+MGP!g[!!D<<*HAnN\KaY4,-dIqHW/)?M"a4`GFO@Bo5I>M\HHQ4kWZ7@-FA=&"R
%nqbP&]QllCFY7LIKL/R1:m2mL(3XME/"0aOe]Io1TioKRRGaEknKMjC.71Jc)%IUH5lm*&:j'dV/a0LfXMM/t6A&])Sd,u"V_MCZ
%nN1R)KL/j9:t$E7(A9<$Q[iFJh;t8:(bDSFbEE?Un9o+-[:nUD"0Is-O$OqO-E'!>eJ<<gC=Zot7&%dX9K)G#O0bqK:/$OT:e6NO
%C8.KW_QF>e-=@_)Ij/T*5]Oj)V?pC'W2DO6,)6B/W+=,`MF!ASA>7e?MQ.'?Xf,OCehCbo]f!HCc&"U/EA,aV_>lnp$qq<S<>9Ul
%J1EoHi3*CQn/>'BeM1oemp]4hQAT&R.)tD&X#>4m$o+@JM*Z4nVP&Nc&aK0SgpC!mQ4fk8@jhOr4Nl1CBa4p#5p0+/C*^[cP)LN4
%)"#sD-m_ikrHX6TqF-d05mnCI<--5SJ@a@/TcCYSU_W5-D3(Bf&M!/XpFe,+BkHDnV'_R+[=a6Y^oD0oYQERRF'JFR3EI6U+07Al
%60hab7?6iBV/&1BM98jB/s&2fL]jFi8WWKhV1I;`Krn='&7($c[nA"3iFX&eEc"&P#^)$a$5<SKRf<SL(ZnAQ6&E'&1+k9?NS=Fm
%<RgQ=!5VfpgME,J)1X"Bdf$eb@:SVoDaZIRFBaf"U3MjT++d+4aU40M1udP5-[%d]X;F8-V.4m6>8a/=d9F>e7FYdm[i`Lj>\ttM
%.oUkm_B"nLj+Gj4/P6U-F[h5J><g[.F&(=8\[I'Tii'\9ama&B.mZ=aV4f,]Z]RVkK@Fq%2m"k`n@&K6%ui:)*W+:6O=+HW5mR\2
%2kYbcGt-EVL+&$']rOnqO/'Li4Mn<7"4G[qN@#!Y78$F03pLU+ZOtG`P8XlFPj8rYD@D'C`Sb`g&O@WrNY+.&TmR95e$$fqEKa"c
%<3l"HS''Y7-&<p=#\BA<6A]:=1lql]/1o'a_G!0,hZ2)UH'jW?5Y8f?0e$BQ[riH"k,m#?lq,^W.:59QPq(QJijO=Gl6ud/#[`*2
%4\Ap4:crRr9ee[M:R_HP<3J7#Zms3<O!#DB7P>"0#28i>,s&'eli:#tpu$-6C*O!`Z)ahnn=@d6&P0PA8_]Fe=6C5gl.])_d(pl?
%`"I-??.EGB]!d/D(Kosd+s%.[J<o2n@2Tq?$qI'2DK&Mj)dr:bkBJUYKGsY\o[;oR>UT\3o;2`W/_r,(nJ04sQ-No#VBfA;L7,!V
%>bd&4kRa';e@$0g9A");\[Ino?%!_&mZT_SZ27O74OIS>:?M'D:#+_$[12C,SKWUX$FPEDMgX%?UhG*XS_[gu1P4?3[A6QcV)M*3
%A,tA7$=VqE=\s%W"*N%>ga=m_0<tuq&JHot":Wf4p'8:Q8J$Z0BGF`&!Kr4j4.gcNTVI\\kRB3!(,mCR[qi<+5d_59.`iN%+j4Gm
%7"%_)8tc=X18]o0OFfBf<B+'4g9)!qYO)[C]pcD,4>-uO\2(A'eCAkHTi%-L&>>$:/&,o"UP;es=YR1N#C[<"5Vn.\i[@:^oP-c1
%"aa=&Gl+6`PKsb0V7J(d'W5_+)UW\+*[=daC3H9=lDlEf;!=<C40elZ;ZX5;Ci(&2)<B.PEY$,50_Z@SA.WcD?YAT^qlg[;[@*)^
%9^!0/1n)N=7AneE_l;SB4'^bnT#nEt,WEk._Mh<o4@doY67Am"-W%DL8O;&B6'p$[J^^%NGq!`Sh9EUP3QrU7rM%.CjLQg*.urVC
%3/Hc3WuT@a9V98nE.WI,ghbNp`M'@""0eRdbBJ)#+1I'r@?4^sMCf)j7SF*V)A+Hm0o#P56Y[&G)X[2g$k"6>>E1lT@c?/CH6dpb
%FU_=9:/F0`IN6\JS)&5;D0//?;AkpZ(VfP3L@T]/N';Wg2ndWuZr!776C%2sh5&jFj=k9^f-k(T*4>9N&<"RO]L^<\_-)`t7@s!f
%M$m.=R*q5(N'o**09.fed81u]\OK4Zq\(B;?Tu5TFk`K.KQZbo<INF#1mSn?kR9uQ'iA&CSsTt(g$2[t>-IER-]\kVeIa?--eVK8
%-Q"h/3qts!Lf8-jg8YTd?YcH4D!2jO%r%_Z7$!:J]RU/iW2N#R3Jj^%WD)'$c2dK:8i[pgngOZ;0JYS']_kkk"DQ,9)'bMp;c-IP
%3%H1lQd?6u!/2.KE?RBYZC&)2WF/J+jj8!"TBgHJcj(@`0eaaq;#;;"eAD8hOPR'*>5[WmjV.p8=&?jZ$FPu-*MIQaVfoOZW0HR]
%)8q"M*][,[VkZIS+5B\$+s):rHV1<=)Dt(]<#3qp&&W)uLF>,^:lbgZ&Kju.`?[HK>um\hETs%C[+Af7+i@PW+#ZDT?fF_A-[!KC
%%k@pkJEc.-2O!ViO&2!00<Z!<C9?hD)coj<Z4QRi>Gq=mck]T2M$p<79bCoqiMHUgkEN$*j4+nIdq^b@EHl)2:a?C1Bgn/+F`e&*
%N=AmRNn@!/9aIHL_QE&-In^-RbZ7SbbI:V>^IR#^_PbJ+7LGS+aufs@WHlOTTVJq*YRQYWg6eWcoI,:b*Is<Uga:1>X$ZfWT_'ja
%'c8"[-[ntM'Rki'<3Uorl%TNB`5A,M;TNr.$H"iUbSd!+54B33)nmM\j3(HdngPD[,fru_'M2FmB,M`Z_:U6O$3ZDdX>7Gd7`$Fh
%:^pN6*^WcX5ME\M3F'eI2r"5F!3kH#L*0O]PQmALULFXM[7,Y`7Vp:`5tH=O#[YQ(cLgFr1r^R%?anuW\ksBcS'd]@e:BtLq_-uC
%.?<DU(S-_'e1_l%C:Kr[*+%XA<8AUmK<"b/;&1?3d"ZT14Z]SYU'0F<C]r//#>>DA`MA`$'9pWAD8];&QTo*+-?(gGYqTn>:aJlG
%7^59P_o4$)oJjhn.8h(m@3D#)ML%*E("nR+(j+);,%/81%kC^'!k[Fa'VfqgT%NgA(hNK@FBq!8^ecaGdLLotki`#(#*7rq<3bqC
%(*]'?F.6jqj!k[.(%(Kfd*O0Hee$pd@2fXDm4oh-#&c;kB2-mnbnbnY4K-2;4i"t2.V^EBJo"f5/#XT(@fT@:/THH>`<ao\c\k/^
%%$-ilcs^[s#h6=R3[oWkZm[UIDdCh]k+#c1l)AD8hFjYL"Oss6(BL,LO9%&%0B='rKY`d_*9Hs)BTGo"e+#`C:!A,B7m]QXV&2@C
%'=UgMe((;QAp";gN.ccAJL$k#bj&lbdttK5To.Rc$j[7L7bn?N)sFJo$HP2q+o(=sgn/="(qlnO3lG<HFoW\"i<##L,"7JX88k%Q
%8`LPY60Q=TWY(Su?lstmU"HlLi.;?fS;6"A+\A.5iM0qGiFuEG9sfM\(V)8?'ZJPl'9*)D-25Z]0WX&Qli[IWWh!rHj7%Gh*=Fg_
%GQPi],T$7UZhHA[dd9YUkM/nk@8@eXe*$8L]@9!Le&)?DDS"bd)O';?"_ZRd<*e^+htkBO'[g0Q<-dZ#B^A%@g<]5`+s\bR.hj]g
%mV$Y51TP^Dr<b=/.]&K^??=s^)VQg<p65#((-4XKdeUH$78mDU93#$R>FRV0]ls;&iQ$="LS<_+4;*=g:-q+8cf4kE;OX]uX;LFI
%&WnJ^&/ad!>c+[=d#2.U%$%GraOI0H&i(d$$J<s!Wp\q^;8ru73+IsW&(tB!BcBT*HZ>3Up,VH3`mU29;=C$[JLlhW_BVJ]PAE>p
%UJV"$[ZfL+?h<s$,<\sO"^>Z<cP!g"BBZnQqau96ePj?*Jq2SaRMK?\G"GQ2%h>^ifdU7SL<S.-SVJ_e`ht?SeJqWs[YX\-[*i`=
%:MZ<ej!ucBW259eIDUa#40NRnQgdV"Sh$WSI%3PKiLWdNT<Wp_eNraW)p8STec&*R^a5N+3ZoaRB>T?pLuN[jo&O<ON30A`*Ba;4
%YXk6Se4No@j:I9"W8d:dX$s'iaHM[M21+A-ZOfLXV6nQEH-,7l1m%5?'b^3@<0<PmC,PWgBnFP-W_Gf+gs[_21ZJu$O3s_La:=4P
%Rp512k8q<$jr$-&68o\Q]fVOuPJ85#oZ<4RO\/EHiFm#t$o>N,.%*VHoAm9BAt1>SEUZ'6-:t5'ab'g,bosug$`>;u['gT8_51JF
%RJcu+f`s'h[ORnG.g'FE4L^;"lc:):h.k`G+-ED>Bu/r\OrTIS/>(H8;r\8I$8LP9er8<cj!KPf`_B#]Xf2Aa^K6;qMCDekgM:TQ
%;%hNsDrlZ^Ht[kL_&,=i]t.l7Q^?d;D-qDo@OoVe.EdsPjdeG,?-V`(\sgUb['g0,_51&$_r*Q'j0,;f%+UMKB1*9NAo[^VPn$L>
%as-;@EN^o#_m6)X:,'_r[O/<1AZ6AVMUO=V[BmSZ#%r(HE_+WT$<[;8<j]FLhCn5$dEk`rjFOoqeWngH@')(!(]#@nonC1%eZHqB
%7'0g\9P!F(Ti.I2:('58ReiI51_hoAU1nHjLk8:54>4G@55"Uk^0W8ba]Q$$Y8"m^p`4td7sMUJ.=2JA]X#j0[BX6d=4UKUf-kEI
%6OSjKjU)#0@M1?g*KG5CLcSAe6ZdM.k$WJ#k-EEJ.77fi"n?W(^6SHj[)!S#V35/2[S_.u-8<kCXm\M2=gQ9E\X"kpB:*to?k=7)
%Q(iN-29TcM7(_$f$.1JhjFuYhLoQa*1=Tf(dX/o/J^ZTs+Y[%rZt<,`#or&ra_0-4*>;"V*d;aOrX"<_*l1@I*agu&1ns//&Y&`,
%kfM>nQ41_Y<\9(H@,S<A8h+!I4_'opVE%DC0hiQG&ujE4]"hICac)n5RW5#Ke*(k[aYPQ&PI!jiP2(j]V3:FkVc6!X6`]0LM[sTK
%o^`P-l`]ZT%-enMdHNGu\c*]CAEq6(Hr.J)X0N_,E:>C#ni"]I%i5p\Qp\[CqIR&AHE9+@H89?C9Gkn1Q,](XM+)^&K:GW@4GAcH
%?0Xj#-6n[noim+r-QXq-$;3?oC":AF6ZP\pn3d)),a/VrZ5@"R@\_IQR)u&$YS>_c\4o^&iGh_(;',1B-^-)W@A@4sHI3(pfMH^o
%0SISNIXX&37n\cq"Qu@nd;G(YdP<8p'K/QG[FttW3OBN%E@r2sjRlU(2CCNod@;%!q43[<W@jG[[FM1/87AWeg</WmbKit]A?'S0
%P"Xu75;#LuBGm/T#h.cOXerO#%S^g!Nn<AM3I)WPqW!/Q0+6ek)dupSCV;jmkn`\c3OgMmiYpJf,*"_5(nc_W$T3hVGj&P9eWoj9
%BB:G):^go*U8'ns>KD@c]L%a6Y]'qO%R-1@.AaB3dVHm'6XaPS+=&F.%!Zu.dD<[(+QjbSnmEjiW23hb;neRnVK.t_jQAJZW0/V8
%RYP[+0Lur$,FD<,jrAD"'I\nZhL_f+'h(*EH#hV1&"!u5E=le.mE=c0oN8CIn73Aa=B!\"S6pA?1c&X@jEc\&A_Uuia$dH"5J5CF
%^"g*.jYF`BSBk(jQP@P*fM#I(nn91ZdE'`e)Po6N2M:/X@FV=&Q3Sg:[/$\35pJ/nj\-V5>-_q_b\>[_R^X2.iZrTI0gsEh\LqpE
%THZ#B/XkA"<6@#9ND`Qc[aJb/D5DNk?(T/$[U74E=jYBPV3:3pDA;M:2c=AN:4_`d<a+t<H0I/k<h[lR<pg"+kIP?9BP,^k.F/\e
%8j2j98i(b"irgE"/JZK9+$s+VS40c"=t4rFMAn_W;E$W=pZ/uTCqM^X/Z.Q?dH6J";kKQ+KZC^WQo-W<""JQ<$'[QEEX7!^%Z\Tj
%nZs?u/rVJPBj^H%i:=F2-Z>38Li\QnrY?nOrSc^&=V0rVRobAAPPQVtUJr4l:)gh$:q_HkIi<S&;gL3Y[E@;FmqnPQh-EWp@At#.
%:Ti,ubQ5s!a\uK5Z4KQrcPC@]`b2X2."#Q68s(XJ3c%YF)-&Gc<h5AL'ms^Fg@&EnfOTitO.>k-0SY:Q4!!K7MhF\!;Mj7?%16&i
%XXt2ETt)_Q=7ME.V\#\LTS'Y(&Vl\Zm*JGV184Cg%L`T,ZSm^!Z,68d(HOIp6<j=B/k6G`j%'kA3%K-rbL.k5//`d=F\g9(Pg9WA
%>.EdUo'aUX63^hT6:M?Blp;8<gE/^'FSg\[/9ifXC0u@m",,Ri5e-QE7.7AkntlHn_L2]2?YnIiLC4eBa6C]mD8W`cqP]]Kj;Z2U
%=Ig85KY[9WDt#<Kn^N@92t4L'iqS`PoX'km[#sgMDqK&UkmmN"ne@?Q&-XOdT`()W_SJ*:r\MJ"2c)a_;WI)#D#9XM,7kd&+-e/^
%qPN@=Q4q'nO%S`Y>XJ(i`iL&$h@u7`>=uP9PMiUhP<gu'^d@kBT"MosS+G.jLaaI$Ani!N/&Z_$5)^T*DrF7dOZV(;B_K1oleY?g
%NKNn4LK#q4rinEpf:MoBPf@n=_]j$h?l@!sWuL.*c01f*p3:[Z`&:dYTg#^$qYtE)]c63b^K=mU%rJsgYM&8Q8KEi.iLhR"=P7b_
%9YNZ/YGhden"bsbn?\c^CZ"M`V-bgt/<3q#$IVW:]A/)&$5&bYj!^AW[r<VmS\o*jit2);g?j8\:bA'2e(8WMP,$Z&'\nAE>IleO
%NC@0.GtR,\BOGWtLV3^05VgKF1'E9m7"A>/[0,Lb;uf4\>Y$V1B08h@;D6U.^#nkYQ,5lXI0#iq2XUQ(`K9ZLBi<OX;(U$*aH`KN
%&_#+,'>bX00g`UcEeq\^+6-3<HMjGb!mV2c0%P^[4ZK;V]mu^HjI?DlM)9Lt><bT%-%i.a)8UFYb`3Z1<XCno[ofn+DP@8l`6g9@
%kogU$%m&nd)\3Pu![KSYTEiNJm2:t>SfH1emk*mE;%H/.JaoCJ5^bW:[*']DEaNMa6Ve"bm&U(:OEWuo5\e@t&36:,KZdhi=JR,b
%r351Ees9idj5C#t^+pYndMM$"SEmZaR.\ri@>.<KOk$6an6;E5i&<@r-,8([#C=\#asPYqh-(qVd7')@i__"`/4*\jZ(oO*Dau"!
%c0&oNS[Wl(m8;GqB=Le&l'&2UWaet=KV.lAXaMrWQ<O<KNLD$8*Ot-)'HI:<M`ldVAfJF:Lq8$*aRj9PYO`6MNIl11:CWQk6#[h2
%8fjiYGQtRIN;&8.@9o#(GKlecntVSPC`f/\f;/mt]fF8FTf/nE7/!Zf`Yd#V,B7tqKs`*V42DqDPdX\uXTQ]t8i&XZ2L%`cA3oV@
%GAW.`?Kq.rqo%8X@)S'8&-FRT=ZD=6RdgLZbUAi:?\lTLpYbpP[%T[T7%),EO^Qls=q*5-=856N<Hnk+5jO$9Zi7P8S]@Z)$3b"%
%=cYWXRp1P0fljpFcuYlta7150>U8*',Jh)$s3P7.SX+n`Tu8p9d=N3=YT)iagRu\B9E)O#0[Y,q+2VAePU;mi`"+8NUD`\lg5&Ca
%ZMY7a.NUlq^XPKQ7;u9\,Ntp@LJchX$q.%e5/IBoqMF#$qGc*O$J)"5$&Z6&V9Il>Gnlce#92S`n),Mr@ms'&\:(8ZM%!HW1+0pG
%T.bDe-a8;C^hSb1h/Rcgi<]UH(W^YAW,!$sIT"p<Y+N^mIN]it:D=K1&2[k%_dcN+%qdLl.L&?_5tk*ObujQa2*Sjbbp#9;9AKIS
%Q-)<mWa?'Teai8_nJX3LCs[g@NU<:1O9j$__OY*\D_R,mWWXJ&Y=60T!Vr,pmt`iN`$FXof+Qoa=c0E2^O)dN;R-jII9T9nO!J]]
%80]A-`Q2Q?_7-C/R4k7QIYPX4(+#@ETP[kgpn<8&(((D!D+g[D<fu5Qo@u_">Sp5G!ZrIQ36L;oN1Eu;[#n\%prY0Mipao2a)4M3
%QUqj<"r-p)D`#-$QIFb6#kDJgjWL\9+07<p+On<%*D&o1'o`%p2KVea8h3rilOV+4K<42CK'<,dQP"%#LBq.94cnANL=M43N1o<r
%4FQ%5nA"r_MlR]E=h5I=o2a/E?S3&qcNRb]b9qp#rB6\Q5%@k=.5Ighb(Afg"k<:/@lEsa.3cCo_]^PhSk]U,j$,@,>W.$@KbR!B
%T:cZ;L>$H;$28O6pt\EPrNS(VUoV[+/fS9X%;;)Z,t]oa>Ud[%5*`>bmcfu*q^5/V2"HR\V.6A`;OHrY@=gKP%kK(+4gk1ZeY1-H
%CH^1#SjMo7@,Q*F!,oCH3J+(TdhLK.:+0028!Dh14F6+s]V6T>#aXI$TA9a>Xi`da)jpNINhJoDdC@B-[).NJf:eol%k2,p&Oj6O
%^h]E%^U4c)KP<%J3$Hb-!WGgW#!3qILNFEsE?n\28kTVmSP\#LXX-'"L0>iIX;BBNX]$mVJF=p.<#(OG%>B-8D>GA*[sMePHZnWD
%!nu_<Y8Qq)BTr298[J(Q[)ihA0R,mC!;NHcnI7>gi9_oB2q1Hm!6B)WPsDVKhG>^GM0kFfe4ROIq059/"KVg2[54eI+HNs;;CfSi
%K:nR\8q=)Qs+X\`:-<g7U/h=bL%'gl$%;])e"eqPN(gA5mIhK6,o")"IS$XE`32f4274($g%B9^Q%6cgr.\A]\B!=8YbbAekZbLd
%L0=nt:CQb&[1[G7o8:dI]+;QfVsp%CUN:qr2LaAhdDErSE!%E63ADU55/>4q$;j8I]4KiYO`)=XVp$tGkcmmN6=n_?1,=jM35M?V
%0erm02CiO6m2RZG.3#0ZF7eM'p+fW4[RJi0=0-s^\#\Us557!iTb70a2O4HMB!Fmf@4YpQk_!<5e$RI)%i]Q%Hr]n!Q.Z0ODtT$?
%+m#3*[WgTVF.nFb`c]@1!J%`dg4d]'qnP]alDb;Gj<:SMq/\o3!u-fjK<Ih]Su]s:e5`Y$Um6Jb'h5_0]I4a6U2q>2K1H"82/dS<
%fW]m@]>A<rcO>M[if$NsCJt9YK/N?0HQuT+3nS?59cp*,Q:m34$HY;eKbXsqoXV,Df9YnKb4"UD!(Ykq%GE*M-2Ol)@gSgfT^5.N
%.]dU^,h=_&a]Sr,^;hc?1X/Q5)/?K4-/;F]WsXbE2-W_@,pM%mAC*_nZZTEP!oQ33#WpiLLgYZ-G0T+sqCE(%2EL`VqSG2-AM'I]
%Uh\;01Y'DR>,^ZZLHZcEjF+fqIaqkhP?T>+*BP'!G=kZRX:iRnd5Eq8jN'f3/lYlr;SnQB<l<9m;&)<d2mm>!2f&.6:Oq?8P,CqU
%VXbSHd,cJ_$27E\W^=A=g.++mJKjY;@o16[\lDW/AEToWoNeI,2t6Fpp=?QHriue_P3geU\,!ZnP6Y_L2h,O(#SaBOS>>\"maAQ6
%=>UuCUpfeq.N`g`)4uE@`\\a#F45A'!B%-]"BD_"d<;[8W0Ia+caXL/3$CHMhF],kqheR!]-7kQP72V9\Z-4TqjcEUVPWi@iNgc_
%T+e]GIfGoC\UMZTk9Q[#C&+:?54=c6%ZA?i1t6ouKh>WH-0'p-gt9q5F)F5*.,d][X't4rBR\9#/^EYSaeer_3cq^OpDamj)Af_t
%]0nu[-(!NQqE;)F8Mt=tF/;jf[,jmUbalHR:s7%[HcTNrji[nJH]PI]:n6%eon-F)5Nnp:K3Bai4dCt%13569W6P/9TXKYCD+08D
%($QOJWQ//Xr[9N/Qd!:hYh9G4HOf=dSR^lhVB$<;WQIC(P`nO@#mMc#8dE!1J+N&SWAtn)jJ2te8*779I/`VXUS3ZccE'##F?^mc
%l4rr%M]#mMqST,#lDD(JXPQN=#,et.N(\HHA]RZL,)uDRRYlL!R1sup>jOu%1.Zgd9&CsGU*GU0oYqCUjBX%=l+/!AqFP\=Lb9-P
%F1IPs@'u8:knV;V9B>crr"*9`fGJ4VS&jlc[.+!&`8MSM8kZ!:H#h)DHpBW>Q8ej^5]QGb/2,O0^S`<g#oj#T]ghJXFRZjfX/d;Q
%R9V1GO3((@DnU5`;9r$D4C,GYDp4=$RSI/QPX>\?!q5b:SefWV[C86scZiThYMJ8Mh;Js_2`JDpemR^P;E,-JV54d._Z#7iTeMMK
%NdW#SFp,1H&nPH/'QH.clbQ1L=m/R#P0%KJ5%d68i&CT-"&U(3PYVZ?^?R.ukdf.<b<$RKVLVl1dsn;J(7b/=N?']sjpY%>%(BJ<
%5[,jp8UjNkJ.FNVg4)qO\9k<K*G>ScLei,J%so'OZI;`:p9=[?O[/)c!=uljYC2*t=Ie0?;D\?o7ukl(9Ao:N,eYXD(Vn4X"^^c!
%a(Jr+rh2]dc1D=mOAj^R+Qfg).G`^Mc1[6<:Q:%.=ni7toeSCh7cqX..:*Uta3il]P6/cd;g9pVNoRI]_D1EG+jL^7\>ZVtVO1f$
%CaQ#m-PZEt_P.W1C7!cO!Q-e\bG"0UrKb?'ZVV2:KJTSI#n+f5oME>%pncjF.pNa7q,t[X^VBK7_/1[!@<dI.0I,mp$Q+PH$ZItP
%YX)qk*&<1q%0p^$q.plXUQ8([4tq:qD)cf1o`gptqF#npE90>$Z4Q50DZPjc*8sc/f3W:,EATX<YFLLZ+!OK1Q?2+9*X0LGE%U9\
%5.#WWLpY27_CD&d=,sq5GkQnJl+,91g!QR/#;;aIVfa&7f"$QmrOVB5lP=5fZ[$jc<Ic[e.pBp1W-?VF&h-5b$ORQnk][?:W##+`
%Z[fq"Dp">V;a_W%C6d\g9R<iU07(,7>6uf+_o>9=UNhEJ.j?-kP=;cNHm%gPjPQSX8K*JB$&B=,PXm]Nb4GC)")g.pV^N,?nX6$%
%(teSSR9.6B/roQB9(MRK-@a^o@h(7hp4Y`5'/=`p+7fND/UQr^;UoKH8U_%[o$9P_JK8s3i.&97/0)kiB9"o#YRa!0S?5"+E;GN)
%;51!84f@u2p_S0h9CG1IqbWp"@-^PEQQk)T_2TMr(9,3-On_3L'1^bEO?D-1%5StA!$e1mQ[2bkHO:nuKn4HpfP-U#3Bcm,KT(P9
%j:mq(f+Mg3qs^[T::+^B7GKWf)&M5J"7<%ja*qS:L>n)U9I0eb0RA;bi(tDS21OqaR5^`t-AoS78sU*!%G0>C"Y%MLXWWp$h]op3
%15Y0VP4)]OJj!825Uh+&3Y4sUDfNG><R@+dcuKk>;Xbm8EG#+"lPkjWp-7(BknO:2aqCZ<RlZq#Ftf[m)2OYi*8AO[^P+I(?TSc#
%q[Wl(d]V$^hS&J>QP%:!H\$F8_:r&Hq/`3G$fQQ,(u9>s01<@F'7"hTM=<<)E?"ue;3+OQR:@Z[gmc.@DSRm+@/L=oetXf>LaB`k
%KD^DcpD'kjUWqMFlE,@"BesNaLu>L"7Rb>^^2A6QT$1$0+aC6Um>$&id"$kdA%6G%@2-llqh*$D-ki2"Q"hGsOo"DR_<$VOQ96m[
%iB_04Yj6H0%6V9Bp>SRYA`Xd37m4Z2:</VceUtE5%p+!lMLORS\q+``@c\>2.I9D3T`ZdJ"U1KB=Gfb[@N^@K3%/Y%d*:F*Bcc=O
%n_fA9boA"85qY8B@(f:J%e2(ulq6.D+npdlR3Zr7N;r,%@^V#S$/7G"6e2h0Ue_ALG%@,G'XfWLgX3h$.$>r=H(ii(SulD[=2[BE
%Kk/3Gp#&1;phQh5)&R@Y5f&W[kZ`"#N"\70#m:lFCJ]iM/s5<F`&?uh'0/fhK"$>V#".?r#!kQ_`g#i9:_2(I)m&IR=ip%>7;ZhM
%V9H"QLE7.U%:Ln_ho<OR)*L#K*G6?),]`i/h_62E%r/W@ZZ!XCArjZF[1KB:]Y>fQ0u%9Zg^5fe3s=:(g#tTY-q1-Jo36/2Kf<P%
%mdtkp?8br;?#UZ`fu6/dAI"P%;(NYN">l2]+>t5]O-^:<MnB10#SZ7H9/ol!nE&q.(q>a\%)%0J,bB5?j>e<oA21j\4^$i5A&O'N
%1drq5&/SbZcjYRhXQlSj@eE_4VF,!GT/]Yj_3%9Oq6/4:`T,CbgTc8`1;hpoaZ=-^?FulTo*F=FFM6*n7eM;Vh%?mT_9JB@L-01C
%oFtPS^sipW,P1C9YiMX9+u9#Abn[.7NImMiQL!J70]Th]L!<#u?<kb7crg!ufKtH^MYJ+"*\&dkHJUYi`2K_P4l8K.q=+@*p,E-)
%)DqGd__eq'Rh1VT4iJa,&3_R_H%l="oGJ$"c#b'Wd?7>JP:".k,fBU(eq1A&/$IihGXE_mQo69BGk&^Rb#>FX56u#l">491#TJ+B
%rMQf)kY\CPCH/cLEO9nN_;E0!%2P-R8V?H#K_Rd0]UquFn3L6kChOg&,&XHpP7:7(9atA*E.E335*)1O[N(BWG#*n>/3?@JcML?-
%?_th:"6-S+F)p8qdpe8"Sq9o#7KqTPo-Q(n]GrCBn-=L@:.I#e&`F2:*8[)Dh<>P<ZbgK)$J29hVZQM%a/29B#r4r)dYuGY+ZOc=
%]F:;A_3TH4N%!Jip+a?r'Z0IUk"Xc*KlXiY:rpW"/Dm//RG*I-$,i*kS!3)s?GiI?jkg*d*bX"2GYk)TFNM=^$WJS;]L$^A\uph*
%OIQJR&[^LS&@[IUI`>5EnJPbllfa4(89+!J!j<YUR1'=t=:sQs&quRRn<aqkcps*?kl`n\=87c?JadbgkqeLg+5V.X-QBc1mllsu
%\LK^clM7be.?<^*22Q#-3Y\N<4#cAB^C9+8H&+6Kg&UC'b%06)j/.IaT'DdaMb"BC.JtX3rUBbP`)Tg2+Nac3'k0TXeuL.r4WOT1
%`#npAPS)mJ/(%%I(EGdmSH:-/3Yt%MAU/Y_@De']gY@H/^.)F*'mnde1J>Nt@t9bi'`5[W*sWI>'I&t)djdKsMXGo6.m\h1#kS9:
%HBHBSnK/)U:87GLjm,JNP%Y>%.\](]kZ%sX^-FqGiq4ijNkPq>]gCb$.LIOQKbLI]6'!mQ6FH$!UMQ*WD`bEVRE4I.6HSe_2Tg0A
%Q<0-O5B=G+cgp:.5$Ce%>+;ZK]f\dD!&%>)o`p30@e+!`5:(Pt$h_QBgm``qV`om2q2V1.o+eZaQ!I))FaD:NXF='72E?V<*80rd
%V\@S>4@6JfEhi\n#'s:*kfFFm!3#If$XWL=-CIq$\D*$Q,(fKcQb^M,S<.-7TZr/n*qnZs"CWK(S[!k)2"9%(&5jL-^^/HqkP.<!
%(Is&58?rC,h!cTC;BTQuU3;[,"g;P.rX\ET@5Dp<%\em^F+O9P^f-riYfmh7\pIVj?6hl?ML(&!rkG\#UN!_VGT2`[A4(@A-)P$[
%/]H,o.0sum)FBVEAf/Dc*KF_BO-<9S2?\eWCa:`Ljp:>:9&W%3M-gj$WPMLM)dC/FKk>*hdg.<<H89>m7[rT%"c&%9*CGZLOrLrF
%="63pGO!:8Y@':YICWD^\`J>h.S!EQ-[gLolIouihkLj@LREhI/r`<o?+CfY6o]`Pn.`qo.1.fe)HFt#E7Au3UXZLjr&t?CF.0Hr
%1-EBM2HNhodY&(9EhELq:VP_d3fj[_%WbIWY]mHYVg.e==:'(/BjCaZ_@>`3UNaUDDEs7Q[NmAB+ik&:9s$N1COpmrr05O%mJ<K*
%5Zog=YZj:<#Go*QFnIp47IoW<IC$c9<[4eTN^K,MMfqkTZE+QXo\9V1-Mr*HP9%_1*[f(!3f\4Z_F>KuM%L;j$q=WaV;J"k2KjRl
%c/\US,9gA;="4ued#V4LH;KK)/0"fC^:u^>c-k2ZR5.tp/C$NUr&Bq9AiG0?i"D>.SVJnO7&qT(1a7B'+UY)3;4?J-J5G8tb/%#E
%2W@&@*YbX%#mGq@`.b<S$gq:g7?/<*Gqg#FNQMH[m#MNCCBk^fid!q/#)Tmb?[d^tkMd\$,-03kadp=??C!A)kf^0kLI8",3ttVB
%"5uqs24`eI\\ES^VZ8OUHIKVr5+3@]A8+I0iNDS5q)PK,Qqh6rECsb9bh:Oq,4C'.319Zj?YDV*`%)Kp]91\FGb9LHefr%LQ5Udj
%@?755-8)((%BPe'*6dDTc]1s9K"0cuKe/N=XM@)1'cSRFcLSlkB/!WF&NnCUp!AH[Ng+\'<I4/Jq74k)?@4bJ\:JkkG[<mhSMHTG
%A:kpc+pG7]*`S*A3#^7>NdEDdoIuP(Uq(d?Vc&D5(5ghM9j3,W0BA+W:`mLd,9N^k[_mHWR%1$j\E"d^BQ8`;/!^t#7-IM<peD?&
%hd/M'J;ET_b/P"Ygi4#%:.W1*^pOn@(>$5aGHU,M@=YL]$br\a%hj%-LCGK^$T8t%.C%*n\]U%mfu/eW17:I5K+ip.\F^XP5bNqf
%fc*=Ca`*M4.`N!_\euUR05TW!'J<qX#2u$<5Q6=\=V6CO8!P%teCcd!8fB?6&@1[O\ps5a'nEkC69NTsn!p51LN@o33Qig9PZDN^
%Mt12%+EUDl*gd9q8m&t3Km!mC0!#,onflLSE+@qs.\2KK@QF`d][hU#-H)-'#Y2qLLr;kn"Z-?3oJf;m?Ub98$at+8(&7Q;QkO^q
%PSI_IZZQ.4?\hDRWhJTJ;>Eq$H:ksVJsqI$jIYp7#.^V3SOF^qL`u3o-cI+&4@5YA49n,2DoJ_?SF5p'DY2ocN83GFq@(>/Tt"eo
%&n&'nVY+$$W\DTENE'E&YiU(_P>^I(Ti2"N0g>&J;[AH1HuNO0ik]\W]>@-JXAjt-$'g&>O]\Acjf1X`Z)Mdr$7WJOgD*KK@B7:b
%$Ks10$f1G4*#@pYZrQmk.(d2bENC7XF\E+5I@Zt=Eog-a38iS=CSRQJoAhi[DCJnRLm'S=TeG*Sr9Yh4'r!p<^FQ*?2XCbu`FWj'
%Nr`747t@,@dnM"2d4Y[AI8>!t^.I:6>s'6(!T[1%A"0bTDspbEn35IXY&.'Ql0!\"Q%8?6eaITY#T&BqTSB(?^7n^D:5T^T-lrkq
%KMLP>GIf6AP%u/hk\Y8JQNf5pSsAI&BL*nO$g[CZ=,#]J_<h[9CPT3F!D@Dj</jf[-T`Gp`4",h+U3\*lbhFo+4MhNON)78a'!B7
%iMI#YCuX;ZE'of^p+g'CX!d?_4e?>q\C4.m73=%l\qIu:MnVdQ\1n;\&cus+o1h5uL_3Y9Xq8'uqg`9-DWBj<h+/[OUiiT)_FD_S
%>p0V"/d%Q9!@IZ\6).&&Th!tuWXhr9.)ttT&,tA^ANVc5]Gkq@0G6E`dc7NO<?[BGpAX7>dD.r;)+ps7W)NnQl2BZe<OKZLqdi%1
%rVgdScj[lG;JOKJJ.$(?S9,uW'uJr-AO,hn!C$2]@jl/K`5/=5d&D8i\VaC8j@8f?T6M?"):&_FgM\IsDb:;fNr#;a$6,;bqfi<d
%Lmfq*B%"KOB$XHY*R)NoXpY'C3m_[47:F!C\a1of:jD\q5&V\LSB\[:/dag`U@LNE!WPYL"iOPe\t&NNdm*L>n7.fSLDlsMMK'l=
%!0cEY3c3:'MnI2_<j9Y6$VKL3D]h(6X0j6@:H8hGNbXb*HJ)Z,&q_Gg,&sC@:9bnJ3lD<QAk(."4,@KRW1;:M#rVNV4/Cn??]WrF
%4Kh755PA>ig0rm!3I.PX+:^WUKr*!6\-QmJ`XVZ\V=55Y4bZNpE=,eg?eWja8dTMnC8f%p]A&ePb^o!_SCR3`s6"E/o#$beVUBkh
%#?,FVJ`0pADW-8?I&`_VomNYVLuON%AXM_bLdLGjs5mZkMA+)E^9"hs%>q5n6'!ma6;Kdam`W[^P@n(u"KTH`PFI8H[Z*6ugpM#@
%&uZ(",'^h>M#3D.6+Kkrpe$)]h.3sL`#9>*(n_Y>+`a-3BPN9n9QM`;VCpMX3,`pV,aipug.AVD*9]r42&mM/0<81$K+$-"aH,9$
%:lD'IQYKnKf:$tWlm(<2l<.[e^m+;Qip[7Q:-iiSWqZKT%E#Qb<.h-p!]ruDoOJl#P*Y0R`Y.?-]uJ3nn2gg;bphkiIr7+\H8>.-
%C3EFRTOX?Ii0`@4KHlCqb@5/kjJlW\4#gGFXWT*bkA[>_9(Dak>G]_/Zr3.@#O)Ib@mFbY#a,PDC(s8QB75j%p0/Q*.a4WiQN^^0
%WNHZ'SO*DOnMo!b'>&Qs,5*$EUGLXon`4Wq;)8YiI@1Df2EWSqIQ,73"Pg&+o13g7SX>3;MOpp4J$"i_NJV?B+8.TbEH4b@GD<U0
%bIT@%Q%@RIL]P6h.)?P$/:o4S)CHP.)o?1f/gZc[L0(mj.k#?\o.@:fDT,H-r9#<J.<]D>e8-=m+[]t%)S_4jSBQLW[6gHIL[gC<
%r!GrHAJ&L8d:oOkD?q1-\/+a9cOoumd<qCWQ8%nLQ6K(n!m]a1*OW:dJLsD.f\,THWVk-AP&o_.D3/mo4V";uV"QKRiFGMB%*_d8
%+_cY!]CEdPR[8iB'NTrqHN.(F<XXZA*&mHuCQP[^@G=/<jN28f\Q6r#8i(=BAJqlCZY""GdBa1FLAQe6C)&#=:ieRE36O"o>mgJ9
%-A(YQSr1!BM<#>KaNE5;.oc_8&bB2"fMa$SMU[2RTQ1`$-12X#)_/(EIrJSf#`UBAr>,g1EN93)?atG=R1]'n1G8<1l<@AR,=5H>
%_<>!WQg!4j9"rWBEWM.0XbLUCRd7d\&&nA(Gc^!O2S<U(*_uoSVC$,V]r-$rrU/ds5CRDj\]("#W&f7=nK]?c""FOKq2-t7Kft'k
%2MogLcW;+@kneY^?T-R:rq`bT<=M#eSQ]p)d3=%Q5M]1!T#/n041t!#;52m1>J&!Pb:qq\I@s/Z$YSb^(M>lQId8nt7M-f%?]0G7
%!C-K93P0nI[EcrBO19SE%U7kgk.I'3C.nKo8##a]#doU@V.Z%M*;."^P[qSY65Uh;Z^]'TTh2DHm'Ah]0@sVmK]b6qkL8UF4YjGH
%$;V'"N3I=d8*W0J'&U3RqXJS0P@pWA8oW&'pc4[r47lq5BilNk:#$7Ki`g(oF4Sr=:B1@/r6<"!='o$9s63<5JYeL2_12ee"7]F]
%gHpZSfhoEK/@<:9/Pt>/^u6`'?*PVZFHD\BG\d`bf'jdq=b>V!\6JL5!H&U$!e8%tho!M5_21;r::^o-,$#JXZiuJJHet%L<VuPo
%1P_P(iL)C>]AuJQ$%u/>^[#laI3():0+d<WGWZ#Y1bc6@3QQ2$*69>FoO%-p"0lfkh)75tkd?&8ESP),(r/KiM8ER;,f<F<P7q!.
%h/sFr":s;qHs)T4_ugJ=+@dc7Z?hV]),tH>&78Ko04O/b+0"E9aE)#@puOQT8H^*edbug,Ah4RGC1=l14i6h,%sp\kdIU"["G&.]
%!c3BrZq#MlQmqeC)BA)K.=VXN$)g#5/*_2,E4G@I.Yb?V,N^:aK>XJ["5=^+,t4auOB?KB"03Jj?UJL$bMJL26u9IR<SDs44%8?q
%aG-_fPn\hqK2?+@5p![2.+jps81g*]s'jE"dO<&TODbG:j1u$*8qtY$in+F-:s;<)dJB(2P3BjirP<D&YO2+n^X,U/@GGn/fEn.?
%#WQk/'$>mu/IK'<+M!jciY!cFLj!Hfj(F$@8]\.!$SfRb)?k5"jR*qY&80\+K>JjBH)O8:UJJdd14ccJS1Tmo*g\<e+*]9W,%iK^
%i0^Z=-4C=MMZl[nWsE`pXblB8L%QnT-bPOLr1Fgs>Q;T\ou"NI_S6M(/eCl[pe9Ef^P+K>h/N2M<K2bAL'-SD3"l\dpC@'fMOu*Z
%ZjaY_4<Jgo`4']_r_li!'Ts`HSru+>!]DM"`hSW('!DG&+]>9!GSi5VLT0somuKPes/_L$J,8(YF)H826?dC7)CA91Ukdhk5N-<"
%NgPGOJi*9T1s,4#d#Zd7n>4he<#OI57,A-`j_AC/X"^?eR>pgFN9AkM7!_-.V^/J[LS"\d%+DQW!dj`4$dSh)+Fi>&F2gL9Se,,;
%^^X,]?[/3`&C8.'eTApi++I0e7G#h=pBAf]N)Aq^.c&&o4=u5]X2lrOB(B/>P5i]`<ig1$@TM5)8JP%HY"Y1Pd.GGJh"8^hbWff$
%ETHZqZV,k-'00=5Kd4-P:j?.L=$!Y=RE9B@8cIVT[J4J#p/(ut;QPVoGn.Ug?!q>n$]C!0WL21B5tWc)8u!uU.l`_7=@SS-E$iWb
%*p](m:m8MGP<1<c?9q<R?uo"Wc[4;7U<5BJ:m>B4Et8XI>T)9BFI3k`8IkK[n<e5,D)(d'oZq24ma#Z1B`4'28TCrbC=I\f@"CNT
%4NiR<AG%qeY7_g\C>d`Nab+qaTW:501(G:7<&;r<3.5U4]EON+#TF?8a2)A3$ZqAo]IFuZrut^$N*IcVn:HGeX&-Ak(MfnuP#(n.
%:c9A=[J%ogXZub)1&bZq;Ig[D]tfFm\l:i$EZbTfU=bo8\rTe\jKhjti&!YKIH%++Qm$2Ud3o;)Apc$,AOQ2DJqe2#$@0dLjc&HM
%B'*+CV2W`MnQP\>R:aT=6);uu%5sT]d;#015SP3fE::m_f3,nA2sV2k'Zs0_):q%s@6qf+,>seD$"ZD5Xmk+R_D;0:*lDf'q2u%-
%dWZtG!d+aaA^[rogarJ'4cd39qks-.CFAeK'bARuE_F%\USF>t$`c7lPrf9,k"lmn3eG073%`c4SlE^pZmq!h#ohcYK/>S>WAr;'
%6Nrp2PWX54kp\m^r#&hkao8fc-4m!"R"kQh?uHMZ(;(!99jI%!.rX4<iti(:;@-5tQkG@=(MKsEaq6P1<Hm<MVn&8kLje$,W2au1
%0?jiBG]@!8Yb4iaFWOrq#a_&8-T5N6=9D%&%5X^cXAYM_>"[jk_%j]['hpX'8hsp*S5Af7,\bg_-2a)No[$#&p*rmSW.A4XdkPjc
%F[B84dd[Tp(GlpZl/R!K.Ti@!^DS7'?CQ:Y)N@(T]V=uXJoL\t-HOhN:/Qa>N<>3"%8eAAHPuj_[D&`m4to0/@1mjgN:i9L%$$?r
%RIFH(\Rq'lH6g7Z1\pLpD>K::Dn6i&h/Un$TFj8Lhni)(?8g`+eEVYSF#kVT\gFdn8+Klol,!IIg?Po)1Z,e.)UO?^a`$.8$P1op
%fQ=r.6J:XC67[4)^P.TK:O>snH9(fV`0mH.Bms9BDUJ5j&UZ?6?c*7bDFCZ`s63J^#:FqK@-RHDd-CZ90+bimFrH+!-],\p'Al-?
%qKHnsZAE#=6mH$m<%2(jC@YT=lb\WBNkZ?8I8lj^.uQ$6Mc`]&$TDAJrGoNIL/C$NRM8r!P5#7K>0+a(>P5ciRDOMX4Td<'2>JiZ
%F_1*E]]_][)BUnD$5]t9r"e_3o\&f0$^#a5fQ8QI`+njI\EO?&D7`LY"n8O@eMX!74-JL<>o05;`3!AM4:u_*.Ue639md=M:&k!d
%fXO=m(.#iS;*,d#O!#t1";e-<%?*_MH4]j?L[I5`PN.]$GQUJ,8<,.sCH.Ktap7JjiCm"L2;Dt,PEQ%#)`X&Ag[09YCaQ%2b:hOB
%MeY?-CH,8Q,/_*F,C*sC#Pe^ejQ(Hh]n%t"U6"C+)U@D':G-SD9TBKb?*`;&R2d@cdi191_j92pJMT;K6&%=;,fa]FbD3EC,kpB=
%o*q53&O!UXf5N',%&U^J=ZDV/B1`+AcK)LchE.$W1HF6J8,!qIj;<XFNb.0?%OX)gJ&t/h#7"Mm-(AV,3+mI>B51E#hQ\W%aWoZq
%eCSXdLLZ"N@p(dTPC6;R%;0]DmG0jiKerN*,H8A.#HS1826>jeK)7.+"8P,jS1h!*5&ffnO/AbA(%o%ijOUsJ*Gha>A]lYV7?2op
%!*5Sj)K+M-hB^+^.l`\^=MhTC)NNkah6#H"><%gFA:s@icK'5XGgt>a-:`<_nrh89n/iY@CH,7V1%DEd^l]UT0D".05eCU=I.d)<
%ABPZp#C#\6Q<ncabNC6s<sh_2iS:QSXH8Y'6Bh=k/oi+Re,&*C$Q!*Qf/phW\EMXXW\,.L"?Ak:R&Fqh5X(a'+a(u"0BX!R>qEq5
%_fL'Y!O8&F8`c$:56h[+kS*OJc>gYeqtq<I/+i=@8=IIF[#jl:7?+tK-017@oJ=-S>AH6.S>+;Al>Ajkb9Qg7ghJhRFtC/1*lN*j
%FVh)taab_QKj3m-UI'L3kXCaR[B6GC/lF"g*SV;4EV="6:B,2"C>%*d7-(Of5LBW*6Rj%IHcR(!@]6Ub-fC\9YWqGg.!GG$22G7G
%TO_ho)EH[_-nQg/hjj(L-<M5!m;!2FX)fQ$Kj,iNZ9[-`*SM9oXmHS-Lt1RqE;uRKedZn?3j;irgCQ1!dS)Ln/_kIp=T?B8=8LJ@
%@OYN7C>rHB/X7[keYSZ\I._/;2U%3PdNAt'm7-#I?:34UJjZ;MWE>`4cMe4qBNh[8#-f'UP`-&K,P-7"Fc<A?+^MN[DQq+9Auu*#
%.b3UhE3Eo!BJ"A-B8VYsCfXsQQ0hO[aXm+8UN2*f;1V*0WTSpgccs`]ahdGA2khWR)D1$/9i3/,HPpro5kr[=PP3Nf/E58VWc73`
%P5:4+_Z:ghf=Y->c;V`2&`j\*CK\ehLb5pJ;):ShW4enP<\b*?%m)iHX[%!V]LC<m<hk5/Yp!jmIP7Hs1*-^iZ#gs]q/%5mE2e+S
%IE0plqG2J,(D%rmDYcuQj$?dudu$NNBd''`\$:PFe9B+^IMK]U,G7>qe(DfL:<@7WEk&4PcOC(86US)rb7nc@JI,,>6$t52&+&7r
%hBNqGbA@m!Jt*BnZqgB$+@aqFD;$D`D5VbK-lYrW-ue6*YiEr)-kPk2e6C"XpDXA5.'[?md()8F-AEjIG685UqW6P#6T@F4$K==@
%D;n:\(XPSkRkogNHiXUmc3HI8Him"UCVC']%`*(ff3<@a'h!/N\Y3P)(\m@eNn1Ao[r$c)b`]n$T@8q*P/#-bT9!f<L<n4)^nhV5
%=Ghk&TK]R@L#iSfL1A(/#U"t_<JM@<VjBkm2j?FLgo/W0$3/p<,.?E(g<i7VrW.KC(?/a#[BqQRX5HP]8CCSP&V2P'\K.4R.="Op
%,+fGSs5;0Aa_5@`*Sm-B?W(-#Q'$AJpr-cB*a]mkYm^mI"fm%;&/BdrH;d8YC\ge7&rMFaOY.)rD*'\$1Xt2&m;+H5Z@(YlZcKQc
%EC;<AA"a_aA6kr![#f-,K:WBinlodj^D^uSE8]gsU?hAKRYlVEh[C#`X958WO[lFAq&)q\,q)<D#QLZ&4O'N5m>-_RaAJMs?dnaU
%:?P-53&5s2K]j0Wf0[M5RLQ5Q8(JHb&-d)i$V\s4I(Vm@d_2a^e75)>a3fBoV.2fdb\MRB@mZNF>8kG5VWl=c[r?1[@b&iD)*'&A
%kiBDJ#T.(CKW%!MZ5)%T&qiO]/d&lP*BG7<)1iu`af-SJ5`]C[[ejK1Q(4/KYGkC@_ra\Pad+Cja`'Lk*Ja],6bX^")[8oPV^O.E
%[5Nc[R%HUJD4[f$75nT+`]>".'7u_^q;@bh[NG[h'bZHG<>*94VCE1#$6K+Br?8!`-m/+1eNgF^U=[%-h%9H\#F)kr;-KQj;9@jq
%-;O7%oN>N'e!gO#KHb<L[tWD%P$DQerrO)H:%EWs^=s>_GXP2H*$GG<SIlD-aS&\`nJFDb9>0$:\J7Q/E\tf_/2Zu.13j)5^,BlB
%E`a.jHC#a`6)H1dM9,`9`q5Nt4=RCclm";*A/Z9s\!BE&8^&guH6p.(VtQ&[)[NB\OUM>"ViRP(rmb(u/P.:CobE^uk=+*_e\Gg,
%EV7jg-"f4JqgcO,.188kj4PK*_E%-NNT4c`T185Y4G`2_IRMKZ%F)b6onWmt.pn\6p[&K6SV0QBpEm-<cd4qNBsFt=VNWGA(W?kp
%f`@S)e7JMB=b-O@7T$ZJH.?6re+p*.0a;mFF4`NELq&,rjNXpXY^dqh>Bl#TKQd+liY;a2b04h@7'H:PTca7[]:MD@R29fh8";su
%d-d;nSGPh`a58PC8W?Y;*::Ch-93.7pg):#-99=smNnA<2a>851uI;&N^'cXb;^Ye#RqS"/LD,T+'<\!j,aBr3o8^@N!X_Yh:Hh[
%UA&$I4csC06(ZT"-kt50<F8ah?caJURYf&t-i9f[*Z[7n7)!WcFRTlt_t?2RX;UY8.Gd9]cs\0XSk]U,M\'"H\VNam]I%_7A%GA_
%&gCIVioB/D6_L,iKLmmbDrD9(Ojt!%Pp)N40,hgbjp)#QLtUg]k<b<;-se[+KR7GZr(\J&U0F\47.(4-e.+:*AOHVr$dg%A0Z$M4
%$VbXKC=/r$388Kl+\m:-!fU*B(ln-r&Hn[SM.@GD0;M8!p,sS3?WR#+?ab8%^O*T\%31D/C%R"tfuBUVEOWoh8)[#nLI9MLHQ[/L
%CF5-n.E2p@+?i+tTS!I^''5sW0T;!5;@uX6+*X"?WJLd3'$8*LWkU3e$L^pjILbfOct05%o:@W[b-X5,J`#$h+Db[_.Y^V38fi2&
%5IOrg.+:`dJe6V=GqRNq-MK]]a7KDk@5of`rEC6^.)b(dOlM+$p"7Y'b?@8qr94h]e1Vn'dO^ZHHk*tGol2g&mPr8'*Wds%8UeYd
%:(19O&#.S_cC&(olJ_Zk3@;fO_RNKc!Co>hq$GTZoV_AZrgCU6Mf*)!7/\f$)@62XRE6!=J95l9a#,VqQGEJ$i6%<iQ<SU!\SS3/
%16Emg6X3e?oT;9,'o[]]L>]nY#u9/[5Y6F]ao#,qF9dO.-O[C]P2$msR$*#uKk+3"9us-FVa^Z3b(d[-bZ"L\G]>g&LE><fP@-Sa
%NsgWk<T;=U^-EJIUI<7'#!:5.Nn=g5*"bHTLPUK6,YW6PjC.Y\n0Ahq0A/06_VgYjj]b()?tfZg^ZWVH<($R3q5)X`T,Pc^[[TB)
%+eKX'0CeiM'-Km/O!GM`"85E%eg51/oAg@\5ag4Qnm=<R&`"Z)3@DA>P?JeY9>I)?3=C6A7rej8Q1tQDjJ\6-h`smWEVN*'mhO@5
%\;\b5]n%Cg%,7M'"%Vp<bsZdY7rh#\52mM@P2kc(ju76)L\%LTQ[M+UDl;Pn@7'*_6'FFHb@81>cU0cD!H+%IPaZ4)A'9_3O^sG%
%?4_(n)/',Tn0FC==:GAL\FYN-8V%trKd?F#,%ngupAP/<qF4FkH,72&d7Ar&G!p<D$)L1K7c%S?XXYNf!@ii8%"*s)W@/n].;sfk
%4DC7b0%jT?-d?L&-$b>2DfYq\6V2&aF4"D<m;:E:Na?`aV-JgW`WE-b(/\&7MoP9].'?7u^'Su'g'mdmp?i;Yn)fQ&bqSr<*Y%0"
%@X9sE2b<iXd#9]gE$k#U&tZnY.U2NpSi,J2.*#fT8[&s`Yi+XOmbopD^.o='?23.^=cYW%EqW'2"1ONQq8frfVD<"I#JjPX8L@k!
%1(InphJrW=N&A;#O^\pLemXm2(7O;+>!e;YaN!N_$6@T2Z=S2r7jUl`UROs`@lh/k0^3TAXNhQa;WYOL&q:n[YTqlV_VJ:GVN/1U
%k69d4U+!TPGh5p94[<;N`X-d&]`0U.?gol#G]2<]HWa]&\I.\e?7IB@-o5;kF"r5[XHX=M$X:Z**,qJBi,]up\=\uVcis.CldCN8
%>V``O6Hs<pH.WNU`2j$D-.P>.2c[!XKg`J>T27=kDNN!uj_NPQou8L4Hc-d/T+fJE:rgDc0t>_?Nq]S-R-4#%g-TZrdR`(pDZOij
%6/lB[ZDY`;oGhbmR"[2o%R_R_QC^1_8Zq7eHMj)cd4'XLPMae;JKDVGGB?I@@fr.L^8=g1]n6^]k`gU2n*)Ep&o_?Rk=G>H,rAlI
%KQg8A_`uam\2S@P`sH\:WjWYdQQl$OGqD.G3$.);MRGI#KqoW$X"^4bi>-[fY+jm*fbH=&2NgoH_;s*j:1"4fg=1VU69D31prbAg
%Yf!a,Fr@$$.H/\iG?e;f!RW^h\,t'(A5Pj<AZa_kC-CQJ8b)9-85;t@nf'QO#JD^8"\3TZ)OK<rOkddZhE*][e'ki%#&<^,fe2\M
%eDu<ia+ZHk,fc%dhV/f*P,%<4Ifi43J<qJKi(/mkEQu1J,<;cAmqE.LaU`j^oSR?l`,j@lkoJ6[nG66rHNQcQlu:B730M2Rmp<g7
%c5!QNeG@$>Hr%uu[nIt><3s!D/c+/"=f1si?ZZG-FZ?p_/JK622mD?WPP<LRKnSmpc\Hr>`Z1R5ol651"p@Q7l&u/#PJFipYeS&H
%"Igk*,.Wc:#XnmZh,Jm.982]Z^XB;*=`laqhMFc]3$tJ>OScO(&0hQUI6&@kA:DD#NZrpIQc$L]0R1P%@IikQm`9fp-Q!l1Vd!NP
%jdu3r33JplIs<\hLaYZOaG@WXW#$^e/u#IYTrT7g>IHpsEWA8j#^h^mAC/s__Yo2LB?)q4j8bb9@PWV6ORQt4am*S-es@@e,0A4%
%0`b`_^lK@Lc47G^ket*9"K#[>__h];)r_p9fq6**dertqFNhgsJdhR8S9<<u_CM"PW(p_]SA:'cDsWg9.=beb\DUI[@;fV0iAK7R
%^IlcXWKE#c6j4a6q8;=r-d%GC/tnta\-i_%>;Il+qkn@SJ'XHPG_nN`bX=V=[Za->e>XX,Y_'d4L/"2u52fr&N:Y"VV[?%@Q(0sD
%7g\5i-Wd8FNO6A`[:[?1JF^J`G_M=6F+FRMoV0(ajef#m)dXo6BrMdD(?tZYC5)=FWNsXG(=f&9K?B:uJTU_"9h>.AS8iclIrU*l
%pWe$Xe$Mi&`pm%V1el-J);IM_^_[JeP[Q%/o<l$^du7^Z9ZOQi?>0B:*ibnljiXR-ai7kJ3c[O\/<Vf&a8gYUmjI$t85F+VPjpIM
%haoQ=7:Ppjng's%0-DVmI0KAA@NtY;rL0/X4=J[A,@MrSagSFMZm>HFrhi/:+([af$be\@Kb7ifK6ZWt.A,XIih\WeaPp,,6&9k!
%ROO;\V*GBS&h,XZ9;F4/1LZs;eVKCZ(l^j'G;[2G&9DW[*iH^9H\8Kop'mLN>-p43*#9QhQ!h[s#E_WBo(X**#`iLb=YfjBKEr)l
%Bs:H3YSN&>C(ql3,a'n\g!%*d\s2a\.8q[?D5%IFXrq[urQSVR9d5C%@#XqJnBDAl$,*6*Jq5U)CL9F=/f73Q4Jk"_%l+7Q,q9,i
%i[BhY71d?g)4[^K"(iS_jIAt2>*u9balBNF5'EZSfcec`g5"M.&TrG#*TU$q)%8SNs3ne5lhG\`E$&>uMYbJ^^4FElCp6),(em>g
%<3k(g>#YdF1C=+;6nLh")(:n.U*S?;d@PQjN?>`$8%=`![qQ#+^"<J0_`a]Ek5l=-Vr\SQ^0p&98ZuNe3+P!>EM^WuF9jjNWV[TK
%HA!*o4,?s7OuKbo_nBY,0bse`]RcLiL(YfFAg;<qcdUb1%VfbRI#7AN)i4[NPCEZlp%Z,-$l9`X+:Io65/)b2C>i[O7WuW@%87#a
%K9NEX9Q+=(/AW[DqKGc"j1qOVq?Du@I9NT6*?<2+iH)3U8.<-*p(!,4;'SiLJg3:p\.*B785@39q$e=ci@61fK-NBZ3O^qDPJ^G3
%eTXiRis;SPpBHZ=),[To_3$j<&*T@!,Y+6"oF?oB#g7CU2fL&:Lck/:NoZeFY.\9h1$g(]CGsW#<2>1+:fHP7)e&aNC3$s>.f2/3
%TQY('UQ/Lq=#d+43DLF"cR[2YVY!;iEch-kU8R7VB"[P!/#DEC3()oY()@%upC,Do&5?Zd#9c';WDPSZYe'k3,/msCBir7>$9t8R
%M/T(ZrB$PS(16@,WK>;j]`*.B,BbEKKps\75.S2fnqa122I-DgYp9&rgiO:$$arc2qA&)jh<5d(MB0fWiMHu`NAYRaq>bNrYj!(Q
%MB0fWiMm8O%='cb\e##g[Oku&)R2*o/_kFk!aI4E/su*_/RoGtYp9&rgiO;$ag^J+'#&)-24t[GP2F,V=/3+DX_m"AV&ij1T?rCb
%a`$.<lbabWE%[]/'m';?AT`nBQFp=.GV0Pg'1/`n8,@Qn"oKuSVRs./@6n4#AJ87P,P`q(W2_REn&Ab82n=][-%o1OaspaZomq32
%(i/B,fS#B>&m/9K\$1fjWM$.'VWD38fIP#Rb@DB$OAWVdakd^jb&Afr;ec?nH"^EA_mKT=)42<aE2hWTrgn"MSm^NI2f4s%or;lE
%7IE]r:G:EM8B(:V'2I!!;EJi)iVcZ0(<pb[l1i=uh"\rhYPlOE/("76r#m\KFWVdd-<f0TUlrPCDA;,/?N%sT3b`</G.[t#I]N/C
%QO4eun**m?[.]NL2OIf.[qQe#OZV"KdnQ=tHh-5VD0W/@g88`&7IE]r:H*-=Fld^iT[35Cdd\@6YMcgbaO`l]ek=Wh\>3l_mfNEi
%V+'*+[T-EZX^[/,X^\6"NP]:Gr6?'PUg6U9%1;W\>MZ;aU91V!5+nn1Ont(ieP4HBNcf=+/=3Ycp;sDWOn]]pMC>'/>sGB@nf8:2
%3B0)q:EpSF;%`[[BXa:GMVAPfHm7Hi,5Y(dV6=:&aepmdk9i-4e">;[Z)C;Mja6!K/<mQ6qiDJO[D,FJX)oW$Kkih!*3Iu#pRBH@
%6ImGGk8Xu5WZ@-:U,b//5L:+@+)#CG*sbA#c47fIb`Pse.V]Tkd6c.2'W%54Pjt_a5LMIaOnDLPLRH8#I?)7TE382m[A0kaDm,NQ
%jE:6gbfUo^DrIG3*iFJF4;q"NAG([J7""&;@GJ"I%>#rJ_K4M9!@(c[OGbsQF'shbKt"9:U[&^.Pn;amkP7K?P)%;O_NPJ(CP`hd
%gf\g;,(Ccr6=N:'m1cBC]%4m]6WYeB"Nrh:7V&"FS&5,:9ST,H9mC74q!HH?YX%b\'+H7/n<TnlADEKS#`jHWS5^WR>58Z[d`RT.
%N"4+n[4mZdD!&d@$\%]W8^s:L4X]S2f)L<!lHR]5+M-dM/AIrB,X/\c2)uh*[UN`4gjHRTBCk6Cf=J2`4nR+6^aDOeToP]mH2&AR
%kCZXXegeG7MKhE.jc1u_a7^,7j]BDT^`dkaDTn;J'4_6_6[V(<YK2B()uN/pq,(r^HLIM(iA[9[W4:^@HFYJZeJB)SOPb8p9Pa2q
%2EA2i7)a.^;AetLcZ\WIV6Q^j_g;jX*EX#;@1<D-+mXhG4U1Edd2P1'NW/(]77UjV*;6&^ruuYsjPYgUX?ke"$Xo'XQN?&D,&fCk
%YW(W.Bod3ahtl%TT([E3:W8Tg(*&^K0,jJW%!kLkjhd/L-Bo&5h.UXWnD;m8ZQm_W.qM3t*e/DTbQ9t38!32r(#b`(R9=u_!ofNb
%6Cc'(</cQc:ekt*DP9E\)Gu;(f@tl(.-/35d*)eZR;+1(Y%8mo2jM7f9j`W^)5`#DL5fta;FDshGj#HC;3bRG7eo&r1Pf3^r(>IL
%kfG[QH]aF1*XVV\j3V4rAEM!J-dA'/Vp]N7`_Re6>!Z>'P!u'JARS0De,lVZf#so,HCsht]e-?C2/2!ML#1NR>@0^q\hJ$,<?B&A
%+ZghdBcWL2^0:=?U5Vo[9mZ$Pkp_V''E'eq$<h4<ku(_1[4/3B\CSg1\frb"0%C[K>B-XFpo>s2Kmu=3P`iW]678O1fm&EQ\LO:K
%VVD>P#%YYN)Uu7=P_Dp9Oi=:h6!H2Q?)pOqRmO-8CMd<0ej&)8&&'6G]H!g#@-".aGI@iS$R8pX&0%V;Qq@5(+Q2E@@otWdFL(uI
%[]jTH?>8Ou!0fA5=Np!4W(8mdjdn7FeW8=9%8R`/YUF%8rY%qZ7]Vg2Y!R+^+/$"Z,10<VDAaG+4"eQ>cFq(fWg_4;r?"2NT$G[O
%g4AqhWS:DZR9\BLR*+LJ*"&Wg.4UL90BbqT_.*e:k;XaF/KB?;/7nQ^:-W]s%bh8bmeMq)3NVQ=X<Z^CM;hVY7-M4_C(T%S]:DcU
%h+I2i6f:WsX=X_*V*1O9,q_0Yiu>m.%b>"l&2e1<@dp6%GhN#0r87PBhuEX>r5ZR!rkmXl\,Z;ss8N&sqVT*f2."tQ=9$&2qKMu&
%5Q(K;rR_)4lX0[Is7#KLc[Yll5Q9D%r+Gs$hgGC+puVO9s$8".#Hl^m"B]pk:9$:jA1BBp*5`d-%Y>LMSdC'!IfQJ[$<$2UT>:UO
%s0*#TGV3G:<dfs/$'q=6.2Xr_!FY;T:ZLq>&/m\,dg%Ae80dIXSWaM/1(=r2("C.6*=-9CUk;A#(?2&a=q6;#g-_+/p6c]@-s=Mj
%`Q4)R"T_E%\4B\:p.%-(+(ZekO@TZGX=.MC)D>4X'679A)?*?J^=L?;+70!m*'7?lRc#="n.7B)RX=-2.`/G<RVZ;,Zs6]TYNUM9
%oj?;m<d#F8c^lnEra5H$<H<CJ&60Wbbuurg5'k4in?sU_Pt2>3"Og!$)^j5l4>?.KM9_#L6C>H3)G2]uo"^;f"c_<_n'ogs4=GU1
%$09PD5RQQZ:NqdK1Al`dW$>f6)F^1ZpLWi`L[g1TWto^qq'j&F'['!"m5R0kJ0B-15/a#/,0Mhb^hY@XHE[qGM2'6@e?d[g"ntV<
%D%Nt(F"hIn]PU6<ooSe0.0GVuBIq2](7%DH4L,r_#W_.[crA\Mj'3kb;^:8In/P#ndQM0lUVK=]G%ppW:CH\hA,*O`jL<J]+231f
%&UG?b24eFc(rNT485%nfJDU`:MUl(n:)i'--Z(t+a826^[duBf[\7uPAS?qN3XInLB>V$?J2dJ)0#%W:(F4.)o-f"H68(\*P_G3S
%6VU('"$B_A3oU`rnj#A%\^CW$:@'LS8@YQr_FMm([mj(F\#ZToC?#,DPocM[YJ<YS$fqg+E"]O>MDMQQ/jGO*-1KeuASKe$%;tu)
%cCXNKFs7omJ;.Ir+7+m@PJanuguMY(>`8@S;q_9'ARg2S>GTZ&$cQd$oNWfq);%'DMhHFl,lAPI!-<5>[C`rP7KFud5XY]M$[^>R
%n2YtNl0kS`n7P]bX\YCgpA*\Mg'bkr)"_&](3G*j>SmeAe4B?jWkUP^QBb0<ab@?8=5Q)71A"g"#$*bM2\PPXOmjOgJd@H(NY&2%
%-%4DLmubH7F.orq(#ORu4`TOlW"H$8UIQQTlc\a9MX"`9P;0.B<8"VFPERJm#G?W;O%B]qo5!X<I,>Y-;f?`)aV#d$UV?0a&8-aS
%=ADK[7YVTA^lu/Z&g,1c\>N9Bk;uq!iC)h)4C4*>B[I`o)L*lr?6$6u#*]%X:'#ji;U45e1DJeJ&M/BE/ViEkD'YC<.s8AdjE92k
%E!p=T%s9dt#'sJ7d.+f.E:Bo"NlqLl!dc<i@t=p8N=3Ea('1oH`-pJa[pio_<lt)5>kR'P2]ZlBps]Ti.sF<b,W>Xd-G<9#,B[;\
%rqJQ"<-)hYpk10*mtHonJU/)cgEW%l;O)4Xb2"sK5<V%QQhYkZ#nPkL]OO,f*E":K(Q+!(Lba-W!OpFO7i8N6rbCCg-;_W?nX*"$
%Tt$PESdU5[1`WooMhHFl,^cHsUY&G4c;Ah_D-;C-&cc!Y@"Gf@JodJ.IME*NF.El'C8gLW%uRr1P/Fu(GDd)l-nc*Kgd:7RW-GO#
%'GiR0':VV@@ltchNnc%G@hd%q;Yg5g`0jl1@B*-H3I0E0T/HjX.^Edl:Pqof678C,kdaSrn?[Tr/)d'p#p1q;J.*gkJ_i5/p^T:B
%#mQt/V!B-e?SLa5knJY#%Nei"qWVO-#/LUUqP<:@iF4%T1%l/t$VbrpjrGOi,Ns_!nA3(Ri<>.dF/?+qP"1C!_EFG&bh2gGiuT&-
%OSM<.qt"-\r/'?p1EMjR/$3cc?'Jq,Im_cX$Q9kq(4-@#q>e-en;[tZn3"sbQPXV<`rjG&O_X+lJ6fl)p(ksGR>j;bcliB$C==fc
%_O8-r:t31R6NHO6kTK1+SE]52^8LRLo536sSY8o04uL,q"hFN)UHq"Cq-GLZ0B,1<+R7trhH\G!h8/\(XFlZG#7<ns[(f!@S8aGM
%4>)Df8PgQDinO.eJ#a$4BOAs6+t(s8_=lgs7G(GATVbE7Zr<>?eP-$Md3ZL9]VR<B'<e.7[A\H[&$I:X>r";^QfE0GM>O-=)L]gp
%*ff4t#F49DjZA7qn59k;_.EqdS7IK,fG4q952HH?<YLta)/;eup"WKr/jh#!1@lmBT-IQZ9V*&H/ei6]"()1p!t*m<KAuBX?47ir
%RfnB]E^gS$k7D\ng,WC;pA_^/PFKSlj2hkaGmE5__)(=1K"<Du>?q\>"K+IHdTRRRHAt"#CiU2OE&gRVr.<oWj=u[N7G0ikJ,(G?
%&.VUn.jbEZDi8bl#1saY29Eg3L$P4H*qGeugJOe4RBL<4Su1NhGX:h4s5]s_4^SF4@32V'd[/K6kfJ+ld?j6U'Kaf8S&?__:bjt`
%N?VWM.X#jn*k'/G>@7)8Xb9"no`fOYLRnfh6l,nH2,XUp$Ci0&0.X%FE)cb@3X(KmBQa+o>0>e?E>'4l(/!_dZr)EJ;7-l`6<2-=
%?hI/4_PE<B2$%.a_Pk;]!9Ur8]-Ba?*lZ3Fh#&eB2<uH&&5ao8\3Z1J*9*`a$cL2Lie"+V\9#PiA+H>Wa^pPBcQA0V9kb8tf#MX0
%a9[VV@BIXA%eB)lG>IajHeFR(U4I#mb<*ZfD)]qI/G0HMnp>CsML)G*/=j=,&h\IC+&5%M3b0ds&C1*]m)=[]HgsL!JbUL(Yt2I$
%;o1L]J2%BiN.gB=WK)ddSh:D8Sh#e>hNjFaJ6P"^6RSTjVR!7<'Nh;Ml3oP5NJ)Yi.?kB0RmJb<-<Gnb>1$9c4l$erbSBNL(570U
%fsM-l6>,#!\uEOKB:j?IM.76:g*X5%VhBE..4"5OZ7CSebTlH]-af\HKR:9Z`/?'OGD-lT;VW!^C.1o)pN09r%pB7H>p9#C9=r&4
%Ve@U>So+mTU`%sf&>pA:%#sZ#/[_=NKR:9Z%"3D-rN;6`V!>+%;Cd&c\>Ph5,`ZkGKt'<;D-&]r'g3kudnM"BYgp667)11ZlPn1X
%T'>_.VQSpA.IZO5mlFhJ9km*m$28O?fYehW<<u5E(NtLr>1$9c4^Ad`LTl/10D(:n$oWfo)UV$k4l$h#Z`LScFMF8\M6+QcXlq4m
%So+m^]-DfMX2;RUo6KeYL0Du'_EH]hilQE!HQet--+EV86`oQ$iLXooi>"'7]o_UNoA0ia[A'RPHb(Z%%KG8m*L>W4f/K?;4O`3:
%<LrUG0#YF>]%4?sqm+"8,MG\uVjg#1k-4SH%pp7PZG9?gH:k]FRmMdiN-d4rS#<PF%P5#^VhBE..E$7H<sLBUqpN8X.p19XYtYu2
%l_fZH_uYEJAWp<6;o1]R'G`l3fb>4qf=NK%e;Bh1mcgUQ8M#Qq+[(A5qk'Q_oTX;j=+pqSiJqbpkQAJXm*0T<,M8g,Vjf`..u:n=
%"h`pK(Bp+.d8RnFh%]Q'r-2m0'd??"^*p58MOkIKl)#$\]@5X:n1LR(b5t>=kUGJ^D@5>bAFC1fr,m\+!ubo#%fs.YdoI'Xl(X3>
%_Y,TqW0KIkgs]7H::ddd]--nNhq&!s)UV$k4l$gh?#e`5+R\.0^*^)6MOkIKl)'OD.ICCP#@>Hb-Eu!WSeCJUVNAHRn"#R."SO^(
%V,m5QE)/EHGg#II:5F7n[''ce[A'RPHb(XW^IlcJb)ib+p/Q[?<qMVq:H*t]S),)5/u+GT;.-Ag49XHV<?&V`/pet!Iq$/G#qRrs
%NJ)Yi.J,U[g<0_VgM("-=DC9#$28O?Lr8<PGQdXeD=<.4>1$9c4l$f!]\M.$+o)Z%(C$1/d8RnFh%[a&[-X?F0)dIR?ULsZ.H-k9
%$7hZ'mL!Bq\1\7A[A'RPHb(Z%LMV;b`6DgUp.f;"'g3kudo@Q:+kR$;3%m6DB-`3Ma]#u,gpH`da)BNEFbg%/Y6unhP,Et[\g`Rl
%He:D'*q,tS?!sWH4XJn49d*d>?;=$&j^QQ-JQD86Inr"G^!XBpG<n>@3\Dd*L0Du'_EH]h2@7:,.`?E.IFP[SMOkIKl)LtL(QNo\
%R,t2j;`L`gD'[oc9d)iI?;=%!0O-7Y,_fLM;o1]R'_Z_5p(g$a@kS'4L0D\d^b&fuIH!sXg_EXM_7OqsWRJNbr3h8jkdaLmD%BL8
%;[j'-e4>Zg18!4SC+@.&UQ^IQoB1iHd71u9h%_9T=-?d1C6hgcgq;0Lkdf,4ou<`(KR5a+ODuns^1uB&'FWM,p*q'sZ\Sb"2A5HB
%>!b(Yqlq@g4=Q7m:#QGr.aeK2T5N^"=Qmm$J"H*\$;><TI&G?U%=HU@%.(06k*,S7^)".8ETfNQbj[Z60WYBaN_[r`[`Pj`gt5Or
%^jqep(sX/)id&RH*BOc9WgUk5Gj*,+32OS'VIp`].:7m;7A6JAaLHnP1K#9BLsqT>YH/)f'[mHFhXV%Y8nEZ.9H/#;@u=BGbFo^9
%LG]flG3\Q:)38(F_7c#P;YL7=gCJ=RfWI5m#=N=\CdjB*_+sk-B*44iMEHP#jcHo4e)""p5+3nQ4#]28To^SWX'N'Y6k^;>SJ^&s
%FC],`gFn'G@QAN%1n_]tPD\90k^ZA0?]PJhd=`\S=pbr_YC]0!7?X,FV\Q3lho;0jMQ?L4nkLu2(rI@Z)/J&/qUYesgEcpl]%W2K
%!)]`Y1mU9mq6mnIUV\4sb<rJPlW0IDYG3=U`Hsa&(5T1;Q6YZYgo(7DPHT_fF_ko6$XqX4Ad,$JKu%!IK#DjkO.l$AjQjJ'XmInF
%/j"+d;mqkM.33P&<t%5.$7A2t/K]q)HYOi(NX1)B4;RV)NlVuD/'SONpgE/Nd?fr7htoU2@i/_f69M^ZZV\_tT):\uZ%Igor4oXp
%m&UhP*'Q;O>FuTn>*;)EYr'6VKMg0%?,[1sP8crP3-27pA1C"fa_+$N,mG*O+)r",CH\iLhp5["/9W1.$l!\Oi*<\^>UYQ\eI0\7
%E!oD:cb*2O5";u3#[f(,a0AOGfg8h9+6A<5nf(k\\^h@<d9'9'!-?4M$Z!blBr"aX/Rc!nH)qkt.\"8#Upd(RJKLL7%364D]N?S-
%T$g*M0(ncPX7Mhl0b#E>>Oi?X='#g,=26\m=XfY:#/S\&!qSN7X\r7AGlFCm6PkB]*2?T_6RnDHJd':\/+Ypk8.BpYVJ[5QLI!7C
%PE&mDEMI>;Xcg_Ac-/=iMhfs?OsA!8Ku1$GQ_nXKKfjHa5fH5ZiCH?\YD7cn3MgLDfq2\R96lXWOXPYIc<I5ZnD*7?C]#qK?o/mO
%[!>LoR?9Vd+3n%,ijO`,7KtBRQKqjeK.]#>W@=[E8$c3HbJ9LR)N2@NXD[u>%">>WM/8.\]%!+D;T,8=<lE)&;I^rto7sai7,4VJ
%*oeNF-M"UNeC^EeND2H+)=SJZBflD^9\`ZY'[j\KT><LhY-gKVXg(0Y)RED#3-<B%(jT8!Cuj:KE7Vl;[oLX^SCW"kaKZsS>jrLj
%'[$5W#g7ld7s]3+4,-Uj`c,^e%*MT'(qcbM1\R:hR^'WV6^C]?*9NQBY?&bs1c#O#9H.\LZtmp",Jt2lCUY:*Bk3EfL-]_:QI\E-
%m_)iA=Pj#acR=g]<uPW'fVGs8/Q<XBWgGANjCDt6,KKM5ZOV_sX]ce+oNE5hg%q/eesE)-ON4VJ8d_9&G=iion:oWobbqjI)It@7
%d&"T1jW[G?UEX;VClQ\%cQCkE&94%od2M=fF`1X0QJ,4pb#bf\[:;4?CTWi'XtmOS[QhZA4"Z)Y6+3p#?0]R1.GW9)X'k""WN2.o
%qnogYm1o1/2a8qUZIdU!93k7Q9%^%bIk4;@Z1mXn[aK-k2LjkHGFL-P[^HBGC<KL(i6X2/@H;"!Xc_fB6X'qno!aL%N9f75QSkr$
%#'.f,A[mLGnm`R)4"4_Yln'*mX'maj%nU90Sf5jEDfTJ[qG+qI'?8/QSj)IS"RB0OAn?O`@j=^+Ffc?p?h>JEmHn]9V0u'!g-hRa
%_qH'gFC:VgC&>c>0!%9!lIHn%ZL)GSV0uJr%:\Ogc"?$JBjW+2o7sai7,4VJ[)VTqplOMHg.m%!<;.F&(d=fihOVHY4hj%eHQ*)b
%5H<Q0:n)tKa./LW5u#RY&qeEjB%!rpRGu6KB'Qe9S!cdQ].o!Wa_-`kP&&l9`=f+Fc-FkA;rZ>WC:9h-9P[s8Ah^hV6=,s6$Q>SP
%6Kp=*g?;^=Xm)6#Ml(.8K@[9nhXU4l`+5,a82IS;cEr_27D%-0Naid;-Z&1od*VuB_tPc9%0_d1[/Z/07NM\[h:c#QIH0>"9cc!s
%Q=Zh/OD/?kN[?I!NJ94]0(!K9dC-AaR+Y/'O_81<e;^mm4L\IJ5-[(_5/jXpKrQa]kJsM,7TbsPB$pC\(.o7-dRHTlC2H&%=g[Q)
%hFH<UJ\\)O30pnH"c^`..%-[T7aWhG,ON^m/YRAm4.C=k]#Pt;Z6,#V79tc)QOVT(`O('H&7GV-QA2)A1JIBXBPD+CNWqM^c"9'0
%g/^H0BNtEdbXcV$6BtgA7bcVk[+KP2_Y@G$XjZmk.Q*h,HWr,471l$Ip"SK!)O<1[3:]qPl6Z)To/N8.b]Z%2O4HFY=>Y)/WFXb@
%PJUVj7Rsg?mOjb_#/I(``^i,ONq%4+[qKC&;CRYA-`+7t8#7e_*0iE0Ocb#d2+,K;7W'!afj;U:iN@;Z(ML+5[$<Q$F10NZ_JdR;
%bJU=8U7"_KV*%eKPhPCCQ+#an<8(FeO47[m4B,E<Z=4tifnuf@4PQl)lRThX]NmsTYB2<S&[J8b42_C\k'b\fnM/dj+_&L#l(5sK
%>mFZ$Y*P*UVWaBtdZKl-krSBOIjcV4i[iNSlV5@^WV&66Z7Tma%G;LT&!?"@(e7<lF'1=aX/5C_XZ1#><ps^19--S2S*+Q3q)j?M
%8es7(ZV\s@,*!%TXW'DH,9mW+2)@VE+XtHHT4_S';!QcYOIa$*lGJrb8rKd-m"+JqbCQ^jLDE@$bX8OqQfU&?jE^`DP\c5`BJd&2
%`Fq'V9/#&Bk3\@LAb2@*IY`!32*[Ero=J0U%D[jbAn(GY<bAWs)qha9S#OF[hpc)^b`&B]CF`0&[b$Jp^qiJ'V97`q1tK0:)-dP&
%6K&AQNqHEFJjpdtb(VRe\A4$J;-cio7X^Dcq7+WejG@2U?Vt7Zb_r<\Be)r9G,^g$L$9e-XY@BFehW9Ip8j%Sgg6'p[hm-/m3,+=
%gIC:0Ctn<ED9+9d9KoIbWj$/I`Bq];PVrklWKkM5)"hsJ<Nta$Di:jIG>0;BYec^De%uCV9PuU4rB3">L(OMN]IiIS1gh]QL,Kfn
%lpJa`W:5E.-%u>N#X$*j;I@5%*jNXD*lq!S!pJGtc.fG[9V:8pV7iWk5[m*q="qJ(fs'X3NQ_[sWO9-foi9,G<ViLl!ofVZrGm,3
%<9!nje?n9!T`I7qpWl3q^p]UOp7SbJGA;R4gSknb(HhV(%hm.Up]^sf#%^32Nb"brBS8$cB7Hk_(+mD320*YK6i3M[$WHg_N4I#S
%;"23C"nHVp%AL4cr>=8Z_ZQsMG$d3t]NMWpAgC1RSFU;%NYC=Q:TiLu5NGXe/p)qM0I5FP,N2#`4/m/IRs<'D>L*&;JbF$i:CAuD
%:#+UNo_6i@Qu;l@(6eZcXa\uN'6j:0W$2Z7[tSen<Qag?)db<oI,7HEdI'6u%6YSI4=)(gV!@WLI1(Ap9Cub`q744;H@.pfmh/;Q
%(DPd4nB#AlFUkau'Sl#)ej$.]X6<uuW/q@DP8$/&jO=Gq(L++)(,ReQ:sS_J2p-<C)*QOhg$(X?@1_$/;nCPI;H"1;&<1BK%PJ7A
%$H!:2R&sC-N6p2Q@^9#NZ`UY]l)]L\h]S,FKi3Yb0J1hO:+g[CeUqXa>m]?P8uSkEN$,5a9#^2"$V&)iY*F]SXs.cK-1oiq88tU_
%9l9/]FY%3:Atba\73%Z];DXA<cX!#=7!4=\1I&6'krXh;*`g+FA+7<B4!)K<TX$h=.)^$0W^);0=:$fck_Fk%SQXHR-Os[).ADVG
%V![j>E<_'**=!S,!jtK#?MjjXC#N<P!Y,`5RDH0k7&DR.Yo"mQY:*2?V'pg,i?^aQbY21O(BnM]>")jj@<RWemA=V>_p-@jbHI$O
%=VgjiBbe"bK)U]dAW*'%%hJ/gEb89j=n^p`!W-Qk-c9*hb<b;n)Q$ab4m8iG(aKj^"+QR*_nJ:14ZLBf"!^o$Z%ML\<pM#-0:XU7
%5sA:"AU%!koI(fg$`YJ7I8g7?I:QGVq/p@:(.s<:nG^?65h'U8`)(]DWhh"o..)S,K!>1b4p@@i`t&b%('p)`M,'*OUhXQl70UNp
%:D#Gj&c9Z(',g,oLVELgqXPBXjgYAQ=fmOhd([>`VfI-\8:Z@)Ti/TqS`Im#q%tt8rN(M)QLsdW>2+WQ8'dB20Ia[H@RMB5aYeC`
%9T/Y40l4Pag*j(k]gNd@n1]A9!-ZZn/X?0Ubg@LY,[0iOjDcf)E7_HP)G?nGhg^3'2*+WBebZO=8JikVU$#%ibCn['9F:H89),a*
%DprM&6[-[?0>=sj8*'2F%6YN]s(XQ06Z\+!a=[&RA$3GV^-R#RBC_Ii>A3U"qj7dU*'Fnc(PT^c5TMkGqHdmO]9PcC1qi(F":/8$
%!aj"aRYV3Cqk=K`/C@"QceV5o?W/rJPSeB#GFh:c(Xu'ejPR+apWAH[nM&@(T^WZZRL!rDB-p$E[Y4,UO\d#!`Be6s*&s9(34uT+
%5%5a#kAR_mJO=%B8qp[T4k:#Kh:_kAKGW=)__#p>YA(2agkLkQ=#oU@1p]L(aZ^Gfi/_7p"tf8867MD^HiZ?Qar@>4^.E`$`B1)]
%^8s-o^kM5XUK5`Oc(`R+Vg\@p?=u<jG$`NZIDD8s-K177D!)tR%=64;F4W#2AM#oWmDmA_iXRU*a+q7(.)Sp[[/o&Z7#TU,1"=+q
%$YGX[f'!h\bpY9WKVu7HYNZ7;r!g]^:#>kG#/C=6MFm>-XKRNi.ri(-Zj9Eql3IJAPb)UQ);M"gmf5L>=H+WtfF`Pn:oX\gqhZBb
%3Q]&6TI2t%UW;OS4rk=V\$sf*'o@:P\e#jfKZnFS-Uh^I<[kn#+a8[>D/r*4n)l*Ri]p:g@861_k3j5Dp4Yr(5t7uMP.a>_OkH%o
%bHHrW32QnaTV7R3V$=/M.7]]b[>\gs3O_@\lT;'sVifb.'>(/`Cn.gBU:o!$+d[`;coAebkem]I[Zue9H3&E1I,oT8bVUp#oR&SJ
%A%e(:VY*Ab3Ehm15TY^`8'jqTa:]rlb2"4O2=H:Y@o+)X:aoBD09u[E_\`YI.pY_R`/MClTO1/bDnR#ia[W&"#8[Ea'LUtqL-fGb
%XYb_aANesbp81a+=N"W"Ue;8+3(DLl)]T$Do?-3,S4IU6c`SZp0h<(Tg"!P/&7H&na#:k=7!bJGcGUDoOg?Tj79gu`[__6/o]/AI
%al**U.)lsF.IZk,Tp)nrdM;c3H-5>t$ST[+D!3:A2rt[=TKnd6OTSH3$M)P?RnPd5f]g4dqrV)Ep#`OdIH4qAmMj8?Od"R*(<#2m
%I.rc:bh]6iQu?6,(5<R%%iiBtk]@eXaMS4IJ(8aZZ"OuOX`U0r9r5)F^;rnu+q2#lZKTbmI.W#k3st0#WjENHhsO_e>X^=]/QF=(
%2nCJ[SA&Sfib!Lf(Z",qocHC_<[#(<&WW7TDR/4u]=O@8jR$2$I25=srRbMppS:6GT6WY4nf>*HMtU`$od/H\60+qM5u22dNp`Y)
%&*a!8/`J=MH7'^NSDm!m0'.MMlD7GH&%!Eh`QLF]SXM(:^]OhLJVluD<%j+&_jE<VMmRrslQY&M_oW(S6,E.[,KmC,2%-dIa6JqL
%btnWN48p&1'V%!g8oW:Tae=\U,gZ[_042TTg<'S=F4"3rUVhQ7O=(MSh\&)nmO2*+%"P=E+t+n'DdMZB_u-`g5WZKpjGi16MN@2i
%hWpi[,""ui]o"@M&Q:=/%m)9%71%8(iHo''"e-)q.mE%X`(P^0dQu&"B.pOS_?+B57?1_;mYHE64\DLpT0Ac^.)o6ZHq.mhK7V?h
%I+=EI(rB2gZks6tnkQbm[%$0$I4=.nq4qY&M3#]]g@A5S%hJ-7Bgh-$dkVl[p$9,\d2X)GT,<G4coa0"1kA1LC*FAdi/>-;l1<F&
%A]3Pf(6.27<MX-:-Y&246]YH]B#RJTobshJSDm!mY2t)GL`Q"qQT!UR9!]_\N.jdn/t6Xf2_?qW_W]u(D_XSR4%o3O$K?j$%ZH.V
%<Qo5E]20Rn"*a\"%2'E.d=G`Dq-DqDX5s,p2p@tY&i2)H:9;GUYP``;Vj1/tmOf&kM2j5C_*i0NnB*Ce;0ju,0hZk8#ZXX&raV4W
%eP^,E57r#QT$J3ViM-U24QP_^_#Tnaqk+t:VVt.CdBPZGe>%rFNlXZ#Fm*\`LIoU2L1l\?"elujm&6F!R8=!tr](n/Nh_"AgNDI#
%^GtWmg\6*J*Ps1i'YU,/1M;->1a3./9Q')+FL\tX=WfcK*o?l'G;5!u"a5o*7T%lM$9r''obg&7N&Es_\L-^do#$mi+mi1KlQ,l'
%^R*F+T,TpM\CQ^]^#KL@]=/LKnqX!64F#S9pY=4PY!)e!,\)+p3;2Kir[Q4^HKB05l2Oi?[Bs+XF4[t=s5?X6m&'D'4bh);$Npg"
%5mV]LR[]<Nn?kX<T0rU+[+=)s[]6>`l/Q=(gsnpCQ:fL%=<#qBo#'$ZY0@a2m$(:CgC("JVRLK0/P44l-kbdH^WaKM,,W)q're],
%QZ>gZ1^+3M*Z]j9b7C/8]r&@IXgc6*(?U'$eNl\0s,lE/84[ZU?,5ttgGuD(dbhNZ;SG1$-MCTQZF?qqo]tAZ`+B+:4KhU^OpPP3
%(8>!/n)td&]!D1:[=PH=Y9Ig^s&Mih4&<Nf<TQk)fX_JJgGE<)c."XtYkI\a.OV(Akuto['C1`6oGg1<:%/q7;Ln4=<!B@a4C5.M
%MpRr"1W;U:Iu'LZlg1Rq5h`C+eiF_2P4rC#o*D$s<GMq]<2Y-BLSbkkgU4M/bLuKhVD%(S&p*%fS/0(I!$[``-5ei%D6FZ%_(7IF
%5AWjTk+/Jf60;9EPaSQGLTM"'`n.I07#+ZodpF!gHWA[X?4W^Dp9S@t2tV_TG;5!FN-X3%Dns8BLi`<bpR9'>5uW0"s8I\R-^#1$
%Sf1.&.S7hm#Zl^.S6:*(fD%37Gn;i=oIPG!p4fZ:p/NPJf8Td&3lu>AnEj/<RQS<60]6A*`8^(LE>H:m:%@b1Yk\So--4'UZj&ru
%B!af.Nt^_b64n/Mk1?efVKdHD`"NDl>-MC%1c26Vm3paA;WWW-AAK<JMZK+h[L:aAWfL;46RpkPVAL>!>(JcFoE$IAX5jSWK5_>R
%`H>QiYj?Lp#?m2"aD;H3%2'/T&&PT%IB5p:@luF%GBNZZk05gSM.S)"Rm1"nZlRn(0gQ\gWmb'BhdNDOC\5RLMR)Y[h4?i;L%Ql6
%m'%>oG(<9>4)C4R53Z1%<P>))Ope5_Xe/?/V[F@<4=hW9>E(=,0d[DcW(t*1]15CC,4tZ,%h"nn0\r_q6YP<\o3amGBPk$!a=*`g
%X[P!=7F80RKaPZ%A@4l`iXX#GO$s,l@K_[oQ^`5H=D?[H%Z1Y48)^+mF#WEqFR\\;Ol_jt5?ENd.OHI7/;VEj'0AsVbE=4%QG(2!
%9?ZLFeSSjQi<-b+HL+>^]l7-bE6"H@4QoX>HTG=ArPC][3)*WB]Ndo.d\S;h)(;Zj][HT*)Gm(HJ9OKrm]HsJCa$ZK2^Aq/"F%mE
%;'\Yj(D31<`?ITi%diR#YYF3.VH'[3O0/^tmqk)g>5TK7_2VIM8_UA*'%#U?gnln@b"-[X+Br(4n8$@@R?,E.LF-\jC&](.QJHs,
%k3)eFA5EllXsmXEJuYc&)&9"U1Wl*RmJ1r((sA--S+iEPLV$.]V/rI$#JNReN3QcB\N1Y5%D0o>[eN!JSJEKOH].tk=bd;=X4i9!
%e$Q'pF-1;]/=m&6fRn#2VRQY>.gd1di-j5f%>,enRXE-^ifXXIjK,A2NnIl3T)[Qamn^I<erQ5Z83B0rETK,%4L=\o%rfR:p1H(q
%.*Xma<&HCZ*=I4@Q5KhZa0r2OZ2>$r+o94hT;\,NX2mn2KqUns2kH@_i$MibRpb^>ES'09SaPf59:qQXpQp`HYs\I;HP?0DU(Cq#
%+^M7O?uKpM!KD5tUUNOZ*n"5robpR+Ou>$MrH!2hP&t]\nX]n_11EB7A34+E.J"9$+5LE6mXO]2SJ5_Q_h&K49i=IAp-Rl/@6da=
%mkEi+c8u!ML<I7+#(SAZ*Vsgeg9I/0(O8(R]!sjB^'6XNg3;qdE&H[F@;t<4YtI1Z7N`uggVRp5GGOHWqu%&^Xb9fEH\MVq!]7c?
%9.Or_rfL9kD=8?P*%l4907m'LTHh=O69t]s]YRY:ULXBJIE&E4e&X=\\h7n42?=(TK0@qJ;GF*,.JMU1FQ_T.WWm.GLP?N8^5(`Z
%iLb9aj<0R^;(,c*1)A`pp6rkHI)%("7Kti%M'X)\n2s5LQjVOdZOO:;G^qf+<`kFOjUD8?GF3i:r>CTl!-%1qm]##_)=%R;LMh6K
%hh',3l%Mq<-O7HmYl2'26$,c3p?W]Sk;VXp8)=e#La<K8=CNsX8Zk2[;2PhQ1;42hd-8[6gH2;L[*6=^!l%UoqVMpUJ0qS>&WClr
%"1GNCQYoLJ,2"'.6nJNI\.sY'Je=;1[i5mVZe58'<<ejC)A)nQD+BRV0%&-bGZ]IL7*ejnT%]=K(H('7\W[:34=j#qSmD&43#SRK
%J2f,;:/R,qjY0OC$a9ac].RH#c,Db3]I&^Q#lFPs![<Mp*D)Ch;E6Mfreh2X1Vas5J")P5FV)b])boT(3]Vj`:B^8c4ea8/0:]iD
%AW<8SVsri[j\BG?HI&OmP8uDV\!*Mo"8(<XBt;cP`N)_A'c-QcU?:OEjIdh91"qe/k>I%K!PQa&9!f$P_[`fL/I%)hljqm<i6p-C
%hJI9$P&M"F1;of*D8ut(db_Fg?k3,0>`hG[f"mBhq^m1MG&`XcnDB>XJA!f/Fm;@AYUY:edDO;,e%jNW+og2+\"oWBj(X)r]Ud5.
%q?Z,sGt=O1\pX#E3^%@QPgRK3;nc2CIp*(%?;2?da-R-`Xg?4&[]K:JW=mf5P33/bJ<)ndJdKOD4KK;]A2%d'Q?F=WF*iQEHOs5d
%Y'5%N`(KFD.<QgG9EclR.p6>8LF+Kh>u]rMc_sNd4cL\/=j(B08G1n8Ch4?T?G6'`*4e)]4+e?!A[&`T;H]s%6/]2,c5hMt#.PJG
%:;6.s9W>J.\Y+MN*nlSXZoq_k4smW?i]F-][RiGh"8C4WP6?Q&7Eh%VqR*.oqs4!geYN4f4:],O[DI,:1*d1+SLU-a#bMmAArNkI
%YnF81YQP)RqQr$mC!"<*0!q`3[/#j#Cs;Y\FES>teI2[HHK.C)S@%a:qru,aM!3nfqiQIuhI8_s[c>TFMY>@h*;$:r,3)RV2[00S
%U&*1;oE@XDp0Elr0VL=F#ePCKI6\'\])pF&"7$4KIt@pAaN]KO;\K_t]TJ4Ca=RjLb(<T'j`t@P%[)>dj(Fd`Ei*^1n45miRb*Ud
%EK5hl6/pKWW-Um%Za)-`Ju4mEP-gS'FYLPlj7A6HCZoOR9ruj2\Y>kUY49+)jnTb8NrpR"U.75b>B1?1LN[4f`"t4qB,Ja#8'76o
%K1?1*-X0-#X!R)''9@:k3@`>D"iTM]Y,0e&1ms]+Yn8Or`Vb6A8)3"+NT"#/gB]16LG-ls`Gk4HI<-Rl;PMc<d"HZ4Cd3g-Z\+#:
%R>F#p$.4VHnW."m;k8h`m+%OncqBJC]\W5l#>%PuEfH3[Fb$.5Ttc`m]1'=5>C]Mc-Te:EG$eZJ^t56uB`Z'=`))4!Jj>I%IRHgR
%6/)Gpqkeb#%Mkk_)$<nW(hl5P0X=A%-mg5U!)B,-+S83%-Aj!0isVo(=-&6Kjl:5TL3N.qXSB10/3EIC4C?Sm(m%VS'R4pCJ<<:f
%7b)5@`<G$R]tmToK%eRkf=LS`b\Gqn&aJH-+u:o,$hgV\1R8t._?68^$bbbD;r,V22V93fAk)Pp7cq.'h$IW[_&t(j]`\GJY:GER
%Rm]1=Yj=>HPL9=_S3Z:Z`-iA'_P6hM(@nE#',[Ekor$eLfO5Q"13KhDR<DGCei#om_lk2W%_3UrE@d"=*fN(=LY4hh"*31VdU<[H
%DJWJ$;]$dl^eqQBm-K9hgDrBl&F'!qmYX(XILFH\>q67C$6O+BmfXq@lVbt1N>/_o/NAYuHK.`2TA(h.9YRqm5u[/%IL@cFJUk\:
%G\X9B/"#^@Bkr=,>#Y>7>ha;OdnXc=3>pYP/H_GVBCT2FD$u<EAO!SVckN*ID,&AV4,`!JCKn%s'\c[(lgii^"AQ;1pas"a[0t=-
%g(n-EAY1Yn:!cj$Mr0,%>IY$NF'EU\h9Tq4cr<)bhh#WJYRLDVC'tqOT'`tg$(>UAnQTsLX!65,3OOR]@m7@Z5u[/%IL@cFOV]L=
%gVQitr0_D;K!SWZr"`PlJh^oACKm49kYk[i1tBn2\)>sUm\K+&(>(\'WMtH:8n[*eE,@%QUuH*&#R:1Tp,t-/k9t\4Xj(5cSGNsG
%XE/5kJu6snq@6^K!^5Kt9(1ad[)[6K->7.b`G`T#Xc.]#g_LrRQdM:qWHK&l"kU2]ZM(3)T[HN3A&j+sg0+=h>hU[;M1p"TGl"%.
%H3;H-:%;G,D$ujgkE@"(\GQ*_2k[-n(;C%)[QO92F'Da4kEFeRVV52N(0oT\jQH@"LJ8t`:OWD7C1m'@E,>u1/*E*<`(9<Dnf,qT
%4,`!JCKjmKkE@"efBI\R)phPGMr0,%>?D9rP95?9mX4REcr<)bhh#WJ[=.T:aUdC)F?]L0BW@WBDo&9Pp)9,#S#%^((=+AC!GAg;
%pas"_Fj^%Zp;-atYKXR0eJ4TDmsJ<!-AWZX@j^XCMUA_RfIVC"KUrJ^?f_sYh_<,(^p%"\U[P-X*2PuuY,?mXnt^m>_q#EZNk!F:
%H>rBuL&"+<S7!jaWtS1o.G7IPemT1(Im=X#!c8"_M'Z<c9roaobShLT[A,?=@sBIa9Jm"A`e_*Wm?Xg$j(!<HM$C!+S4MsSH\.:Z
%Fo+Sb1'7cn\eTi_O$5hL[;(3RTXP^lTS"WdpDC:'f`!VME,_>I79)AYS29H=R,e:N+H.g-\ta<fRWbW86F7#Q.XpH\D>^@"@"i>#
%+;k3$"*%EQib)l=./B4a^MQ$:CXBj?+tnL0GW1GIL?6t<_15eA1.._SCgZ-k3X7+G;$R2n0&:DkGT@&e`'t<UMrF`qK]62:T/UM\
%'Kc(qpPfEL@]e$/1j*YI'ZBMY,_6LOX5d(_i<N2s_pef&4P]UAH\sp%_%]#Mf[@0:`8Gk"Ho9FnA4g8q'mA.Rh78K^oD^-Q(!b+;
%3OUf0S>WAFEolTAgY`_?1VjuQ?%30`Kd\F5St9a*4-1k<=>0hVM4UDV*#5q:M"nd.^`p`5QsZ]WF<iI[CE@SZFJ.Y6D3N7ZLhK1k
%@9Noo4:1W(ce\,U[3=2"?2%gIN+\mtp>uFPMA?u^hCb++B[:HQH0f*3@IVNSYfeHZfu<TCdbX+;#B+'\S];TJSY4V=mP$4Ci9"Si
%JF0UmTT*tl<P.WlT7=>tg^jS_7\*Wd",Ma_ITCWHjp'7/5"NE,RouBh$DpmY!LN7,`=??=c&&3'7Db-ol^inE@=Th?76pFlPOhn!
%C[j?!m\(++[5>>`'WI`]+J]\t-fU^BK;,n`l=H[);qA'YHUf8fGV*euD<SKF?06l/^bG5T%Xq%0Rg_"!r;gTOIW;G;4U*0p)On,G
%VL8WuHB5\X\e%GB)7](^)?"tL4`B["lO:pV?h,):STr$3=s>9qKD'VPgX_COo(55d[cR!DEZi"HdN/!Oi'AABEC@]gOhg[;:s7$&
%[YRfA*e[N]=MU#-+l>X(&0]b[7kZM$2iq[PX.\3@/6-mi(J53+,)aFl5UWUR"ZPuATZStRi+M*i!a0`4P>2^p7[:J`",[.uF&#Nd
%MR5*p-b'tgmB`oQOQI8[4H8U(A&l8C$1k!LJ`Ilkc,PN&%8YmV=@-r@0po[%E*FVk<?&$3mjBg+FeQYg0'\VD>Ebt:no'QnH*Uf_
%OZuB3$WC(l;a1S4bDOdnNr<&4`]4^OP[S.3TZE(n#CEa3B7s=;PKX[s1=*73k#m2#fcifGMejkaK`O$&A@A/Pga;!GQZ:$m;9n2a
%5pPtPgLZuLGF:$<AA6.9[n?s8N71%q.&H&tOGb.Ep:+rUUj<qpMb_**ECF^h.f'Kpfl(Ef_Lq27QF$&r<T2m[e3B?.hsNP"$X&.T
%W"jas+2Z>nL@>tI_I$j?_Lo-_p)Edlb!QK18#u#F%mcu)T+hIi`"IfkCB.S_!r4<N_\NEB%UZQK3b2%n;RX'8cuYILd6kM+7DV-F
%j*E4[nRuH"<Z6mrfX&0:\]`W=fHJnZ`PH9aiYL&tN]U=7nG:+tRh"Tl5!]"YBArBoB+s<P>A/KSMhL\2i`!Qb<f=!AmJ^5*3a$Y9
%>$>L0W"jas+2Z>nL@>tI_I$j?_DAXi1@>oXiA45\Z3[)Q0msdcU/q%lHjDqU)8]Tk$@e1X$L\iM[]["9U[U>u$Os"S%Ei"8Sc!KQ
%=:<BQ4jgM=Ap%U[N+VH<RhFFtQ4[-,Q3L@:<gP]kA;.:e8j03oICkH^o.*sM?LG1%OkR;.7R211pCk&h+Vn<X0rWG:qcJP6puW%V
%,iq9p_1Q,(E`sq0iBZS+WII3c#0U>hirj7:jA#:WA;ipf'T0sHa/u">R!Q4U>e5s\Y64F0)muYD<k"D<?%"qg"feiMG=NC$:/2qF
%f3TmM+`,sN.L]Z46j]2`$lFb88[!V0`j`L/`sGG,[7gH)g[?<jOXE4J"X^25n'Ne?9A`nPFblW5j*%K*mQPiuk$?%(J6a*Hm9k9h
%2]+[@Pr$uG:pDV$d[oSmW:Q^^KIc/>MC5>Lmb;\XC?H?<Nkh7<Ia2#<`T+@(CQ2:>4QmaH*HSh8L91?P0^RHnJFhP-l?OW<d8_'f
%%*l`U%8fqD?nDLGe%<RC1:[O9JLZtan&%LHD%s/o+0LS612Tq$gju@_U2f/u-;W'@OVt/\]f=#E=KDr<3.;'tTMgCg!>O#hAtK(b
%P_\G;Zp2T*+(Z_V-VQ0*"T0S)hhNR>2:%GC+?gX(R5kWVDF`jX)F_D'T[9QCnaJFHeEFgB#L4,F23I3pj9)-!L%>mC3!XWRq'gAB
%U*/fd.*.:EaK4uOWfZFP59Ljl`3G^:2dj7O<M'R_&]E4Hq7Ps;=.mnu7!:SH!Fk`7FUuTRXF;0O/-^71Ekp#<\)8h9)Qhf:XG46f
%2U9AF=65(#p@r9f>K753q:9tf>T#tKTNT^Q!e7P2*7QUHD8[Q@4&SSa"Q!IsD6pFG',D#NL8kpnD9=P``uWas4"`,;O8K&\:jcZ"
%<9-Tp>PA4L*^Ouj4"Q[0?Rmb$U[0!ZbDu+IU5T+s)4t7UA-\En$]7<F-5`9GlN8Sc;#c<h)nLBHdF=T!he8^M6l+fA!Ns%`<\j[*
%L*RgBYV+:B,NLoFh`TSS63it.%$J]FS$5&$juRZf%$%g2qnl%R)ebObjn)$Xb6AnXDHHHY)''ANaihU4K4-ERU%][qHjaM#,WT3i
%OQWGRjEFl-3L?1JE+7R1n*(9fUjE"XLT6,J.aEB%[1l?\./Mm5ADc5Gif4CbA)K(Si%X.mR5l3XT?r7HTp'[3(lM$F!:sV&8c-pg
%-.u[^Tj\Q?"-<q%.>9%tMF@trJDDXD<l/5ghIYD9!2.RKUcaa/CY33+AW&]<G:+n37<HXH8fOYM_D/JBfJnsNT[)M@1&u]s9!`#o
%1&LLe+mt7M4N@QE[*<6?=N+glBjuicXtbg4A$@XBD?>8JfM=)\255)"<O1'o.ot#L;)S..p`SkhGMm2rm+?;&].n^*jieiEU%:aZ
%)TLKRlr^NpmepFqd@b5/Cl3RGb-l4(QsJhi.t]9]@N_+*7P:KG?is8beK3I#VJ$2[U(QY:k&8t3#O+9]/H[DRWFTI:,e/b/[rmJB
%<A2O5LCcoXVqb_b?798t5_'sNN&qG3O]b"*Z3*mW?SO52mD(K@*UU-5+^T3k!El!c;IL\/)Za>Q!k<o8\t&eO)eI$T_>,jpF$YiP
%N*$N/hoo.V5%//pDK1i=)[ef'$k]]6i=Qq-;HX+s+u,f*e#:Ak9u9:*B"BD;_t7rr*Bu#7IsN^FDq!-f7%-tCQhT:7iBFP%3XnrP
%c6m2-n8L'!Qq[F;]G)@g:BbGXKYu+59`bWMD2Vs:iQPK@g]ZN,d?F]./!=?H0i)k)a5HBjq`(Xb5];-],3,an4)sN`o/%jtKAr1N
%,unb!'ZF[>"-eRi!>64lQ;PI[U9-7V9`Tm*D2Z2NQ&4-K.Z2I\CXj3am9>N9g1o9"9E/R*(^nKa/0::m;apo1.#Eu+W=\8gJR&Fs
%AaiFIGkrX#^>24%;K'Ff7h(,j,Xh4=M,n)@J\D/M8%-HIO7Vi8;6q*^UiMgj*(2m1njponH<?<NI>8]N?]r,K6-k_e,,gWn2!@[_
%A^.K3%oD#HCk;<LiS9t@*1bgNC=_D&53*ck,mE.M9m""dE%;.I`MdAMZRq)4TNR7HI-T59WuegX@U-=Zo)qQ@Y&XV;T\b]L6Z0Z0
%J""b?=G2!H<mpE3)jECY,mE/X''\QFO8;30[Ih4(9-"XJ7L`YSF,/W74U0]!AGj<D/1a=*9(;R'HCudsK-$U6[6jFi:u3m=K``WA
%SA:U*,jrX@+2N@]#?/kIZn9hH#mU!DltSc$O<A-'f`Rq<p(N(IY?(7i+a"$]oU7?Tf;0hhm;9Kk.L)Ih3_Ee$5hPW-FI8ZOO^$0/
%f-^/YhGcKZg,l".]4m?3Z!q\1Mg@YNat2KlaC)oM9:s&A$8cM>?lqchWnrsADeskun3\rqi`i-Y1B/?]FK!A<Wp%m&]C_u"^S!%h
%Fe9KHAJ,e>2_e"+bkDU\[Gq=):1YL!-<#@oK:ssW0q-P*ATScI5CS4G<1U"!!2_&pM)`270(5c8daQQ!4^kP7(&4>$nq's"^^ah9
%IN9F2=Xf!IR7GNJ^N0Q?DUQ/q^qb@Q.KPH$E9'!@Q9+Ll&p<O`7N0bd"]0qiql&0Hh&@H'$J=\.*Ot`Hml)qHJ;C^rmCTU8A2E!A
%Xie2G&.i[WG$1u/*J-PZ?"eO!,jT0Vl"HprDo*c"pL8U$g<3]g[1'jXA2-\4Wp/ML\o]5l3WAaLmsb&$^Yf(Q0>IGNn`deQJ,/T-
%!C-MBVk60Qe!El1nakoshgbCLDkI%(r:op-0>IMcl1`O(g&C=-e!JCqrVl,Lc]?u_rR_&NJjQ6J%mU!R+9(^*n,<Q6)k<Q~>
%AI9_PrivateDataEnd
